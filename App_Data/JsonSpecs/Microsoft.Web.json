[
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/providers/Microsoft.Web/availableStacks",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/providers/Microsoft.Web/publishingUsers/web",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/providers/Microsoft.Web/publishingUsers/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "publishingUserName": "(string)",
                "publishingPassword": "(string)",
                "publishingPasswordHash": "(string)",
                "publishingPasswordHashSalt": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "name": "Username",
                "publishingUserName": "Username used for publishing.",
                "publishingPassword": "Password used for publishing.",
                "publishingPasswordHash": "Password hash used for publishing.",
                "publishingPasswordHashSalt": "Password hash salt used for publishing."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/providers/Microsoft.Web/sourcecontrols",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "token": "(string)",
                "tokenSecret": "(string)",
                "refreshToken": "(string)",
                "expirationTime": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "name": "Name or source control type.",
                "token": "OAuth access token.",
                "tokenSecret": "OAuth access token secret.",
                "refreshToken": "OAuth refresh token.",
                "expirationTime": "OAuth token expiration."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/certificateOrders",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.CertificateRegistration/validateCertificateRegistrationInformation",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "certificates": {},
                "distinguishedName": "(string)",
                "domainVerificationToken": "(string)",
                "validityInYears": "(integer)",
                "keySize": "(integer)",
                "productType": "(string)",
                "autoRenew": "(boolean)",
                "provisioningState": "(string)",
                "status": "(string)",
                "signedCertificate": {
                    "version": "(integer)",
                    "serialNumber": "(string)",
                    "thumbprint": "(string)",
                    "subject": "(string)",
                    "notBefore": "(string)",
                    "notAfter": "(string)",
                    "signatureAlgorithm": "(string)",
                    "issuer": "(string)",
                    "rawData": "(string)"
                },
                "csr": "(string)",
                "intermediate": {
                    "version": "(integer)",
                    "serialNumber": "(string)",
                    "thumbprint": "(string)",
                    "subject": "(string)",
                    "notBefore": "(string)",
                    "notAfter": "(string)",
                    "signatureAlgorithm": "(string)",
                    "issuer": "(string)",
                    "rawData": "(string)"
                },
                "root": {
                    "version": "(integer)",
                    "serialNumber": "(string)",
                    "thumbprint": "(string)",
                    "subject": "(string)",
                    "notBefore": "(string)",
                    "notAfter": "(string)",
                    "signatureAlgorithm": "(string)",
                    "issuer": "(string)",
                    "rawData": "(string)"
                },
                "serialNumber": "(string)",
                "lastCertificateIssuanceTime": "(string)",
                "expirationTime": "(string)",
                "isPrivateKeyExternal": "(boolean)",
                "appServiceCertificateNotRenewableReasons": [
                    "(string)"
                ],
                "nextAutoRenewalTimeStamp": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "certificates": {},
                "distinguishedName": "Certificate distinguished name.",
                "domainVerificationToken": "Domain verification token.",
                "validityInYears": "Duration in years (must be between 1 and 3).",
                "keySize": "Certificate key size.",
                "productType": "Certificate product type.",
                "autoRenew": "<code>true</code> if the certificate should be automatically renewed when it expires; otherwise, <code>false</code>.",
                "provisioningState": "Status of certificate order.",
                "status": "Current order status.",
                "signedCertificate": {
                    "version": "Version.",
                    "serialNumber": "Serial Number.",
                    "thumbprint": "Thumbprint.",
                    "subject": "Subject.",
                    "notBefore": "Valid from.",
                    "notAfter": "Valid to.",
                    "signatureAlgorithm": "Signature algorithm.",
                    "issuer": "Issuer.",
                    "rawData": "Raw certificate data."
                },
                "csr": "Last CSR that was created for this order.",
                "intermediate": {
                    "version": "Version.",
                    "serialNumber": "Serial Number.",
                    "thumbprint": "Thumbprint.",
                    "subject": "Subject.",
                    "notBefore": "Valid from.",
                    "notAfter": "Valid to.",
                    "signatureAlgorithm": "Signature algorithm.",
                    "issuer": "Issuer.",
                    "rawData": "Raw certificate data."
                },
                "root": {
                    "version": "Version.",
                    "serialNumber": "Serial Number.",
                    "thumbprint": "Thumbprint.",
                    "subject": "Subject.",
                    "notBefore": "Valid from.",
                    "notAfter": "Valid to.",
                    "signatureAlgorithm": "Signature algorithm.",
                    "issuer": "Issuer.",
                    "rawData": "Raw certificate data."
                },
                "serialNumber": "Current serial number of the certificate.",
                "lastCertificateIssuanceTime": "Certificate last issuance time.",
                "expirationTime": "Certificate expiration time.",
                "isPrivateKeyExternal": "<code>true</code> if private key is external; otherwise, <code>false</code>.",
                "appServiceCertificateNotRenewableReasons": [
                    null
                ],
                "nextAutoRenewalTimeStamp": "Time stamp when the certificate would be auto renewed next"
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability",
        "RequestBody": {
            "name": "(string)"
        },
        "RequestBodyDoc": {
            "name": "Name of the object."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations",
        "RequestBody": {
            "keywords": "(string)",
            "maxDomainRecommendations": "(integer)"
        },
        "RequestBodyDoc": {
            "keywords": "Keywords to be used for generating domain recommendations.",
            "maxDomainRecommendations": "Maximum number of recommendations."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/topLevelDomains/{name}/listAgreements",
        "RequestBody": {
            "includePrivacy": "(boolean)",
            "forTransfer": "(boolean)"
        },
        "RequestBodyDoc": {
            "includePrivacy": "If <code>true</code>, then the list of agreements will include agreements for domain privacy as well; otherwise, <code>false</code>.",
            "forTransfer": "If <code>true</code>, then the list of agreements will include agreements for domain transfer as well; otherwise, <code>false</code>."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/availableStacks",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability",
        "RequestBody": {
            "name": "(string)",
            "type": "(string)",
            "isFqdn": "(boolean)"
        },
        "RequestBodyDoc": {
            "name": "Resource name to verify.",
            "type": "Resource type used for verification.",
            "isFqdn": "Is fully qualified domain name."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/classicMobileServices",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations/reset",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/resourceHealthMetadata",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/providers/Microsoft.Web/skus",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
        "RequestBody": {
            "targetResourceGroup": "(string)",
            "resources": [
                "(string)"
            ]
        },
        "RequestBodyDoc": {
            "resources": [
                null
            ]
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "certificates": {},
                "distinguishedName": "(string)",
                "domainVerificationToken": "(string)",
                "validityInYears": "(integer)",
                "keySize": "(integer)",
                "productType": "(string)",
                "autoRenew": "(boolean)",
                "provisioningState": "(string)",
                "status": "(string)",
                "signedCertificate": {
                    "version": "(integer)",
                    "serialNumber": "(string)",
                    "thumbprint": "(string)",
                    "subject": "(string)",
                    "notBefore": "(string)",
                    "notAfter": "(string)",
                    "signatureAlgorithm": "(string)",
                    "issuer": "(string)",
                    "rawData": "(string)"
                },
                "csr": "(string)",
                "intermediate": {
                    "version": "(integer)",
                    "serialNumber": "(string)",
                    "thumbprint": "(string)",
                    "subject": "(string)",
                    "notBefore": "(string)",
                    "notAfter": "(string)",
                    "signatureAlgorithm": "(string)",
                    "issuer": "(string)",
                    "rawData": "(string)"
                },
                "root": {
                    "version": "(integer)",
                    "serialNumber": "(string)",
                    "thumbprint": "(string)",
                    "subject": "(string)",
                    "notBefore": "(string)",
                    "notAfter": "(string)",
                    "signatureAlgorithm": "(string)",
                    "issuer": "(string)",
                    "rawData": "(string)"
                },
                "serialNumber": "(string)",
                "lastCertificateIssuanceTime": "(string)",
                "expirationTime": "(string)",
                "isPrivateKeyExternal": "(boolean)",
                "appServiceCertificateNotRenewableReasons": [
                    "(string)"
                ],
                "nextAutoRenewalTimeStamp": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "certificates": {},
                "distinguishedName": "Certificate distinguished name.",
                "domainVerificationToken": "Domain verification token.",
                "validityInYears": "Duration in years (must be between 1 and 3).",
                "keySize": "Certificate key size.",
                "productType": "Certificate product type.",
                "autoRenew": "<code>true</code> if the certificate should be automatically renewed when it expires; otherwise, <code>false</code>.",
                "provisioningState": "Status of certificate order.",
                "status": "Current order status.",
                "signedCertificate": {
                    "version": "Version.",
                    "serialNumber": "Serial Number.",
                    "thumbprint": "Thumbprint.",
                    "subject": "Subject.",
                    "notBefore": "Valid from.",
                    "notAfter": "Valid to.",
                    "signatureAlgorithm": "Signature algorithm.",
                    "issuer": "Issuer.",
                    "rawData": "Raw certificate data."
                },
                "csr": "Last CSR that was created for this order.",
                "intermediate": {
                    "version": "Version.",
                    "serialNumber": "Serial Number.",
                    "thumbprint": "Thumbprint.",
                    "subject": "Subject.",
                    "notBefore": "Valid from.",
                    "notAfter": "Valid to.",
                    "signatureAlgorithm": "Signature algorithm.",
                    "issuer": "Issuer.",
                    "rawData": "Raw certificate data."
                },
                "root": {
                    "version": "Version.",
                    "serialNumber": "Serial Number.",
                    "thumbprint": "Thumbprint.",
                    "subject": "Subject.",
                    "notBefore": "Valid from.",
                    "notAfter": "Valid to.",
                    "signatureAlgorithm": "Signature algorithm.",
                    "issuer": "Issuer.",
                    "rawData": "Raw certificate data."
                },
                "serialNumber": "Current serial number of the certificate.",
                "lastCertificateIssuanceTime": "Certificate last issuance time.",
                "expirationTime": "Certificate expiration time.",
                "isPrivateKeyExternal": "<code>true</code> if private key is external; otherwise, <code>false</code>.",
                "appServiceCertificateNotRenewableReasons": [
                    null
                ],
                "nextAutoRenewalTimeStamp": "Time stamp when the certificate would be auto renewed next"
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "keyVaultId": "(string)",
                "keyVaultSecretName": "(string)",
                "provisioningState": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "keyVaultId": "Key Vault resource Id.",
                "keyVaultSecretName": "Key Vault secret name.",
                "provisioningState": "Status of the Key Vault secret."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/reissue",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "keySize": "(integer)",
                "delayExistingRevokeInHours": "(integer)",
                "csr": "(string)",
                "isPrivateKeyExternal": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "keySize": "Certificate Key Size.",
                "delayExistingRevokeInHours": "Delay in hours to revoke existing certificate after the new certificate is issued.",
                "csr": "Csr to be used for re-key operation.",
                "isPrivateKeyExternal": "Should we change the ASC type (from managed private key to external private key and vice versa)."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/renew",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "keySize": "(integer)",
                "csr": "(string)",
                "isPrivateKeyExternal": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "keySize": "Certificate Key Size.",
                "csr": "Csr to be used for re-key operation.",
                "isPrivateKeyExternal": "Should we change the ASC type (from managed private key to external private key and vice versa)."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendEmail",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/resendRequestEmails",
        "RequestBody": {
            "name": "(string)"
        },
        "RequestBodyDoc": {
            "name": "Name of the object."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/retrieveSiteSeal",
        "RequestBody": {
            "lightTheme": "(boolean)",
            "locale": "(string)"
        },
        "RequestBodyDoc": {
            "lightTheme": "Theme",
            "locale": "Locale"
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/verifyDomainOwnership",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "contactAdmin": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactBilling": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactRegistrant": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "contactTech": {
                    "addressMailing": {
                        "address1": "(string)",
                        "address2": "(string)",
                        "city": "(string)",
                        "country": "(string)",
                        "postalCode": "(string)",
                        "state": "(string)"
                    },
                    "email": "(string)",
                    "fax": "(string)",
                    "jobTitle": "(string)",
                    "nameFirst": "(string)",
                    "nameLast": "(string)",
                    "nameMiddle": "(string)",
                    "organization": "(string)",
                    "phone": "(string)"
                },
                "registrationStatus": "(string)",
                "provisioningState": "(string)",
                "nameServers": [
                    "(string)"
                ],
                "privacy": "(boolean)",
                "createdTime": "(string)",
                "expirationTime": "(string)",
                "lastRenewedTime": "(string)",
                "autoRenew": "(boolean)",
                "readyForDnsRecordManagement": "(boolean)",
                "managedHostNames": [
                    {
                        "name": "(string)",
                        "siteNames": [
                            "(string)"
                        ],
                        "azureResourceName": "(string)",
                        "azureResourceType": "(string)",
                        "customHostNameDnsRecordType": "(string)",
                        "hostNameType": "(string)"
                    }
                ],
                "consent": {
                    "agreementKeys": [
                        "(string)"
                    ],
                    "agreedBy": "(string)",
                    "agreedAt": "(string)"
                },
                "domainNotRenewableReasons": [
                    "(string)"
                ],
                "dnsType": "(string)",
                "dnsZoneId": "(string)",
                "targetDnsType": "(string)",
                "authCode": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "contactAdmin": {
                    "addressMailing": {
                        "address1": "Address 1.",
                        "address2": "Address 2.",
                        "city": "City.",
                        "country": "Country.",
                        "postalCode": "Postal code.",
                        "state": "State."
                    },
                    "email": "Email address.",
                    "fax": "Fax number.",
                    "jobTitle": "Job title.",
                    "nameFirst": "First name.",
                    "nameLast": "Last name.",
                    "nameMiddle": "Middle name.",
                    "organization": "Organization.",
                    "phone": "Phone number."
                },
                "contactBilling": {
                    "addressMailing": {
                        "address1": "Address 1.",
                        "address2": "Address 2.",
                        "city": "City.",
                        "country": "Country.",
                        "postalCode": "Postal code.",
                        "state": "State."
                    },
                    "email": "Email address.",
                    "fax": "Fax number.",
                    "jobTitle": "Job title.",
                    "nameFirst": "First name.",
                    "nameLast": "Last name.",
                    "nameMiddle": "Middle name.",
                    "organization": "Organization.",
                    "phone": "Phone number."
                },
                "contactRegistrant": {
                    "addressMailing": {
                        "address1": "Address 1.",
                        "address2": "Address 2.",
                        "city": "City.",
                        "country": "Country.",
                        "postalCode": "Postal code.",
                        "state": "State."
                    },
                    "email": "Email address.",
                    "fax": "Fax number.",
                    "jobTitle": "Job title.",
                    "nameFirst": "First name.",
                    "nameLast": "Last name.",
                    "nameMiddle": "Middle name.",
                    "organization": "Organization.",
                    "phone": "Phone number."
                },
                "contactTech": {
                    "addressMailing": {
                        "address1": "Address 1.",
                        "address2": "Address 2.",
                        "city": "City.",
                        "country": "Country.",
                        "postalCode": "Postal code.",
                        "state": "State."
                    },
                    "email": "Email address.",
                    "fax": "Fax number.",
                    "jobTitle": "Job title.",
                    "nameFirst": "First name.",
                    "nameLast": "Last name.",
                    "nameMiddle": "Middle name.",
                    "organization": "Organization.",
                    "phone": "Phone number."
                },
                "registrationStatus": "Domain registration status.",
                "provisioningState": "Domain provisioning state.",
                "nameServers": [
                    null
                ],
                "privacy": "<code>true</code> if domain privacy is enabled for this domain; otherwise, <code>false</code>.",
                "createdTime": "Domain creation timestamp.",
                "expirationTime": "Domain expiration timestamp.",
                "lastRenewedTime": "Timestamp when the domain was renewed last time.",
                "autoRenew": "<code>true</code> if the domain should be automatically renewed; otherwise, <code>false</code>.",
                "readyForDnsRecordManagement": "<code>true</code> if Azure can assign this domain to App Service apps; otherwise, <code>false</code>. This value will be <code>true</code> if domain registration status is active and \n it is hosted on name servers Azure has programmatic access to.",
                "managedHostNames": [
                    {
                        "name": "Name of the hostname.",
                        "siteNames": [
                            null
                        ],
                        "azureResourceName": "Name of the Azure resource the hostname is assigned to. If it is assigned to a Traffic Manager then it will be the Traffic Manager name otherwise it will be the app name.",
                        "azureResourceType": "Type of the Azure resource the hostname is assigned to.",
                        "customHostNameDnsRecordType": "Type of the DNS record.",
                        "hostNameType": "Type of the hostname."
                    }
                ],
                "consent": {
                    "agreementKeys": [
                        null
                    ],
                    "agreedBy": "Client IP address.",
                    "agreedAt": "Timestamp when the agreements were accepted."
                },
                "domainNotRenewableReasons": [
                    null
                ],
                "dnsType": "Current DNS type",
                "dnsZoneId": "Azure DNS Zone to use",
                "targetDnsType": "Target DNS type (would be used for migration)"
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "ownershipId": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "ownershipId": "Ownership Id."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/domainOwnershipIdentifiers/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "ownershipId": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "ownershipId": "Ownership Id."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "friendlyName": "(string)",
                "subjectName": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "pfxBlob": "(string)",
                "siteName": "(string)",
                "selfLink": "(string)",
                "issuer": "(string)",
                "issueDate": "(string)",
                "expirationDate": "(string)",
                "password": "(string)",
                "thumbprint": "(string)",
                "valid": "(boolean)",
                "cerBlob": "(string)",
                "publicKeyHash": "(string)",
                "hostingEnvironmentProfile": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)"
                },
                "keyVaultId": "(string)",
                "keyVaultSecretName": "(string)",
                "keyVaultSecretStatus": "(string)",
                "geoRegion": "(string)",
                "name": "(string)",
                "serverFarmId": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "friendlyName": "Friendly name of the certificate.",
                "subjectName": "Subject name of the certificate.",
                "hostNames": [
                    null
                ],
                "pfxBlob": "Pfx blob.",
                "siteName": "App name.",
                "selfLink": "Self link.",
                "issuer": "Certificate issuer.",
                "issueDate": "Certificate issue Date.",
                "expirationDate": "Certificate expriration date.",
                "password": "Certificate password.",
                "thumbprint": "Certificate thumbprint.",
                "valid": "Is the certificate valid?.",
                "cerBlob": "Raw bytes of .cer file",
                "publicKeyHash": "Public key hash.",
                "hostingEnvironmentProfile": {
                    "id": "Resource ID of the App Service Environment.",
                    "name": "Name of the App Service Environment.",
                    "type": "Resource type of the App Service Environment."
                },
                "keyVaultId": "Key Vault Csm resource Id.",
                "keyVaultSecretName": "Key Vault secret name.",
                "keyVaultSecretStatus": "Status of the Key Vault secret.",
                "geoRegion": "Region of the certificate.",
                "name": "Resource name of the certificate.",
                "serverFarmId": "Resource ID of the associated App Service plan, formatted as: \"/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\"."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "friendlyName": "(string)",
                "subjectName": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "pfxBlob": "(string)",
                "siteName": "(string)",
                "selfLink": "(string)",
                "issuer": "(string)",
                "issueDate": "(string)",
                "expirationDate": "(string)",
                "password": "(string)",
                "thumbprint": "(string)",
                "valid": "(boolean)",
                "cerBlob": "(string)",
                "publicKeyHash": "(string)",
                "hostingEnvironmentProfile": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)"
                },
                "keyVaultId": "(string)",
                "keyVaultSecretName": "(string)",
                "keyVaultSecretStatus": "(string)",
                "geoRegion": "(string)",
                "name": "(string)",
                "serverFarmId": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "friendlyName": "Friendly name of the certificate.",
                "subjectName": "Subject name of the certificate.",
                "hostNames": [
                    null
                ],
                "pfxBlob": "Pfx blob.",
                "siteName": "App name.",
                "selfLink": "Self link.",
                "issuer": "Certificate issuer.",
                "issueDate": "Certificate issue Date.",
                "expirationDate": "Certificate expriration date.",
                "password": "Certificate password.",
                "thumbprint": "Certificate thumbprint.",
                "valid": "Is the certificate valid?.",
                "cerBlob": "Raw bytes of .cer file",
                "publicKeyHash": "Public key hash.",
                "hostingEnvironmentProfile": {
                    "id": "Resource ID of the App Service Environment.",
                    "name": "Name of the App Service Environment.",
                    "type": "Resource type of the App Service Environment."
                },
                "keyVaultId": "Key Vault Csm resource Id.",
                "keyVaultSecretName": "Key Vault secret name.",
                "keyVaultSecretStatus": "Status of the Key Vault secret.",
                "geoRegion": "Region of the certificate.",
                "name": "Resource name of the certificate.",
                "serverFarmId": "Resource ID of the associated App Service plan, formatted as: \"/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\"."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/classicMobileServices/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "location": "(string)",
                "provisioningState": "(string)",
                "status": "(string)",
                "vnetName": "(string)",
                "vnetResourceGroupName": "(string)",
                "vnetSubnetName": "(string)",
                "virtualNetwork": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)",
                    "subnet": "(string)"
                },
                "internalLoadBalancingMode": "(string)",
                "multiSize": "(string)",
                "multiRoleCount": "(integer)",
                "workerPools": [
                    {
                        "workerSizeId": "(integer)",
                        "computeMode": "(string)",
                        "workerSize": "(string)",
                        "workerCount": "(integer)",
                        "instanceNames": [
                            "(string)"
                        ]
                    }
                ],
                "ipsslAddressCount": "(integer)",
                "databaseEdition": "(string)",
                "databaseServiceObjective": "(string)",
                "upgradeDomains": "(integer)",
                "subscriptionId": "(string)",
                "dnsSuffix": "(string)",
                "lastAction": "(string)",
                "lastActionResult": "(string)",
                "allowedMultiSizes": "(string)",
                "allowedWorkerSizes": "(string)",
                "maximumNumberOfMachines": "(integer)",
                "vipMappings": [
                    {
                        "virtualIP": "(string)",
                        "internalHttpPort": "(integer)",
                        "internalHttpsPort": "(integer)",
                        "inUse": "(boolean)"
                    }
                ],
                "environmentCapacities": [
                    {
                        "name": "(string)",
                        "availableCapacity": "(integer)",
                        "totalCapacity": "(integer)",
                        "unit": "(string)",
                        "computeMode": "(string)",
                        "workerSize": "(string)",
                        "workerSizeId": "(integer)",
                        "excludeFromCapacityAllocation": "(boolean)",
                        "isApplicableForAllComputeModes": "(boolean)",
                        "siteMode": "(string)"
                    }
                ],
                "networkAccessControlList": [
                    {
                        "action": "(string)",
                        "description": "(string)",
                        "order": "(integer)",
                        "remoteSubnet": "(string)"
                    }
                ],
                "environmentIsHealthy": "(boolean)",
                "environmentStatus": "(string)",
                "resourceGroup": "(string)",
                "frontEndScaleFactor": "(integer)",
                "defaultFrontEndScaleFactor": "(integer)",
                "apiManagementAccountId": "(string)",
                "suspended": "(boolean)",
                "dynamicCacheEnabled": "(boolean)",
                "clusterSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "name": "Name of the App Service Environment.",
                "location": "Location of the App Service Environment, e.g. \"West US\".",
                "provisioningState": "Provisioning state of the App Service Environment.",
                "status": "Current status of the App Service Environment.",
                "vnetName": "Name of the Virtual Network for the App Service Environment.",
                "vnetResourceGroupName": "Resource group of the Virtual Network.",
                "vnetSubnetName": "Subnet of the Virtual Network.",
                "virtualNetwork": {
                    "id": "Resource id of the Virtual Network.",
                    "name": "Name of the Virtual Network (read-only).",
                    "type": "Resource type of the Virtual Network (read-only).",
                    "subnet": "Subnet within the Virtual Network."
                },
                "internalLoadBalancingMode": "Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment.",
                "multiSize": "Front-end VM size, e.g. \"Medium\", \"Large\".",
                "multiRoleCount": "Number of front-end instances.",
                "workerPools": [
                    {
                        "workerSizeId": "Worker size ID for referencing this worker pool.",
                        "computeMode": "Shared or dedicated app hosting.",
                        "workerSize": "VM size of the worker pool instances.",
                        "workerCount": "Number of instances in the worker pool.",
                        "instanceNames": [
                            null
                        ]
                    }
                ],
                "ipsslAddressCount": "Number of IP SSL addresses reserved for the App Service Environment.",
                "databaseEdition": "Edition of the metadata database for the App Service Environment, e.g. \"Standard\".",
                "databaseServiceObjective": "Service objective of the metadata database for the App Service Environment, e.g. \"S0\".",
                "upgradeDomains": "Number of upgrade domains of the App Service Environment.",
                "subscriptionId": "Subscription of the App Service Environment.",
                "dnsSuffix": "DNS suffix of the App Service Environment.",
                "lastAction": "Last deployment action on the App Service Environment.",
                "lastActionResult": "Result of the last deployment action on the App Service Environment.",
                "allowedMultiSizes": "List of comma separated strings describing which VM sizes are allowed for front-ends.",
                "allowedWorkerSizes": "List of comma separated strings describing which VM sizes are allowed for workers.",
                "maximumNumberOfMachines": "Maximum number of VMs in the App Service Environment.",
                "vipMappings": [
                    {
                        "virtualIP": "Virtual IP address.",
                        "internalHttpPort": "Internal HTTP port.",
                        "internalHttpsPort": "Internal HTTPS port.",
                        "inUse": "Is virtual IP mapping in use."
                    }
                ],
                "environmentCapacities": [
                    {
                        "name": "Name of the stamp.",
                        "availableCapacity": "Available capacity (# of machines, bytes of storage etc...).",
                        "totalCapacity": "Total capacity (# of machines, bytes of storage etc...).",
                        "unit": "Name of the unit.",
                        "computeMode": "Shared/dedicated workers.",
                        "workerSize": "Size of the machines.",
                        "workerSizeId": "Size ID of machines: \n 0 - Small\n 1 - Medium\n 2 - Large",
                        "excludeFromCapacityAllocation": "If <code>true</code>, it includes basic apps.\n Basic apps are not used for capacity allocation.",
                        "isApplicableForAllComputeModes": "<code>true</code> if capacity is applicable for all apps; otherwise, <code>false</code>.",
                        "siteMode": "Shared or Dedicated."
                    }
                ],
                "networkAccessControlList": [
                    {
                        "action": "Action object.",
                        "description": "Description.",
                        "order": "Order of precedence.",
                        "remoteSubnet": "Remote subnet."
                    }
                ],
                "environmentIsHealthy": "True/false indicating whether the App Service Environment is healthy.",
                "environmentStatus": "Detailed message about with results of the last check of the App Service Environment.",
                "resourceGroup": "Resource group of the App Service Environment.",
                "frontEndScaleFactor": "Scale factor for front-ends.",
                "defaultFrontEndScaleFactor": "Default Scale Factor for FrontEnds.",
                "apiManagementAccountId": "API Management Account associated with the App Service Environment.",
                "suspended": "<code>true</code> if the App Service Environment is suspended; otherwise, <code>false</code>. The environment can be suspended, e.g. when the management endpoint is no longer available\n (most likely because NSG blocked the incoming traffic).",
                "dynamicCacheEnabled": "True/false indicating whether the App Service Environment is suspended. The environment can be suspended e.g. when the management endpoint is no longer available\n (most likely because NSG blocked the incoming traffic).",
                "clusterSettings": [
                    {
                        "name": "Pair name.",
                        "value": "Pair value."
                    }
                ]
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metricdefinitions",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "workerSizeId": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerCount": "(integer)",
                "instanceNames": [
                    "(string)"
                ]
            },
            "sku": {
                "name": "(string)",
                "tier": "(string)",
                "size": "(string)",
                "family": "(string)",
                "capacity": "(integer)",
                "skuCapacity": {
                    "minimum": "(integer)",
                    "maximum": "(integer)",
                    "default": "(integer)",
                    "scaleType": "(string)"
                },
                "locations": [
                    "(string)"
                ],
                "capabilities": [
                    {
                        "name": "(string)",
                        "value": "(string)",
                        "reason": "(string)"
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "workerSizeId": "Worker size ID for referencing this worker pool.",
                "computeMode": "Shared or dedicated app hosting.",
                "workerSize": "VM size of the worker pool instances.",
                "workerCount": "Number of instances in the worker pool.",
                "instanceNames": [
                    null
                ]
            },
            "sku": {
                "name": "Name of the resource SKU.",
                "tier": "Service tier of the resource SKU.",
                "size": "Size specifier of the resource SKU.",
                "family": "Family code of the resource SKU.",
                "capacity": "Current number of instances assigned to the resource.",
                "skuCapacity": {
                    "minimum": "Minimum number of workers for this App Service plan SKU.",
                    "maximum": "Maximum number of workers for this App Service plan SKU.",
                    "default": "Default number of workers for this App Service plan SKU.",
                    "scaleType": "Available scale configurations for an App Service plan."
                },
                "locations": [
                    null
                ],
                "capabilities": [
                    {
                        "name": "Name of the SKU capability.",
                        "value": "Value of the SKU capability.",
                        "reason": "Reason of the SKU capability."
                    }
                ]
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "workerSizeId": "(integer)",
                "computeMode": "(string)",
                "workerSize": "(string)",
                "workerCount": "(integer)",
                "instanceNames": [
                    "(string)"
                ]
            },
            "sku": {
                "name": "(string)",
                "tier": "(string)",
                "size": "(string)",
                "family": "(string)",
                "capacity": "(integer)",
                "skuCapacity": {
                    "minimum": "(integer)",
                    "maximum": "(integer)",
                    "default": "(integer)",
                    "scaleType": "(string)"
                },
                "locations": [
                    "(string)"
                ],
                "capabilities": [
                    {
                        "name": "(string)",
                        "value": "(string)",
                        "reason": "(string)"
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "workerSizeId": "Worker size ID for referencing this worker pool.",
                "computeMode": "Shared or dedicated app hosting.",
                "workerSize": "VM size of the worker pool instances.",
                "workerCount": "Number of instances in the worker pool.",
                "instanceNames": [
                    null
                ]
            },
            "sku": {
                "name": "Name of the resource SKU.",
                "tier": "Service tier of the resource SKU.",
                "size": "Size specifier of the resource SKU.",
                "family": "Family code of the resource SKU.",
                "capacity": "Current number of instances assigned to the resource.",
                "skuCapacity": {
                    "minimum": "Minimum number of workers for this App Service plan SKU.",
                    "maximum": "Maximum number of workers for this App Service plan SKU.",
                    "default": "Default number of workers for this App Service plan SKU.",
                    "scaleType": "Available scale configurations for an App Service plan."
                },
                "locations": [
                    null
                ],
                "capabilities": [
                    {
                        "name": "Name of the SKU capability.",
                        "value": "Value of the SKU capability.",
                        "reason": "Reason of the SKU capability."
                    }
                ]
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/resourceHealthMetadata",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "workerTierName": "(string)",
                "status": "(string)",
                "subscription": "(string)",
                "adminSiteName": "(string)",
                "hostingEnvironmentProfile": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)"
                },
                "maximumNumberOfWorkers": "(integer)",
                "geoRegion": "(string)",
                "perSiteScaling": "(boolean)",
                "numberOfSites": "(integer)",
                "resourceGroup": "(string)",
                "reserved": "(boolean)",
                "targetWorkerCount": "(integer)",
                "targetWorkerSizeId": "(integer)",
                "provisioningState": "(string)"
            },
            "sku": {
                "name": "(string)",
                "tier": "(string)",
                "size": "(string)",
                "family": "(string)",
                "capacity": "(integer)",
                "skuCapacity": {
                    "minimum": "(integer)",
                    "maximum": "(integer)",
                    "default": "(integer)",
                    "scaleType": "(string)"
                },
                "locations": [
                    "(string)"
                ],
                "capabilities": [
                    {
                        "name": "(string)",
                        "value": "(string)",
                        "reason": "(string)"
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "name": "Name for the App Service plan.",
                "workerTierName": "Target worker tier assigned to the App Service plan.",
                "status": "App Service plan status.",
                "subscription": "App Service plan subscription.",
                "adminSiteName": "App Service plan administration site.",
                "hostingEnvironmentProfile": {
                    "id": "Resource ID of the App Service Environment.",
                    "name": "Name of the App Service Environment.",
                    "type": "Resource type of the App Service Environment."
                },
                "maximumNumberOfWorkers": "Maximum number of instances that can be assigned to this App Service plan.",
                "geoRegion": "Geographical location for the App Service plan.",
                "perSiteScaling": "If <code>true</code>, apps assigned to this App Service plan can be scaled independently.\n If <code>false</code>, apps assigned to this App Service plan will scale to all instances of the plan.",
                "numberOfSites": "Number of apps assigned to this App Service plan.",
                "resourceGroup": "Resource group of the App Service plan.",
                "reserved": "Reserved.",
                "targetWorkerCount": "Scaling worker count.",
                "targetWorkerSizeId": "Scaling worker size ID.",
                "provisioningState": "Provisioning state of the App Service Environment."
            },
            "sku": {
                "name": "Name of the resource SKU.",
                "tier": "Service tier of the resource SKU.",
                "size": "Size specifier of the resource SKU.",
                "family": "Family code of the resource SKU.",
                "capacity": "Current number of instances assigned to the resource.",
                "skuCapacity": {
                    "minimum": "Minimum number of workers for this App Service plan SKU.",
                    "maximum": "Maximum number of workers for this App Service plan SKU.",
                    "default": "Default number of workers for this App Service plan SKU.",
                    "scaleType": "Available scale configurations for an App Service plan."
                },
                "locations": [
                    null
                ],
                "capabilities": [
                    {
                        "name": "Name of the SKU capability.",
                        "value": "Value of the SKU capability.",
                        "reason": "Reason of the SKU capability."
                    }
                ]
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/capabilities",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/sites",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionPlanLimits/limit",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/hybridConnectionRelays",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "vnetName": "The Virtual Network name.",
                "vpnPackageUri": "The URI where the VPN package can be downloaded."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "startAddress": "(string)",
                "endAddress": "(string)",
                "routeType": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                "routeType": "The type of route this is:\n DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918\n INHERITED - Routes inherited from the real Virtual Network routes\n STATIC - Static route set on the app only\n \n These values will be used for syncing an app's routes with those from a Virtual Network."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "startAddress": "(string)",
                "endAddress": "(string)",
                "routeType": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                "routeType": "The type of route this is:\n DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918\n INHERITED - Routes inherited from the real Virtual Network routes\n STATIC - Static route set on the app only\n \n These values will be used for syncing an app's routes with those from a Virtual Network."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "state": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "repositorySiteName": "(string)",
                "usageState": "(string)",
                "enabled": "(boolean)",
                "enabledHostNames": [
                    "(string)"
                ],
                "availabilityState": "(string)",
                "hostNameSslStates": [
                    {
                        "name": "(string)",
                        "sslState": "(string)",
                        "virtualIP": "(string)",
                        "thumbprint": "(string)",
                        "toUpdate": "(boolean)",
                        "hostType": "(string)"
                    }
                ],
                "serverFarmId": "(string)",
                "reserved": "(boolean)",
                "lastModifiedTimeUtc": "(string)",
                "siteConfig": {
                    "numberOfWorkers": "(integer)",
                    "defaultDocuments": [
                        "(string)"
                    ],
                    "netFrameworkVersion": "(string)",
                    "phpVersion": "(string)",
                    "pythonVersion": "(string)",
                    "nodeVersion": "(string)",
                    "linuxFxVersion": "(string)",
                    "requestTracingEnabled": "(boolean)",
                    "requestTracingExpirationTime": "(string)",
                    "remoteDebuggingEnabled": "(boolean)",
                    "remoteDebuggingVersion": "(string)",
                    "httpLoggingEnabled": "(boolean)",
                    "logsDirectorySizeLimit": "(integer)",
                    "detailedErrorLoggingEnabled": "(boolean)",
                    "publishingUsername": "(string)",
                    "appSettings": [
                        {
                            "name": "(string)",
                            "value": "(string)"
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "(string)",
                            "connectionString": "(string)",
                            "type": "(string)"
                        }
                    ],
                    "machineKey": {
                        "validation": "(string)",
                        "validationKey": "(string)",
                        "decryption": "(string)",
                        "decryptionKey": "(string)"
                    },
                    "handlerMappings": [
                        {
                            "extension": "(string)",
                            "scriptProcessor": "(string)",
                            "arguments": "(string)"
                        }
                    ],
                    "documentRoot": "(string)",
                    "scmType": "(string)",
                    "use32BitWorkerProcess": "(boolean)",
                    "webSocketsEnabled": "(boolean)",
                    "alwaysOn": "(boolean)",
                    "javaVersion": "(string)",
                    "javaContainer": "(string)",
                    "javaContainerVersion": "(string)",
                    "appCommandLine": "(string)",
                    "managedPipelineMode": "(string)",
                    "virtualApplications": [
                        {
                            "virtualPath": "(string)",
                            "physicalPath": "(string)",
                            "preloadEnabled": "(boolean)",
                            "virtualDirectories": [
                                {
                                    "virtualPath": "(string)",
                                    "physicalPath": "(string)"
                                }
                            ]
                        }
                    ],
                    "loadBalancing": "(string)",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "(string)",
                                "reroutePercentage": "(number)",
                                "changeStep": "(number)",
                                "changeIntervalInMinutes": "(integer)",
                                "minReroutePercentage": "(number)",
                                "maxReroutePercentage": "(number)",
                                "changeDecisionCallbackUrl": "(string)",
                                "name": "(string)"
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "(number)",
                        "maxMemoryInMb": "(integer)",
                        "maxDiskSizeInMb": "(integer)"
                    },
                    "autoHealEnabled": "(boolean)",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            },
                            "privateBytesInKB": "(integer)",
                            "statusCodes": [
                                {
                                    "status": "(integer)",
                                    "subStatus": "(integer)",
                                    "win32Status": "(integer)",
                                    "count": "(integer)",
                                    "timeInterval": "(string)"
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "(string)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        },
                        "actions": {
                            "actionType": "(string)",
                            "customAction": {
                                "exe": "(string)",
                                "parameters": "(string)"
                            },
                            "minProcessExecutionTime": "(string)"
                        }
                    },
                    "tracingOptions": "(string)",
                    "vnetName": "(string)",
                    "cors": {
                        "allowedOrigins": [
                            "(string)"
                        ]
                    },
                    "push": {
                        "isPushEnabled": "(boolean)",
                        "tagWhitelistJson": "(string)",
                        "tagsRequiringAuth": "(string)",
                        "dynamicTagsJson": "(string)"
                    },
                    "apiDefinition": {
                        "url": "(string)"
                    },
                    "autoSwapSlotName": "(string)",
                    "localMySqlEnabled": "(boolean)",
                    "ipSecurityRestrictions": [
                        {
                            "ipAddress": "(string)",
                            "subnetMask": "(string)"
                        }
                    ]
                },
                "trafficManagerHostNames": [
                    "(string)"
                ],
                "premiumAppDeployed": "(boolean)",
                "scmSiteAlsoStopped": "(boolean)",
                "targetSwapSlot": "(string)",
                "hostingEnvironmentProfile": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)"
                },
                "clientAffinityEnabled": "(boolean)",
                "clientCertEnabled": "(boolean)",
                "hostNamesDisabled": "(boolean)",
                "outboundIpAddresses": "(string)",
                "containerSize": "(integer)",
                "dailyMemoryTimeQuota": "(integer)",
                "suspendedTill": "(string)",
                "maxNumberOfWorkers": "(integer)",
                "cloningInfo": {
                    "correlationId": "(string)",
                    "overwrite": "(boolean)",
                    "cloneCustomHostNames": "(boolean)",
                    "cloneSourceControl": "(boolean)",
                    "sourceWebAppId": "(string)",
                    "hostingEnvironment": "(string)",
                    "appSettingsOverrides": {},
                    "configureLoadBalancing": "(boolean)",
                    "trafficManagerProfileId": "(string)",
                    "trafficManagerProfileName": "(string)",
                    "ignoreQuotas": "(boolean)"
                },
                "resourceGroup": "(string)",
                "isDefaultContainer": "(boolean)",
                "defaultHostName": "(string)",
                "slotSwapStatus": {
                    "timestampUtc": "(string)",
                    "sourceSlotName": "(string)",
                    "destinationSlotName": "(string)"
                }
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "state": "Current state of the app.",
                "hostNames": [
                    null
                ],
                "repositorySiteName": "Name of the repository site.",
                "usageState": "State indicating whether the app has exceeded its quota usage. Read-only.",
                "enabled": "<code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to false disables the app (takes the app offline).",
                "enabledHostNames": [
                    null
                ],
                "availabilityState": "Management information availability state for the app.",
                "hostNameSslStates": [
                    {
                        "name": "Hostname.",
                        "sslState": "SSL type.",
                        "virtualIP": "Virtual IP address assigned to the hostname if IP based SSL is enabled.",
                        "thumbprint": "SSL certificate thumbprint.",
                        "toUpdate": "Set to <code>true</code> to update existing hostname.",
                        "hostType": "Indicates whether the hostname is a standard or repository hostname."
                    }
                ],
                "serverFarmId": "Resource ID of the associated App Service plan, formatted as: \"/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\".",
                "reserved": "<code>true</code> if reserved; otherwise, <code>false</code>.",
                "lastModifiedTimeUtc": "Last time the app was modified, in UTC. Read-only.",
                "siteConfig": {
                    "numberOfWorkers": "Number of workers.",
                    "defaultDocuments": [
                        null
                    ],
                    "netFrameworkVersion": ".NET Framework version.",
                    "phpVersion": "Version of PHP.",
                    "pythonVersion": "Version of Python.",
                    "nodeVersion": "Version of Node.js.",
                    "linuxFxVersion": "Linux App Framework and version",
                    "requestTracingEnabled": "<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.",
                    "requestTracingExpirationTime": "Request tracing expiration time.",
                    "remoteDebuggingEnabled": "<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.",
                    "remoteDebuggingVersion": "Remote debugging version.",
                    "httpLoggingEnabled": "<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.",
                    "logsDirectorySizeLimit": "HTTP logs directory size limit.",
                    "detailedErrorLoggingEnabled": "<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.",
                    "publishingUsername": "Publishing user name.",
                    "appSettings": [
                        {
                            "name": "Pair name.",
                            "value": "Pair value."
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "Name of connection string.",
                            "connectionString": "Connection string value.",
                            "type": "Type of database."
                        }
                    ],
                    "machineKey": {
                        "validation": "MachineKey validation.",
                        "validationKey": "Validation key.",
                        "decryption": "Decryption.",
                        "decryptionKey": "Decryption key."
                    },
                    "handlerMappings": [
                        {
                            "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                            "scriptProcessor": "The absolute path to the FastCGI application.",
                            "arguments": "Command-line arguments to be passed to the script processor."
                        }
                    ],
                    "documentRoot": "Document root.",
                    "scmType": "SCM type.",
                    "use32BitWorkerProcess": "<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.",
                    "webSocketsEnabled": "<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.",
                    "alwaysOn": "<code>true</code> if Always On is enabled; otherwise, <code>false</code>.",
                    "javaVersion": "Java version.",
                    "javaContainer": "Java container.",
                    "javaContainerVersion": "Java container version.",
                    "appCommandLine": "App command line to launch.",
                    "managedPipelineMode": "Managed pipeline mode.",
                    "virtualApplications": [
                        {
                            "virtualPath": "Virtual path.",
                            "physicalPath": "Physical path.",
                            "preloadEnabled": "<code>true</code> if preloading is enabled; otherwise, <code>false</code>.",
                            "virtualDirectories": [
                                {
                                    "virtualPath": "Path to virtual application.",
                                    "physicalPath": "Physical path."
                                }
                            ]
                        }
                    ],
                    "loadBalancing": "Site load balancing.",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.",
                                "reroutePercentage": "Percentage of the traffic which will be redirected to <code>ActionHostName</code>.",
                                "changeStep": "In auto ramp up scenario this is the step to to add/remove from <code>ReroutePercentage</code> until it reaches \n <code>MinReroutePercentage</code> or <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specificed in <code>ChangeIntervalInMinutes</code>.\n Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.",
                                "changeIntervalInMinutes": "Specifies interval in mimuntes to reevaluate ReroutePercentage.",
                                "minReroutePercentage": "Specifies lower boundary above which ReroutePercentage will stay.",
                                "maxReroutePercentage": "Specifies upper boundary below which ReroutePercentage will stay.",
                                "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.\n https://www.siteextensions.net/packages/TiPCallback/",
                                "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "Maximum allowed CPU usage percentage.",
                        "maxMemoryInMb": "Maximum allowed memory usage in MB.",
                        "maxDiskSizeInMb": "Maximum allowed disk size usage in MB."
                    },
                    "autoHealEnabled": "<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "Count.",
                                "timeInterval": "Time interval."
                            },
                            "privateBytesInKB": "A rule based on private bytes.",
                            "statusCodes": [
                                {
                                    "status": "HTTP status code.",
                                    "subStatus": "SubStatus.",
                                    "win32Status": "Win32 error code.",
                                    "count": "Count.",
                                    "timeInterval": "Time interval."
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "Time taken.",
                                "count": "Count.",
                                "timeInterval": "Time interval."
                            }
                        },
                        "actions": {
                            "actionType": "Predefined action to be taken.",
                            "customAction": {
                                "exe": "Executable to be run.",
                                "parameters": "Parameters for the executable."
                            },
                            "minProcessExecutionTime": "Minimum time the process must execute\n before taking the action"
                        }
                    },
                    "tracingOptions": "Tracing options.",
                    "vnetName": "Virtual Network name.",
                    "cors": {
                        "allowedOrigins": [
                            null
                        ]
                    },
                    "push": {
                        "isPushEnabled": "Gets or sets a flag indicating whether the Push endpoint is enabled.",
                        "tagWhitelistJson": "Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.",
                        "tagsRequiringAuth": "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.\n Tags can consist of alphanumeric characters and the following:\n '_', '@', '#', '.', ':', '-'. \n Validation should be performed at the PushRequestHandler.",
                        "dynamicTagsJson": "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                    },
                    "apiDefinition": {
                        "url": "The URL of the API definition."
                    },
                    "autoSwapSlotName": "Auto-swap slot name.",
                    "localMySqlEnabled": "<code>true</code> to enable local MySQL; otherwise, <code>false</code>.",
                    "ipSecurityRestrictions": [
                        {
                            "ipAddress": "IP address the security restriction is valid for.",
                            "subnetMask": "Subnet mask for the range of IP addresses the restriction is valid for."
                        }
                    ]
                },
                "trafficManagerHostNames": [
                    null
                ],
                "premiumAppDeployed": "Indicates whether app is deployed as a premium app.",
                "scmSiteAlsoStopped": "<code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The default is <code>false</code>.",
                "targetSwapSlot": "Specifies which deployment slot this app will swap into. Read-only.",
                "hostingEnvironmentProfile": {
                    "id": "Resource ID of the App Service Environment.",
                    "name": "Name of the App Service Environment.",
                    "type": "Resource type of the App Service Environment."
                },
                "clientAffinityEnabled": "<code>true</code> to enable client affinity; <code>false</code> to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is <code>true</code>.",
                "clientCertEnabled": "<code>true</code> to enable client certificate authentication (TLS mutual authentication); otherwise, <code>false</code>. Default is <code>false</code>.",
                "hostNamesDisabled": "<code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.\n If <code>true</code>, the app is only accessible via API management process.",
                "outboundIpAddresses": "List of IP addresses that the app uses for outbound connections (e.g. database access). Read-only.",
                "containerSize": "Size of the function container.",
                "dailyMemoryTimeQuota": "Maximum allowed daily memory-time quota (applicable on dynamic apps only).",
                "suspendedTill": "App suspended till in case memory-time quota is exceeded.",
                "maxNumberOfWorkers": "Maximum number of workers.\n This only applies to Functions container.",
                "cloningInfo": {
                    "correlationId": "Correlation ID of cloning operation. This ID ties multiple cloning operations\n together to use the same snapshot.",
                    "overwrite": "<code>true</code> to overwrite destination app; otherwise, <code>false</code>.",
                    "cloneCustomHostNames": "<code>true</code> to clone custom hostnames from source app; otherwise, <code>false</code>.",
                    "cloneSourceControl": "<code>true</code> to clone source control from source app; otherwise, <code>false</code>.",
                    "sourceWebAppId": "ARM resource ID of the source app. App resource ID is of the form \n /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and \n /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.",
                    "hostingEnvironment": "App Service Environment.",
                    "appSettingsOverrides": {},
                    "configureLoadBalancing": "<code>true</code> to configure load balancing for source and destination app.",
                    "trafficManagerProfileId": "ARM resource ID of the Traffic Manager profile to use, if it exists. Traffic Manager resource ID is of the form \n /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.",
                    "trafficManagerProfileName": "Name of Traffic Manager profile to create. This is only needed if Traffic Manager profile does not already exist.",
                    "ignoreQuotas": "<code>true</code> if quotas should be ignored; otherwise, <code>false</code>."
                },
                "resourceGroup": "Name of the resource group the app belongs to. Read-only.",
                "isDefaultContainer": "<code>true</code> if the app is a default container; otherwise, <code>false</code>.",
                "defaultHostName": "Default hostname of the app. Read-only.",
                "slotSwapStatus": {
                    "timestampUtc": "The time the last successful slot swap completed.",
                    "sourceSlotName": "The source slot of the last swap operation.",
                    "destinationSlotName": "The destination slot of the last swap operation."
                }
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/analyzeCustomHostname",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Destination deployment slot during swap operation.",
            "preserveVnet": "<code>true</code> to preserve Virtual Network to the slot during swap; otherwise, <code>false</code>."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "enabled": "(boolean)",
                "runtimeVersion": "(string)",
                "unauthenticatedClientAction": "(string)",
                "tokenStoreEnabled": "(boolean)",
                "allowedExternalRedirectUrls": [
                    "(string)"
                ],
                "defaultProvider": "(string)",
                "tokenRefreshExtensionHours": "(number)",
                "clientId": "(string)",
                "clientSecret": "(string)",
                "issuer": "(string)",
                "allowedAudiences": [
                    "(string)"
                ],
                "additionalLoginParams": [
                    "(string)"
                ],
                "googleClientId": "(string)",
                "googleClientSecret": "(string)",
                "googleOAuthScopes": [
                    "(string)"
                ],
                "facebookAppId": "(string)",
                "facebookAppSecret": "(string)",
                "facebookOAuthScopes": [
                    "(string)"
                ],
                "twitterConsumerKey": "(string)",
                "twitterConsumerSecret": "(string)",
                "microsoftAccountClientId": "(string)",
                "microsoftAccountClientSecret": "(string)",
                "microsoftAccountOAuthScopes": [
                    "(string)"
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "enabled": "<code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.",
                "runtimeVersion": "The RuntimeVersion of the Authentication / Authorization feature in use for the current app.\n The setting in this value can control the behavior of certain features in the Authentication / Authorization module.",
                "unauthenticatedClientAction": "The action to take when an unauthenticated client attempts to access the app.",
                "tokenStoreEnabled": "<code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.\n The default is <code>false</code>.",
                "allowedExternalRedirectUrls": [
                    null
                ],
                "defaultProvider": "The default authentication provider to use when multiple providers are configured.\n This setting is only needed if multiple providers are configured and the unauthenticated client\n action is set to \"RedirectToLoginPage\".",
                "tokenRefreshExtensionHours": "The number of hours after session token expiration that a session token can be used to\n call the token refresh API. The default is 72 hours.",
                "clientId": "The Client ID of this relying party application, known as the client_id.\n This setting is required for enabling OpenID Connection authentication with Azure Active Directory or \n other 3rd party OpenID Connect providers.\n More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html",
                "clientSecret": "The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).\n This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.\n Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.\n More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html",
                "issuer": "The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\n When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\n This URI is a case-sensitive identifier for the token issuer.\n More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html",
                "allowedAudiences": [
                    null
                ],
                "additionalLoginParams": [
                    null
                ],
                "googleClientId": "The OpenID Connect Client ID for the Google web application.\n This setting is required for enabling Google Sign-In.\n Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/",
                "googleClientSecret": "The client secret associated with the Google web application.\n This setting is required for enabling Google Sign-In.\n Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/",
                "googleOAuthScopes": [
                    null
                ],
                "facebookAppId": "The App ID of the Facebook app used for login.\n This setting is required for enabling Facebook Login.\n Facebook Login documentation: https://developers.facebook.com/docs/facebook-login",
                "facebookAppSecret": "The App Secret of the Facebook app used for Facebook Login.\n This setting is required for enabling Facebook Login.\n Facebook Login documentation: https://developers.facebook.com/docs/facebook-login",
                "facebookOAuthScopes": [
                    null
                ],
                "twitterConsumerKey": "The OAuth 1.0a consumer key of the Twitter application used for sign-in.\n This setting is required for enabling Twitter Sign-In.\n Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in",
                "twitterConsumerSecret": "The OAuth 1.0a consumer secret of the Twitter application used for sign-in.\n This setting is required for enabling Twitter Sign-In.\n Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in",
                "microsoftAccountClientId": "The OAuth 2.0 client ID that was created for the app used for authentication.\n This setting is required for enabling Microsoft Account authentication.\n Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm",
                "microsoftAccountClientSecret": "The OAuth 2.0 client secret that was created for the app used for authentication.\n This setting is required for enabling Microsoft Account authentication.\n Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm",
                "microsoftAccountOAuthScopes": [
                    null
                ]
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "applicationLogs": {
                    "fileSystem": {
                        "level": "(string)"
                    },
                    "azureTableStorage": {
                        "level": "(string)",
                        "sasUrl": "(string)"
                    },
                    "azureBlobStorage": {
                        "level": "(string)",
                        "sasUrl": "(string)",
                        "retentionInDays": "(integer)"
                    }
                },
                "httpLogs": {
                    "fileSystem": {
                        "retentionInMb": "(integer)",
                        "retentionInDays": "(integer)",
                        "enabled": "(boolean)"
                    },
                    "azureBlobStorage": {
                        "sasUrl": "(string)",
                        "retentionInDays": "(integer)",
                        "enabled": "(boolean)"
                    }
                },
                "failedRequestsTracing": {
                    "enabled": "(boolean)"
                },
                "detailedErrorMessages": {
                    "enabled": "(boolean)"
                }
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "applicationLogs": {
                    "fileSystem": {
                        "level": "Log level."
                    },
                    "azureTableStorage": {
                        "level": "Log level.",
                        "sasUrl": "SAS URL to an Azure table with add/query/delete permissions."
                    },
                    "azureBlobStorage": {
                        "level": "Log level.",
                        "sasUrl": "SAS url to a azure blob container with read/write/list/delete permissions.",
                        "retentionInDays": "Retention in days.\n Remove blobs older than X days.\n 0 or lower means no retention."
                    }
                },
                "httpLogs": {
                    "fileSystem": {
                        "retentionInMb": "Maximum size in megabytes that http log files can use.\n When reached old log files will be removed to make space for new ones.\n Value can range between 25 and 100.",
                        "retentionInDays": "Retention in days.\n Remove files older than X days.\n 0 or lower means no retention.",
                        "enabled": "Enabled."
                    },
                    "azureBlobStorage": {
                        "sasUrl": "SAS url to a azure blob container with read/write/list/delete permissions.",
                        "retentionInDays": "Retention in days.\n Remove blobs older than X days.\n 0 or lower means no retention.",
                        "enabled": "Enabled."
                    }
                },
                "failedRequestsTracing": {
                    "enabled": "Enabled."
                },
                "detailedErrorMessages": {
                    "enabled": "Enabled."
                }
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings",
        "RequestBody": {
            "isPushEnabled": "(boolean)",
            "tagWhitelistJson": "(string)",
            "tagsRequiringAuth": "(string)",
            "dynamicTagsJson": "(string)"
        },
        "RequestBodyDoc": {
            "isPushEnabled": "Gets or sets a flag indicating whether the Push endpoint is enabled.",
            "tagWhitelistJson": "Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.",
            "tagsRequiringAuth": "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.\n Tags can consist of alphanumeric characters and the following:\n '_', '@', '#', '.', ':', '-'. \n Validation should be performed at the PushRequestHandler.",
            "dynamicTagsJson": "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/pushsettings/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "connectionStringNames": [
                    "(string)"
                ],
                "appSettingNames": [
                    "(string)"
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "connectionStringNames": [
                    null
                ],
                "appSettingNames": [
                    null
                ]
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "nodeVersion": "(string)",
                "linuxFxVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "machineKey": {
                    "validation": "(string)",
                    "validationKey": "(string)",
                    "decryption": "(string)",
                    "decryptionKey": "(string)"
                },
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "appCommandLine": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        },
                        "minProcessExecutionTime": "(string)"
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "cors": {
                    "allowedOrigins": [
                        "(string)"
                    ]
                },
                "push": {
                    "isPushEnabled": "(boolean)",
                    "tagWhitelistJson": "(string)",
                    "tagsRequiringAuth": "(string)",
                    "dynamicTagsJson": "(string)"
                },
                "apiDefinition": {
                    "url": "(string)"
                },
                "autoSwapSlotName": "(string)",
                "localMySqlEnabled": "(boolean)",
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "(string)",
                        "subnetMask": "(string)"
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "numberOfWorkers": "Number of workers.",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": ".NET Framework version.",
                "phpVersion": "Version of PHP.",
                "pythonVersion": "Version of Python.",
                "nodeVersion": "Version of Node.js.",
                "linuxFxVersion": "Linux App Framework and version",
                "requestTracingEnabled": "<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.",
                "requestTracingExpirationTime": "Request tracing expiration time.",
                "remoteDebuggingEnabled": "<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.",
                "remoteDebuggingVersion": "Remote debugging version.",
                "httpLoggingEnabled": "<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.",
                "logsDirectorySizeLimit": "HTTP logs directory size limit.",
                "detailedErrorLoggingEnabled": "<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.",
                "publishingUsername": "Publishing user name.",
                "appSettings": [
                    {
                        "name": "Pair name.",
                        "value": "Pair value."
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string.",
                        "connectionString": "Connection string value.",
                        "type": "Type of database."
                    }
                ],
                "machineKey": {
                    "validation": "MachineKey validation.",
                    "validationKey": "Validation key.",
                    "decryption": "Decryption.",
                    "decryptionKey": "Decryption key."
                },
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root.",
                "scmType": "SCM type.",
                "use32BitWorkerProcess": "<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.",
                "webSocketsEnabled": "<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.",
                "alwaysOn": "<code>true</code> if Always On is enabled; otherwise, <code>false</code>.",
                "javaVersion": "Java version.",
                "javaContainer": "Java container.",
                "javaContainerVersion": "Java container version.",
                "appCommandLine": "App command line to launch.",
                "managedPipelineMode": "Managed pipeline mode.",
                "virtualApplications": [
                    {
                        "virtualPath": "Virtual path.",
                        "physicalPath": "Physical path.",
                        "preloadEnabled": "<code>true</code> if preloading is enabled; otherwise, <code>false</code>.",
                        "virtualDirectories": [
                            {
                                "virtualPath": "Path to virtual application.",
                                "physicalPath": "Physical path."
                            }
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing.",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to <code>ActionHostName</code>.",
                            "changeStep": "In auto ramp up scenario this is the step to to add/remove from <code>ReroutePercentage</code> until it reaches \n <code>MinReroutePercentage</code> or <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specificed in <code>ChangeIntervalInMinutes</code>.\n Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.",
                            "changeIntervalInMinutes": "Specifies interval in mimuntes to reevaluate ReroutePercentage.",
                            "minReroutePercentage": "Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.\n https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage.",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB.",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB."
                },
                "autoHealEnabled": "<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count.",
                            "timeInterval": "Time interval."
                        },
                        "privateBytesInKB": "A rule based on private bytes.",
                        "statusCodes": [
                            {
                                "status": "HTTP status code.",
                                "subStatus": "SubStatus.",
                                "win32Status": "Win32 error code.",
                                "count": "Count.",
                                "timeInterval": "Time interval."
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "Time taken.",
                            "count": "Count.",
                            "timeInterval": "Time interval."
                        }
                    },
                    "actions": {
                        "actionType": "Predefined action to be taken.",
                        "customAction": {
                            "exe": "Executable to be run.",
                            "parameters": "Parameters for the executable."
                        },
                        "minProcessExecutionTime": "Minimum time the process must execute\n before taking the action"
                    }
                },
                "tracingOptions": "Tracing options.",
                "vnetName": "Virtual Network name.",
                "cors": {
                    "allowedOrigins": [
                        null
                    ]
                },
                "push": {
                    "isPushEnabled": "Gets or sets a flag indicating whether the Push endpoint is enabled.",
                    "tagWhitelistJson": "Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.",
                    "tagsRequiringAuth": "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.\n Tags can consist of alphanumeric characters and the following:\n '_', '@', '#', '.', ':', '-'. \n Validation should be performed at the PushRequestHandler.",
                    "dynamicTagsJson": "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                },
                "apiDefinition": {
                    "url": "The URL of the API definition."
                },
                "autoSwapSlotName": "Auto-swap slot name.",
                "localMySqlEnabled": "<code>true</code> to enable local MySQL; otherwise, <code>false</code>.",
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "IP address the security restriction is valid for.",
                        "subnetMask": "Subnet mask for the range of IP addresses the restriction is valid for."
                    }
                ]
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "nodeVersion": "(string)",
                "linuxFxVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "machineKey": {
                    "validation": "(string)",
                    "validationKey": "(string)",
                    "decryption": "(string)",
                    "decryptionKey": "(string)"
                },
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "appCommandLine": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        },
                        "minProcessExecutionTime": "(string)"
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "cors": {
                    "allowedOrigins": [
                        "(string)"
                    ]
                },
                "push": {
                    "isPushEnabled": "(boolean)",
                    "tagWhitelistJson": "(string)",
                    "tagsRequiringAuth": "(string)",
                    "dynamicTagsJson": "(string)"
                },
                "apiDefinition": {
                    "url": "(string)"
                },
                "autoSwapSlotName": "(string)",
                "localMySqlEnabled": "(boolean)",
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "(string)",
                        "subnetMask": "(string)"
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "numberOfWorkers": "Number of workers.",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": ".NET Framework version.",
                "phpVersion": "Version of PHP.",
                "pythonVersion": "Version of Python.",
                "nodeVersion": "Version of Node.js.",
                "linuxFxVersion": "Linux App Framework and version",
                "requestTracingEnabled": "<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.",
                "requestTracingExpirationTime": "Request tracing expiration time.",
                "remoteDebuggingEnabled": "<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.",
                "remoteDebuggingVersion": "Remote debugging version.",
                "httpLoggingEnabled": "<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.",
                "logsDirectorySizeLimit": "HTTP logs directory size limit.",
                "detailedErrorLoggingEnabled": "<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.",
                "publishingUsername": "Publishing user name.",
                "appSettings": [
                    {
                        "name": "Pair name.",
                        "value": "Pair value."
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string.",
                        "connectionString": "Connection string value.",
                        "type": "Type of database."
                    }
                ],
                "machineKey": {
                    "validation": "MachineKey validation.",
                    "validationKey": "Validation key.",
                    "decryption": "Decryption.",
                    "decryptionKey": "Decryption key."
                },
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root.",
                "scmType": "SCM type.",
                "use32BitWorkerProcess": "<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.",
                "webSocketsEnabled": "<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.",
                "alwaysOn": "<code>true</code> if Always On is enabled; otherwise, <code>false</code>.",
                "javaVersion": "Java version.",
                "javaContainer": "Java container.",
                "javaContainerVersion": "Java container version.",
                "appCommandLine": "App command line to launch.",
                "managedPipelineMode": "Managed pipeline mode.",
                "virtualApplications": [
                    {
                        "virtualPath": "Virtual path.",
                        "physicalPath": "Physical path.",
                        "preloadEnabled": "<code>true</code> if preloading is enabled; otherwise, <code>false</code>.",
                        "virtualDirectories": [
                            {
                                "virtualPath": "Path to virtual application.",
                                "physicalPath": "Physical path."
                            }
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing.",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to <code>ActionHostName</code>.",
                            "changeStep": "In auto ramp up scenario this is the step to to add/remove from <code>ReroutePercentage</code> until it reaches \n <code>MinReroutePercentage</code> or <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specificed in <code>ChangeIntervalInMinutes</code>.\n Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.",
                            "changeIntervalInMinutes": "Specifies interval in mimuntes to reevaluate ReroutePercentage.",
                            "minReroutePercentage": "Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.\n https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage.",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB.",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB."
                },
                "autoHealEnabled": "<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count.",
                            "timeInterval": "Time interval."
                        },
                        "privateBytesInKB": "A rule based on private bytes.",
                        "statusCodes": [
                            {
                                "status": "HTTP status code.",
                                "subStatus": "SubStatus.",
                                "win32Status": "Win32 error code.",
                                "count": "Count.",
                                "timeInterval": "Time interval."
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "Time taken.",
                            "count": "Count.",
                            "timeInterval": "Time interval."
                        }
                    },
                    "actions": {
                        "actionType": "Predefined action to be taken.",
                        "customAction": {
                            "exe": "Executable to be run.",
                            "parameters": "Parameters for the executable."
                        },
                        "minProcessExecutionTime": "Minimum time the process must execute\n before taking the action"
                    }
                },
                "tracingOptions": "Tracing options.",
                "vnetName": "Virtual Network name.",
                "cors": {
                    "allowedOrigins": [
                        null
                    ]
                },
                "push": {
                    "isPushEnabled": "Gets or sets a flag indicating whether the Push endpoint is enabled.",
                    "tagWhitelistJson": "Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.",
                    "tagsRequiringAuth": "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.\n Tags can consist of alphanumeric characters and the following:\n '_', '@', '#', '.', ':', '-'. \n Validation should be performed at the PushRequestHandler.",
                    "dynamicTagsJson": "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                },
                "apiDefinition": {
                    "url": "The URL of the API definition."
                },
                "autoSwapSlotName": "Auto-swap slot name.",
                "localMySqlEnabled": "<code>true</code> to enable local MySQL; otherwise, <code>false</code>.",
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "IP address the security restriction is valid for.",
                        "subnetMask": "Subnet mask for the range of IP addresses the restriction is valid for."
                    }
                ]
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)",
                "status": "(integer)",
                "message": "(string)",
                "author": "(string)",
                "deployer": "(string)",
                "authorEmail": "(string)",
                "startTime": "(string)",
                "endTime": "(string)",
                "active": "(boolean)",
                "details": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "id": "ID.",
                "status": "Status.",
                "message": "Message.",
                "author": "Author.",
                "deployer": "Deployer.",
                "authorEmail": "Author email.",
                "startTime": "Start time.",
                "endTime": "End time.",
                "active": "Active.",
                "details": "Detail."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "id": "ID."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "id": "ID."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "siteName": "(string)",
                "domainId": "(string)",
                "azureResourceName": "(string)",
                "azureResourceType": "(string)",
                "customHostNameDnsRecordType": "(string)",
                "hostNameType": "(string)",
                "sslState": "(string)",
                "thumbprint": "(string)",
                "virtualIP": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "name": "Hostname.",
                "siteName": "App Service app name.",
                "domainId": "Fully qualified ARM domain resource URI.",
                "azureResourceName": "Azure resource name.",
                "azureResourceType": "Azure resource type.",
                "customHostNameDnsRecordType": "Custom DNS record type.",
                "hostNameType": "Hostname type.",
                "sslState": "SSL type",
                "thumbprint": "SSL certificate thumbprint",
                "virtualIP": "Virtual IP address assigned to the hostname if IP based SSL is enabled."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "serviceBusNamespace": "(string)",
                "relayName": "(string)",
                "relayArmUri": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "sendKeyName": "(string)",
                "sendKeyValue": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "serviceBusNamespace": "The name of the Service Bus namespace.",
                "relayName": "The name of the Service Bus relay.",
                "relayArmUri": "The ARM URI to the Service Bus relay.",
                "hostname": "The hostname of the endpoint.",
                "port": "The port of the endpoint.",
                "sendKeyName": "The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.",
                "sendKeyValue": "The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned\n normally, use the POST /listKeys API instead."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "serviceBusNamespace": "(string)",
                "relayName": "(string)",
                "relayArmUri": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "sendKeyName": "(string)",
                "sendKeyValue": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "serviceBusNamespace": "The name of the Service Bus namespace.",
                "relayName": "The name of the Service Bus relay.",
                "relayArmUri": "The ARM URI to the Service Bus relay.",
                "hostname": "The hostname of the endpoint.",
                "port": "The port of the endpoint.",
                "sendKeyName": "The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.",
                "sendKeyValue": "The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned\n normally, use the POST /listKeys API instead."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridConnectionRelays",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)",
                "status": "(integer)",
                "message": "(string)",
                "author": "(string)",
                "deployer": "(string)",
                "authorEmail": "(string)",
                "startTime": "(string)",
                "endTime": "(string)",
                "active": "(boolean)",
                "details": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "id": "ID.",
                "status": "Status.",
                "message": "Message.",
                "author": "Author.",
                "deployer": "Deployer.",
                "authorEmail": "Author email.",
                "startTime": "Start time.",
                "endTime": "End time.",
                "active": "Active.",
                "details": "Detail."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migrate",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "azurefilesConnectionString": "(string)",
                "azurefilesShare": "(string)",
                "switchSiteAfterMigration": "(boolean)",
                "blockWriteAccessToSite": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "azurefilesConnectionString": "AzureFiles connection string.",
                "azurefilesShare": "AzureFiles share.",
                "switchSiteAfterMigration": "<code>true</code>if the app should be switched over; otherwise, <code>false</code>.",
                "blockWriteAccessToSite": "<code>true</code> if the app should be read only during copy operation; otherwise, <code>false</code>."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "connectionString": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "connectionString": "Connection string to the remote MySQL database to which data should be migrated."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/migratemysql/status",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/start",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkTrace/stop",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/perfcounters",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/phplogging",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "sku": "(string)",
                "product": "(string)",
                "vendor": "(string)",
                "name": "(string)",
                "location": "(string)",
                "tags": {},
                "marketplacePublisher": "(string)",
                "marketplaceOffer": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "sku": "SKU.",
                "product": "Product.",
                "vendor": "Vendor.",
                "name": "Name.",
                "location": "Location.",
                "tags": {},
                "marketplacePublisher": "Marketplace publisher.",
                "marketplaceOffer": "Marketplace offer."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "blob": "(string)",
                "location": "(string)",
                "thumbprint": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "blob": "Public Certificate byte array",
                "location": "Public Certificate Location",
                "thumbprint": "Certificate Thumbprint"
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publicCertificates/{publicCertificateName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml",
        "RequestBody": {
            "format": "(string)"
        },
        "RequestBodyDoc": {
            "format": "Name of the format. Valid values are: \n FileZilla3\n WebDeploy -- default\n Ftp"
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover",
        "RequestBody": {
            "snapshotTime": "(string)",
            "siteName": "(string)",
            "slotName": "(string)"
        },
        "RequestBodyDoc": {
            "snapshotTime": "Point in time in which the app recovery should be attempted.",
            "siteName": "[Optional] Destination app name into which app should be recovered. This is case when new app should be created instead.",
            "slotName": "[Optional] Destination app slot name into which app should be recovered."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resourceHealthMetadata",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "state": "(string)",
                "hostNames": [
                    "(string)"
                ],
                "repositorySiteName": "(string)",
                "usageState": "(string)",
                "enabled": "(boolean)",
                "enabledHostNames": [
                    "(string)"
                ],
                "availabilityState": "(string)",
                "hostNameSslStates": [
                    {
                        "name": "(string)",
                        "sslState": "(string)",
                        "virtualIP": "(string)",
                        "thumbprint": "(string)",
                        "toUpdate": "(boolean)",
                        "hostType": "(string)"
                    }
                ],
                "serverFarmId": "(string)",
                "reserved": "(boolean)",
                "lastModifiedTimeUtc": "(string)",
                "siteConfig": {
                    "numberOfWorkers": "(integer)",
                    "defaultDocuments": [
                        "(string)"
                    ],
                    "netFrameworkVersion": "(string)",
                    "phpVersion": "(string)",
                    "pythonVersion": "(string)",
                    "nodeVersion": "(string)",
                    "linuxFxVersion": "(string)",
                    "requestTracingEnabled": "(boolean)",
                    "requestTracingExpirationTime": "(string)",
                    "remoteDebuggingEnabled": "(boolean)",
                    "remoteDebuggingVersion": "(string)",
                    "httpLoggingEnabled": "(boolean)",
                    "logsDirectorySizeLimit": "(integer)",
                    "detailedErrorLoggingEnabled": "(boolean)",
                    "publishingUsername": "(string)",
                    "appSettings": [
                        {
                            "name": "(string)",
                            "value": "(string)"
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "(string)",
                            "connectionString": "(string)",
                            "type": "(string)"
                        }
                    ],
                    "machineKey": {
                        "validation": "(string)",
                        "validationKey": "(string)",
                        "decryption": "(string)",
                        "decryptionKey": "(string)"
                    },
                    "handlerMappings": [
                        {
                            "extension": "(string)",
                            "scriptProcessor": "(string)",
                            "arguments": "(string)"
                        }
                    ],
                    "documentRoot": "(string)",
                    "scmType": "(string)",
                    "use32BitWorkerProcess": "(boolean)",
                    "webSocketsEnabled": "(boolean)",
                    "alwaysOn": "(boolean)",
                    "javaVersion": "(string)",
                    "javaContainer": "(string)",
                    "javaContainerVersion": "(string)",
                    "appCommandLine": "(string)",
                    "managedPipelineMode": "(string)",
                    "virtualApplications": [
                        {
                            "virtualPath": "(string)",
                            "physicalPath": "(string)",
                            "preloadEnabled": "(boolean)",
                            "virtualDirectories": [
                                {
                                    "virtualPath": "(string)",
                                    "physicalPath": "(string)"
                                }
                            ]
                        }
                    ],
                    "loadBalancing": "(string)",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "(string)",
                                "reroutePercentage": "(number)",
                                "changeStep": "(number)",
                                "changeIntervalInMinutes": "(integer)",
                                "minReroutePercentage": "(number)",
                                "maxReroutePercentage": "(number)",
                                "changeDecisionCallbackUrl": "(string)",
                                "name": "(string)"
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "(number)",
                        "maxMemoryInMb": "(integer)",
                        "maxDiskSizeInMb": "(integer)"
                    },
                    "autoHealEnabled": "(boolean)",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            },
                            "privateBytesInKB": "(integer)",
                            "statusCodes": [
                                {
                                    "status": "(integer)",
                                    "subStatus": "(integer)",
                                    "win32Status": "(integer)",
                                    "count": "(integer)",
                                    "timeInterval": "(string)"
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "(string)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        },
                        "actions": {
                            "actionType": "(string)",
                            "customAction": {
                                "exe": "(string)",
                                "parameters": "(string)"
                            },
                            "minProcessExecutionTime": "(string)"
                        }
                    },
                    "tracingOptions": "(string)",
                    "vnetName": "(string)",
                    "cors": {
                        "allowedOrigins": [
                            "(string)"
                        ]
                    },
                    "push": {
                        "isPushEnabled": "(boolean)",
                        "tagWhitelistJson": "(string)",
                        "tagsRequiringAuth": "(string)",
                        "dynamicTagsJson": "(string)"
                    },
                    "apiDefinition": {
                        "url": "(string)"
                    },
                    "autoSwapSlotName": "(string)",
                    "localMySqlEnabled": "(boolean)",
                    "ipSecurityRestrictions": [
                        {
                            "ipAddress": "(string)",
                            "subnetMask": "(string)"
                        }
                    ]
                },
                "trafficManagerHostNames": [
                    "(string)"
                ],
                "premiumAppDeployed": "(boolean)",
                "scmSiteAlsoStopped": "(boolean)",
                "targetSwapSlot": "(string)",
                "hostingEnvironmentProfile": {
                    "id": "(string)",
                    "name": "(string)",
                    "type": "(string)"
                },
                "clientAffinityEnabled": "(boolean)",
                "clientCertEnabled": "(boolean)",
                "hostNamesDisabled": "(boolean)",
                "outboundIpAddresses": "(string)",
                "containerSize": "(integer)",
                "dailyMemoryTimeQuota": "(integer)",
                "suspendedTill": "(string)",
                "maxNumberOfWorkers": "(integer)",
                "cloningInfo": {
                    "correlationId": "(string)",
                    "overwrite": "(boolean)",
                    "cloneCustomHostNames": "(boolean)",
                    "cloneSourceControl": "(boolean)",
                    "sourceWebAppId": "(string)",
                    "hostingEnvironment": "(string)",
                    "appSettingsOverrides": {},
                    "configureLoadBalancing": "(boolean)",
                    "trafficManagerProfileId": "(string)",
                    "trafficManagerProfileName": "(string)",
                    "ignoreQuotas": "(boolean)"
                },
                "resourceGroup": "(string)",
                "isDefaultContainer": "(boolean)",
                "defaultHostName": "(string)",
                "slotSwapStatus": {
                    "timestampUtc": "(string)",
                    "sourceSlotName": "(string)",
                    "destinationSlotName": "(string)"
                }
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "state": "Current state of the app.",
                "hostNames": [
                    null
                ],
                "repositorySiteName": "Name of the repository site.",
                "usageState": "State indicating whether the app has exceeded its quota usage. Read-only.",
                "enabled": "<code>true</code> if the app is enabled; otherwise, <code>false</code>. Setting this value to false disables the app (takes the app offline).",
                "enabledHostNames": [
                    null
                ],
                "availabilityState": "Management information availability state for the app.",
                "hostNameSslStates": [
                    {
                        "name": "Hostname.",
                        "sslState": "SSL type.",
                        "virtualIP": "Virtual IP address assigned to the hostname if IP based SSL is enabled.",
                        "thumbprint": "SSL certificate thumbprint.",
                        "toUpdate": "Set to <code>true</code> to update existing hostname.",
                        "hostType": "Indicates whether the hostname is a standard or repository hostname."
                    }
                ],
                "serverFarmId": "Resource ID of the associated App Service plan, formatted as: \"/subscriptions/{subscriptionID}/resourceGroups/{groupName}/providers/Microsoft.Web/serverfarms/{appServicePlanName}\".",
                "reserved": "<code>true</code> if reserved; otherwise, <code>false</code>.",
                "lastModifiedTimeUtc": "Last time the app was modified, in UTC. Read-only.",
                "siteConfig": {
                    "numberOfWorkers": "Number of workers.",
                    "defaultDocuments": [
                        null
                    ],
                    "netFrameworkVersion": ".NET Framework version.",
                    "phpVersion": "Version of PHP.",
                    "pythonVersion": "Version of Python.",
                    "nodeVersion": "Version of Node.js.",
                    "linuxFxVersion": "Linux App Framework and version",
                    "requestTracingEnabled": "<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.",
                    "requestTracingExpirationTime": "Request tracing expiration time.",
                    "remoteDebuggingEnabled": "<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.",
                    "remoteDebuggingVersion": "Remote debugging version.",
                    "httpLoggingEnabled": "<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.",
                    "logsDirectorySizeLimit": "HTTP logs directory size limit.",
                    "detailedErrorLoggingEnabled": "<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.",
                    "publishingUsername": "Publishing user name.",
                    "appSettings": [
                        {
                            "name": "Pair name.",
                            "value": "Pair value."
                        }
                    ],
                    "connectionStrings": [
                        {
                            "name": "Name of connection string.",
                            "connectionString": "Connection string value.",
                            "type": "Type of database."
                        }
                    ],
                    "machineKey": {
                        "validation": "MachineKey validation.",
                        "validationKey": "Validation key.",
                        "decryption": "Decryption.",
                        "decryptionKey": "Decryption key."
                    },
                    "handlerMappings": [
                        {
                            "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                            "scriptProcessor": "The absolute path to the FastCGI application.",
                            "arguments": "Command-line arguments to be passed to the script processor."
                        }
                    ],
                    "documentRoot": "Document root.",
                    "scmType": "SCM type.",
                    "use32BitWorkerProcess": "<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.",
                    "webSocketsEnabled": "<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.",
                    "alwaysOn": "<code>true</code> if Always On is enabled; otherwise, <code>false</code>.",
                    "javaVersion": "Java version.",
                    "javaContainer": "Java container.",
                    "javaContainerVersion": "Java container version.",
                    "appCommandLine": "App command line to launch.",
                    "managedPipelineMode": "Managed pipeline mode.",
                    "virtualApplications": [
                        {
                            "virtualPath": "Virtual path.",
                            "physicalPath": "Physical path.",
                            "preloadEnabled": "<code>true</code> if preloading is enabled; otherwise, <code>false</code>.",
                            "virtualDirectories": [
                                {
                                    "virtualPath": "Path to virtual application.",
                                    "physicalPath": "Physical path."
                                }
                            ]
                        }
                    ],
                    "loadBalancing": "Site load balancing.",
                    "experiments": {
                        "rampUpRules": [
                            {
                                "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.",
                                "reroutePercentage": "Percentage of the traffic which will be redirected to <code>ActionHostName</code>.",
                                "changeStep": "In auto ramp up scenario this is the step to to add/remove from <code>ReroutePercentage</code> until it reaches \n <code>MinReroutePercentage</code> or <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specificed in <code>ChangeIntervalInMinutes</code>.\n Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.",
                                "changeIntervalInMinutes": "Specifies interval in mimuntes to reevaluate ReroutePercentage.",
                                "minReroutePercentage": "Specifies lower boundary above which ReroutePercentage will stay.",
                                "maxReroutePercentage": "Specifies upper boundary below which ReroutePercentage will stay.",
                                "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.\n https://www.siteextensions.net/packages/TiPCallback/",
                                "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                            }
                        ]
                    },
                    "limits": {
                        "maxPercentageCpu": "Maximum allowed CPU usage percentage.",
                        "maxMemoryInMb": "Maximum allowed memory usage in MB.",
                        "maxDiskSizeInMb": "Maximum allowed disk size usage in MB."
                    },
                    "autoHealEnabled": "<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.",
                    "autoHealRules": {
                        "triggers": {
                            "requests": {
                                "count": "Count.",
                                "timeInterval": "Time interval."
                            },
                            "privateBytesInKB": "A rule based on private bytes.",
                            "statusCodes": [
                                {
                                    "status": "HTTP status code.",
                                    "subStatus": "SubStatus.",
                                    "win32Status": "Win32 error code.",
                                    "count": "Count.",
                                    "timeInterval": "Time interval."
                                }
                            ],
                            "slowRequests": {
                                "timeTaken": "Time taken.",
                                "count": "Count.",
                                "timeInterval": "Time interval."
                            }
                        },
                        "actions": {
                            "actionType": "Predefined action to be taken.",
                            "customAction": {
                                "exe": "Executable to be run.",
                                "parameters": "Parameters for the executable."
                            },
                            "minProcessExecutionTime": "Minimum time the process must execute\n before taking the action"
                        }
                    },
                    "tracingOptions": "Tracing options.",
                    "vnetName": "Virtual Network name.",
                    "cors": {
                        "allowedOrigins": [
                            null
                        ]
                    },
                    "push": {
                        "isPushEnabled": "Gets or sets a flag indicating whether the Push endpoint is enabled.",
                        "tagWhitelistJson": "Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.",
                        "tagsRequiringAuth": "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.\n Tags can consist of alphanumeric characters and the following:\n '_', '@', '#', '.', ':', '-'. \n Validation should be performed at the PushRequestHandler.",
                        "dynamicTagsJson": "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                    },
                    "apiDefinition": {
                        "url": "The URL of the API definition."
                    },
                    "autoSwapSlotName": "Auto-swap slot name.",
                    "localMySqlEnabled": "<code>true</code> to enable local MySQL; otherwise, <code>false</code>.",
                    "ipSecurityRestrictions": [
                        {
                            "ipAddress": "IP address the security restriction is valid for.",
                            "subnetMask": "Subnet mask for the range of IP addresses the restriction is valid for."
                        }
                    ]
                },
                "trafficManagerHostNames": [
                    null
                ],
                "premiumAppDeployed": "Indicates whether app is deployed as a premium app.",
                "scmSiteAlsoStopped": "<code>true</code> to stop SCM (KUDU) site when the app is stopped; otherwise, <code>false</code>. The default is <code>false</code>.",
                "targetSwapSlot": "Specifies which deployment slot this app will swap into. Read-only.",
                "hostingEnvironmentProfile": {
                    "id": "Resource ID of the App Service Environment.",
                    "name": "Name of the App Service Environment.",
                    "type": "Resource type of the App Service Environment."
                },
                "clientAffinityEnabled": "<code>true</code> to enable client affinity; <code>false</code> to stop sending session affinity cookies, which route client requests in the same session to the same instance. Default is <code>true</code>.",
                "clientCertEnabled": "<code>true</code> to enable client certificate authentication (TLS mutual authentication); otherwise, <code>false</code>. Default is <code>false</code>.",
                "hostNamesDisabled": "<code>true</code> to disable the public hostnames of the app; otherwise, <code>false</code>.\n If <code>true</code>, the app is only accessible via API management process.",
                "outboundIpAddresses": "List of IP addresses that the app uses for outbound connections (e.g. database access). Read-only.",
                "containerSize": "Size of the function container.",
                "dailyMemoryTimeQuota": "Maximum allowed daily memory-time quota (applicable on dynamic apps only).",
                "suspendedTill": "App suspended till in case memory-time quota is exceeded.",
                "maxNumberOfWorkers": "Maximum number of workers.\n This only applies to Functions container.",
                "cloningInfo": {
                    "correlationId": "Correlation ID of cloning operation. This ID ties multiple cloning operations\n together to use the same snapshot.",
                    "overwrite": "<code>true</code> to overwrite destination app; otherwise, <code>false</code>.",
                    "cloneCustomHostNames": "<code>true</code> to clone custom hostnames from source app; otherwise, <code>false</code>.",
                    "cloneSourceControl": "<code>true</code> to clone source control from source app; otherwise, <code>false</code>.",
                    "sourceWebAppId": "ARM resource ID of the source app. App resource ID is of the form \n /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and \n /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots.",
                    "hostingEnvironment": "App Service Environment.",
                    "appSettingsOverrides": {},
                    "configureLoadBalancing": "<code>true</code> to configure load balancing for source and destination app.",
                    "trafficManagerProfileId": "ARM resource ID of the Traffic Manager profile to use, if it exists. Traffic Manager resource ID is of the form \n /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}.",
                    "trafficManagerProfileName": "Name of Traffic Manager profile to create. This is only needed if Traffic Manager profile does not already exist.",
                    "ignoreQuotas": "<code>true</code> if quotas should be ignored; otherwise, <code>false</code>."
                },
                "resourceGroup": "Name of the resource group the app belongs to. Read-only.",
                "isDefaultContainer": "<code>true</code> if the app is a default container; otherwise, <code>false</code>.",
                "defaultHostName": "Default hostname of the app. Read-only.",
                "slotSwapStatus": {
                    "timestampUtc": "The time the last successful slot swap completed.",
                    "sourceSlotName": "The source slot of the last swap operation.",
                    "destinationSlotName": "The destination slot of the last swap operation."
                }
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/analyzeCustomHostname",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Destination deployment slot during swap operation.",
            "preserveVnet": "<code>true</code> to preserve Virtual Network to the slot during swap; otherwise, <code>false</code>."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "enabled": "(boolean)",
                "runtimeVersion": "(string)",
                "unauthenticatedClientAction": "(string)",
                "tokenStoreEnabled": "(boolean)",
                "allowedExternalRedirectUrls": [
                    "(string)"
                ],
                "defaultProvider": "(string)",
                "tokenRefreshExtensionHours": "(number)",
                "clientId": "(string)",
                "clientSecret": "(string)",
                "issuer": "(string)",
                "allowedAudiences": [
                    "(string)"
                ],
                "additionalLoginParams": [
                    "(string)"
                ],
                "googleClientId": "(string)",
                "googleClientSecret": "(string)",
                "googleOAuthScopes": [
                    "(string)"
                ],
                "facebookAppId": "(string)",
                "facebookAppSecret": "(string)",
                "facebookOAuthScopes": [
                    "(string)"
                ],
                "twitterConsumerKey": "(string)",
                "twitterConsumerSecret": "(string)",
                "microsoftAccountClientId": "(string)",
                "microsoftAccountClientSecret": "(string)",
                "microsoftAccountOAuthScopes": [
                    "(string)"
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "enabled": "<code>true</code> if the Authentication / Authorization feature is enabled for the current app; otherwise, <code>false</code>.",
                "runtimeVersion": "The RuntimeVersion of the Authentication / Authorization feature in use for the current app.\n The setting in this value can control the behavior of certain features in the Authentication / Authorization module.",
                "unauthenticatedClientAction": "The action to take when an unauthenticated client attempts to access the app.",
                "tokenStoreEnabled": "<code>true</code> to durably store platform-specific security tokens that are obtained during login flows; otherwise, <code>false</code>.\n The default is <code>false</code>.",
                "allowedExternalRedirectUrls": [
                    null
                ],
                "defaultProvider": "The default authentication provider to use when multiple providers are configured.\n This setting is only needed if multiple providers are configured and the unauthenticated client\n action is set to \"RedirectToLoginPage\".",
                "tokenRefreshExtensionHours": "The number of hours after session token expiration that a session token can be used to\n call the token refresh API. The default is 72 hours.",
                "clientId": "The Client ID of this relying party application, known as the client_id.\n This setting is required for enabling OpenID Connection authentication with Azure Active Directory or \n other 3rd party OpenID Connect providers.\n More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html",
                "clientSecret": "The Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).\n This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.\n Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.\n More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html",
                "issuer": "The OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.\n When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.\n This URI is a case-sensitive identifier for the token issuer.\n More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html",
                "allowedAudiences": [
                    null
                ],
                "additionalLoginParams": [
                    null
                ],
                "googleClientId": "The OpenID Connect Client ID for the Google web application.\n This setting is required for enabling Google Sign-In.\n Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/",
                "googleClientSecret": "The client secret associated with the Google web application.\n This setting is required for enabling Google Sign-In.\n Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/",
                "googleOAuthScopes": [
                    null
                ],
                "facebookAppId": "The App ID of the Facebook app used for login.\n This setting is required for enabling Facebook Login.\n Facebook Login documentation: https://developers.facebook.com/docs/facebook-login",
                "facebookAppSecret": "The App Secret of the Facebook app used for Facebook Login.\n This setting is required for enabling Facebook Login.\n Facebook Login documentation: https://developers.facebook.com/docs/facebook-login",
                "facebookOAuthScopes": [
                    null
                ],
                "twitterConsumerKey": "The OAuth 1.0a consumer key of the Twitter application used for sign-in.\n This setting is required for enabling Twitter Sign-In.\n Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in",
                "twitterConsumerSecret": "The OAuth 1.0a consumer secret of the Twitter application used for sign-in.\n This setting is required for enabling Twitter Sign-In.\n Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in",
                "microsoftAccountClientId": "The OAuth 2.0 client ID that was created for the app used for authentication.\n This setting is required for enabling Microsoft Account authentication.\n Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm",
                "microsoftAccountClientSecret": "The OAuth 2.0 client secret that was created for the app used for authentication.\n This setting is required for enabling Microsoft Account authentication.\n Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm",
                "microsoftAccountOAuthScopes": [
                    null
                ]
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "applicationLogs": {
                    "fileSystem": {
                        "level": "(string)"
                    },
                    "azureTableStorage": {
                        "level": "(string)",
                        "sasUrl": "(string)"
                    },
                    "azureBlobStorage": {
                        "level": "(string)",
                        "sasUrl": "(string)",
                        "retentionInDays": "(integer)"
                    }
                },
                "httpLogs": {
                    "fileSystem": {
                        "retentionInMb": "(integer)",
                        "retentionInDays": "(integer)",
                        "enabled": "(boolean)"
                    },
                    "azureBlobStorage": {
                        "sasUrl": "(string)",
                        "retentionInDays": "(integer)",
                        "enabled": "(boolean)"
                    }
                },
                "failedRequestsTracing": {
                    "enabled": "(boolean)"
                },
                "detailedErrorMessages": {
                    "enabled": "(boolean)"
                }
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "applicationLogs": {
                    "fileSystem": {
                        "level": "Log level."
                    },
                    "azureTableStorage": {
                        "level": "Log level.",
                        "sasUrl": "SAS URL to an Azure table with add/query/delete permissions."
                    },
                    "azureBlobStorage": {
                        "level": "Log level.",
                        "sasUrl": "SAS url to a azure blob container with read/write/list/delete permissions.",
                        "retentionInDays": "Retention in days.\n Remove blobs older than X days.\n 0 or lower means no retention."
                    }
                },
                "httpLogs": {
                    "fileSystem": {
                        "retentionInMb": "Maximum size in megabytes that http log files can use.\n When reached old log files will be removed to make space for new ones.\n Value can range between 25 and 100.",
                        "retentionInDays": "Retention in days.\n Remove files older than X days.\n 0 or lower means no retention.",
                        "enabled": "Enabled."
                    },
                    "azureBlobStorage": {
                        "sasUrl": "SAS url to a azure blob container with read/write/list/delete permissions.",
                        "retentionInDays": "Retention in days.\n Remove blobs older than X days.\n 0 or lower means no retention.",
                        "enabled": "Enabled."
                    }
                },
                "failedRequestsTracing": {
                    "enabled": "Enabled."
                },
                "detailedErrorMessages": {
                    "enabled": "Enabled."
                }
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {}
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings",
        "RequestBody": {
            "isPushEnabled": "(boolean)",
            "tagWhitelistJson": "(string)",
            "tagsRequiringAuth": "(string)",
            "dynamicTagsJson": "(string)"
        },
        "RequestBodyDoc": {
            "isPushEnabled": "Gets or sets a flag indicating whether the Push endpoint is enabled.",
            "tagWhitelistJson": "Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.",
            "tagsRequiringAuth": "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.\n Tags can consist of alphanumeric characters and the following:\n '_', '@', '#', '.', ':', '-'. \n Validation should be performed at the PushRequestHandler.",
            "dynamicTagsJson": "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/pushsettings/list",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "nodeVersion": "(string)",
                "linuxFxVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "machineKey": {
                    "validation": "(string)",
                    "validationKey": "(string)",
                    "decryption": "(string)",
                    "decryptionKey": "(string)"
                },
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "appCommandLine": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        },
                        "minProcessExecutionTime": "(string)"
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "cors": {
                    "allowedOrigins": [
                        "(string)"
                    ]
                },
                "push": {
                    "isPushEnabled": "(boolean)",
                    "tagWhitelistJson": "(string)",
                    "tagsRequiringAuth": "(string)",
                    "dynamicTagsJson": "(string)"
                },
                "apiDefinition": {
                    "url": "(string)"
                },
                "autoSwapSlotName": "(string)",
                "localMySqlEnabled": "(boolean)",
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "(string)",
                        "subnetMask": "(string)"
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "numberOfWorkers": "Number of workers.",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": ".NET Framework version.",
                "phpVersion": "Version of PHP.",
                "pythonVersion": "Version of Python.",
                "nodeVersion": "Version of Node.js.",
                "linuxFxVersion": "Linux App Framework and version",
                "requestTracingEnabled": "<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.",
                "requestTracingExpirationTime": "Request tracing expiration time.",
                "remoteDebuggingEnabled": "<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.",
                "remoteDebuggingVersion": "Remote debugging version.",
                "httpLoggingEnabled": "<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.",
                "logsDirectorySizeLimit": "HTTP logs directory size limit.",
                "detailedErrorLoggingEnabled": "<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.",
                "publishingUsername": "Publishing user name.",
                "appSettings": [
                    {
                        "name": "Pair name.",
                        "value": "Pair value."
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string.",
                        "connectionString": "Connection string value.",
                        "type": "Type of database."
                    }
                ],
                "machineKey": {
                    "validation": "MachineKey validation.",
                    "validationKey": "Validation key.",
                    "decryption": "Decryption.",
                    "decryptionKey": "Decryption key."
                },
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root.",
                "scmType": "SCM type.",
                "use32BitWorkerProcess": "<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.",
                "webSocketsEnabled": "<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.",
                "alwaysOn": "<code>true</code> if Always On is enabled; otherwise, <code>false</code>.",
                "javaVersion": "Java version.",
                "javaContainer": "Java container.",
                "javaContainerVersion": "Java container version.",
                "appCommandLine": "App command line to launch.",
                "managedPipelineMode": "Managed pipeline mode.",
                "virtualApplications": [
                    {
                        "virtualPath": "Virtual path.",
                        "physicalPath": "Physical path.",
                        "preloadEnabled": "<code>true</code> if preloading is enabled; otherwise, <code>false</code>.",
                        "virtualDirectories": [
                            {
                                "virtualPath": "Path to virtual application.",
                                "physicalPath": "Physical path."
                            }
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing.",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to <code>ActionHostName</code>.",
                            "changeStep": "In auto ramp up scenario this is the step to to add/remove from <code>ReroutePercentage</code> until it reaches \n <code>MinReroutePercentage</code> or <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specificed in <code>ChangeIntervalInMinutes</code>.\n Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.",
                            "changeIntervalInMinutes": "Specifies interval in mimuntes to reevaluate ReroutePercentage.",
                            "minReroutePercentage": "Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.\n https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage.",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB.",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB."
                },
                "autoHealEnabled": "<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count.",
                            "timeInterval": "Time interval."
                        },
                        "privateBytesInKB": "A rule based on private bytes.",
                        "statusCodes": [
                            {
                                "status": "HTTP status code.",
                                "subStatus": "SubStatus.",
                                "win32Status": "Win32 error code.",
                                "count": "Count.",
                                "timeInterval": "Time interval."
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "Time taken.",
                            "count": "Count.",
                            "timeInterval": "Time interval."
                        }
                    },
                    "actions": {
                        "actionType": "Predefined action to be taken.",
                        "customAction": {
                            "exe": "Executable to be run.",
                            "parameters": "Parameters for the executable."
                        },
                        "minProcessExecutionTime": "Minimum time the process must execute\n before taking the action"
                    }
                },
                "tracingOptions": "Tracing options.",
                "vnetName": "Virtual Network name.",
                "cors": {
                    "allowedOrigins": [
                        null
                    ]
                },
                "push": {
                    "isPushEnabled": "Gets or sets a flag indicating whether the Push endpoint is enabled.",
                    "tagWhitelistJson": "Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.",
                    "tagsRequiringAuth": "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.\n Tags can consist of alphanumeric characters and the following:\n '_', '@', '#', '.', ':', '-'. \n Validation should be performed at the PushRequestHandler.",
                    "dynamicTagsJson": "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                },
                "apiDefinition": {
                    "url": "The URL of the API definition."
                },
                "autoSwapSlotName": "Auto-swap slot name.",
                "localMySqlEnabled": "<code>true</code> to enable local MySQL; otherwise, <code>false</code>.",
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "IP address the security restriction is valid for.",
                        "subnetMask": "Subnet mask for the range of IP addresses the restriction is valid for."
                    }
                ]
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "numberOfWorkers": "(integer)",
                "defaultDocuments": [
                    "(string)"
                ],
                "netFrameworkVersion": "(string)",
                "phpVersion": "(string)",
                "pythonVersion": "(string)",
                "nodeVersion": "(string)",
                "linuxFxVersion": "(string)",
                "requestTracingEnabled": "(boolean)",
                "requestTracingExpirationTime": "(string)",
                "remoteDebuggingEnabled": "(boolean)",
                "remoteDebuggingVersion": "(string)",
                "httpLoggingEnabled": "(boolean)",
                "logsDirectorySizeLimit": "(integer)",
                "detailedErrorLoggingEnabled": "(boolean)",
                "publishingUsername": "(string)",
                "appSettings": [
                    {
                        "name": "(string)",
                        "value": "(string)"
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "(string)",
                        "connectionString": "(string)",
                        "type": "(string)"
                    }
                ],
                "machineKey": {
                    "validation": "(string)",
                    "validationKey": "(string)",
                    "decryption": "(string)",
                    "decryptionKey": "(string)"
                },
                "handlerMappings": [
                    {
                        "extension": "(string)",
                        "scriptProcessor": "(string)",
                        "arguments": "(string)"
                    }
                ],
                "documentRoot": "(string)",
                "scmType": "(string)",
                "use32BitWorkerProcess": "(boolean)",
                "webSocketsEnabled": "(boolean)",
                "alwaysOn": "(boolean)",
                "javaVersion": "(string)",
                "javaContainer": "(string)",
                "javaContainerVersion": "(string)",
                "appCommandLine": "(string)",
                "managedPipelineMode": "(string)",
                "virtualApplications": [
                    {
                        "virtualPath": "(string)",
                        "physicalPath": "(string)",
                        "preloadEnabled": "(boolean)",
                        "virtualDirectories": [
                            {
                                "virtualPath": "(string)",
                                "physicalPath": "(string)"
                            }
                        ]
                    }
                ],
                "loadBalancing": "(string)",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "(string)",
                            "reroutePercentage": "(number)",
                            "changeStep": "(number)",
                            "changeIntervalInMinutes": "(integer)",
                            "minReroutePercentage": "(number)",
                            "maxReroutePercentage": "(number)",
                            "changeDecisionCallbackUrl": "(string)",
                            "name": "(string)"
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "(number)",
                    "maxMemoryInMb": "(integer)",
                    "maxDiskSizeInMb": "(integer)"
                },
                "autoHealEnabled": "(boolean)",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        },
                        "privateBytesInKB": "(integer)",
                        "statusCodes": [
                            {
                                "status": "(integer)",
                                "subStatus": "(integer)",
                                "win32Status": "(integer)",
                                "count": "(integer)",
                                "timeInterval": "(string)"
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "(string)",
                            "count": "(integer)",
                            "timeInterval": "(string)"
                        }
                    },
                    "actions": {
                        "actionType": "(string)",
                        "customAction": {
                            "exe": "(string)",
                            "parameters": "(string)"
                        },
                        "minProcessExecutionTime": "(string)"
                    }
                },
                "tracingOptions": "(string)",
                "vnetName": "(string)",
                "cors": {
                    "allowedOrigins": [
                        "(string)"
                    ]
                },
                "push": {
                    "isPushEnabled": "(boolean)",
                    "tagWhitelistJson": "(string)",
                    "tagsRequiringAuth": "(string)",
                    "dynamicTagsJson": "(string)"
                },
                "apiDefinition": {
                    "url": "(string)"
                },
                "autoSwapSlotName": "(string)",
                "localMySqlEnabled": "(boolean)",
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "(string)",
                        "subnetMask": "(string)"
                    }
                ]
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "numberOfWorkers": "Number of workers.",
                "defaultDocuments": [
                    null
                ],
                "netFrameworkVersion": ".NET Framework version.",
                "phpVersion": "Version of PHP.",
                "pythonVersion": "Version of Python.",
                "nodeVersion": "Version of Node.js.",
                "linuxFxVersion": "Linux App Framework and version",
                "requestTracingEnabled": "<code>true</code> if request tracing is enabled; otherwise, <code>false</code>.",
                "requestTracingExpirationTime": "Request tracing expiration time.",
                "remoteDebuggingEnabled": "<code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.",
                "remoteDebuggingVersion": "Remote debugging version.",
                "httpLoggingEnabled": "<code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.",
                "logsDirectorySizeLimit": "HTTP logs directory size limit.",
                "detailedErrorLoggingEnabled": "<code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.",
                "publishingUsername": "Publishing user name.",
                "appSettings": [
                    {
                        "name": "Pair name.",
                        "value": "Pair value."
                    }
                ],
                "connectionStrings": [
                    {
                        "name": "Name of connection string.",
                        "connectionString": "Connection string value.",
                        "type": "Type of database."
                    }
                ],
                "machineKey": {
                    "validation": "MachineKey validation.",
                    "validationKey": "Validation key.",
                    "decryption": "Decryption.",
                    "decryptionKey": "Decryption key."
                },
                "handlerMappings": [
                    {
                        "extension": "Requests with this extension will be handled using the specified FastCGI application.",
                        "scriptProcessor": "The absolute path to the FastCGI application.",
                        "arguments": "Command-line arguments to be passed to the script processor."
                    }
                ],
                "documentRoot": "Document root.",
                "scmType": "SCM type.",
                "use32BitWorkerProcess": "<code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.",
                "webSocketsEnabled": "<code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.",
                "alwaysOn": "<code>true</code> if Always On is enabled; otherwise, <code>false</code>.",
                "javaVersion": "Java version.",
                "javaContainer": "Java container.",
                "javaContainerVersion": "Java container version.",
                "appCommandLine": "App command line to launch.",
                "managedPipelineMode": "Managed pipeline mode.",
                "virtualApplications": [
                    {
                        "virtualPath": "Virtual path.",
                        "physicalPath": "Physical path.",
                        "preloadEnabled": "<code>true</code> if preloading is enabled; otherwise, <code>false</code>.",
                        "virtualDirectories": [
                            {
                                "virtualPath": "Path to virtual application.",
                                "physicalPath": "Physical path."
                            }
                        ]
                    }
                ],
                "loadBalancing": "Site load balancing.",
                "experiments": {
                    "rampUpRules": [
                        {
                            "actionHostName": "Hostname of a slot to which the traffic will be redirected if decided to. E.g. myapp-stage.azurewebsites.net.",
                            "reroutePercentage": "Percentage of the traffic which will be redirected to <code>ActionHostName</code>.",
                            "changeStep": "In auto ramp up scenario this is the step to to add/remove from <code>ReroutePercentage</code> until it reaches \n <code>MinReroutePercentage</code> or <code>MaxReroutePercentage</code>. Site metrics are checked every N minutes specificed in <code>ChangeIntervalInMinutes</code>.\n Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified in <code>ChangeDecisionCallbackUrl</code>.",
                            "changeIntervalInMinutes": "Specifies interval in mimuntes to reevaluate ReroutePercentage.",
                            "minReroutePercentage": "Specifies lower boundary above which ReroutePercentage will stay.",
                            "maxReroutePercentage": "Specifies upper boundary below which ReroutePercentage will stay.",
                            "changeDecisionCallbackUrl": "Custom decision algorithm can be provided in TiPCallback site extension which URL can be specified. See TiPCallback site extension for the scaffold and contracts.\n https://www.siteextensions.net/packages/TiPCallback/",
                            "name": "Name of the routing rule. The recommended name would be to point to the slot which will receive the traffic in the experiment."
                        }
                    ]
                },
                "limits": {
                    "maxPercentageCpu": "Maximum allowed CPU usage percentage.",
                    "maxMemoryInMb": "Maximum allowed memory usage in MB.",
                    "maxDiskSizeInMb": "Maximum allowed disk size usage in MB."
                },
                "autoHealEnabled": "<code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.",
                "autoHealRules": {
                    "triggers": {
                        "requests": {
                            "count": "Count.",
                            "timeInterval": "Time interval."
                        },
                        "privateBytesInKB": "A rule based on private bytes.",
                        "statusCodes": [
                            {
                                "status": "HTTP status code.",
                                "subStatus": "SubStatus.",
                                "win32Status": "Win32 error code.",
                                "count": "Count.",
                                "timeInterval": "Time interval."
                            }
                        ],
                        "slowRequests": {
                            "timeTaken": "Time taken.",
                            "count": "Count.",
                            "timeInterval": "Time interval."
                        }
                    },
                    "actions": {
                        "actionType": "Predefined action to be taken.",
                        "customAction": {
                            "exe": "Executable to be run.",
                            "parameters": "Parameters for the executable."
                        },
                        "minProcessExecutionTime": "Minimum time the process must execute\n before taking the action"
                    }
                },
                "tracingOptions": "Tracing options.",
                "vnetName": "Virtual Network name.",
                "cors": {
                    "allowedOrigins": [
                        null
                    ]
                },
                "push": {
                    "isPushEnabled": "Gets or sets a flag indicating whether the Push endpoint is enabled.",
                    "tagWhitelistJson": "Gets or sets a JSON string containing a list of tags that are whitelisted for use by the push registration endpoint.",
                    "tagsRequiringAuth": "Gets or sets a JSON string containing a list of tags that require user authentication to be used in the push registration endpoint.\n Tags can consist of alphanumeric characters and the following:\n '_', '@', '#', '.', ':', '-'. \n Validation should be performed at the PushRequestHandler.",
                    "dynamicTagsJson": "Gets or sets a JSON string containing a list of dynamic tags that will be evaluated from user claims in the push registration endpoint."
                },
                "apiDefinition": {
                    "url": "The URL of the API definition."
                },
                "autoSwapSlotName": "Auto-swap slot name.",
                "localMySqlEnabled": "<code>true</code> to enable local MySQL; otherwise, <code>false</code>.",
                "ipSecurityRestrictions": [
                    {
                        "ipAddress": "IP address the security restriction is valid for.",
                        "subnetMask": "Subnet mask for the range of IP addresses the restriction is valid for."
                    }
                ]
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)",
                "status": "(integer)",
                "message": "(string)",
                "author": "(string)",
                "deployer": "(string)",
                "authorEmail": "(string)",
                "startTime": "(string)",
                "endTime": "(string)",
                "active": "(boolean)",
                "details": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "id": "ID.",
                "status": "Status.",
                "message": "Message.",
                "author": "Author.",
                "deployer": "Deployer.",
                "authorEmail": "Author email.",
                "startTime": "Start time.",
                "endTime": "End time.",
                "active": "Active.",
                "details": "Detail."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "id": "ID."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/domainOwnershipIdentifiers/{domainOwnershipIdentifierName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "id": "ID."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "name": "(string)",
                "siteName": "(string)",
                "domainId": "(string)",
                "azureResourceName": "(string)",
                "azureResourceType": "(string)",
                "customHostNameDnsRecordType": "(string)",
                "hostNameType": "(string)",
                "sslState": "(string)",
                "thumbprint": "(string)",
                "virtualIP": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "name": "Hostname.",
                "siteName": "App Service app name.",
                "domainId": "Fully qualified ARM domain resource URI.",
                "azureResourceName": "Azure resource name.",
                "azureResourceType": "Azure resource type.",
                "customHostNameDnsRecordType": "Custom DNS record type.",
                "hostNameType": "Hostname type.",
                "sslState": "SSL type",
                "thumbprint": "SSL certificate thumbprint",
                "virtualIP": "Virtual IP address assigned to the hostname if IP based SSL is enabled."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "serviceBusNamespace": "(string)",
                "relayName": "(string)",
                "relayArmUri": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "sendKeyName": "(string)",
                "sendKeyValue": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "serviceBusNamespace": "The name of the Service Bus namespace.",
                "relayName": "The name of the Service Bus relay.",
                "relayArmUri": "The ARM URI to the Service Bus relay.",
                "hostname": "The hostname of the endpoint.",
                "port": "The port of the endpoint.",
                "sendKeyName": "The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.",
                "sendKeyValue": "The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned\n normally, use the POST /listKeys API instead."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "serviceBusNamespace": "(string)",
                "relayName": "(string)",
                "relayArmUri": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "sendKeyName": "(string)",
                "sendKeyValue": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "serviceBusNamespace": "The name of the Service Bus namespace.",
                "relayName": "The name of the Service Bus relay.",
                "relayArmUri": "The ARM URI to the Service Bus relay.",
                "hostname": "The hostname of the endpoint.",
                "port": "The port of the endpoint.",
                "sendKeyName": "The name of the Service Bus key which has Send permissions. This is used to authenticate to Service Bus.",
                "sendKeyValue": "The value of the Service Bus key. This is used to authenticate to Service Bus. In ARM this key will not be returned\n normally, use the POST /listKeys API instead."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionNamespaces/{namespaceName}/relays/{relayName}/listKeys",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridConnectionRelays",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "entityName": "(string)",
                "entityConnectionString": "(string)",
                "resourceType": "(string)",
                "resourceConnectionString": "(string)",
                "hostname": "(string)",
                "port": "(integer)",
                "biztalkUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {}
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "id": "(string)",
                "status": "(integer)",
                "message": "(string)",
                "author": "(string)",
                "deployer": "(string)",
                "authorEmail": "(string)",
                "startTime": "(string)",
                "endTime": "(string)",
                "active": "(boolean)",
                "details": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "id": "ID.",
                "status": "Status.",
                "message": "Message.",
                "author": "Author.",
                "deployer": "Deployer.",
                "authorEmail": "Author email.",
                "startTime": "Start time.",
                "endTime": "End time.",
                "active": "Active.",
                "details": "Detail."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/migratemysql/status",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/start",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkTrace/stop",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/perfcounters",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/phplogging",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "sku": "(string)",
                "product": "(string)",
                "vendor": "(string)",
                "name": "(string)",
                "location": "(string)",
                "tags": {},
                "marketplacePublisher": "(string)",
                "marketplaceOffer": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "sku": "SKU.",
                "product": "Product.",
                "vendor": "Vendor.",
                "name": "Name.",
                "location": "Location.",
                "tags": {},
                "marketplacePublisher": "Marketplace publisher.",
                "marketplaceOffer": "Marketplace offer."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "blob": "(string)",
                "location": "(string)",
                "thumbprint": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "blob": "Public Certificate byte array",
                "location": "Public Certificate Location",
                "thumbprint": "Certificate Thumbprint"
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publicCertificates/{publicCertificateName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml",
        "RequestBody": {
            "format": "(string)"
        },
        "RequestBodyDoc": {
            "format": "Name of the format. Valid values are: \n FileZilla3\n WebDeploy -- default\n Ftp"
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover",
        "RequestBody": {
            "snapshotTime": "(string)",
            "siteName": "(string)",
            "slotName": "(string)"
        },
        "RequestBodyDoc": {
            "snapshotTime": "Point in time in which the app recovery should be attempted.",
            "siteName": "[Optional] Destination app name into which app should be recovered. This is case when new app should be created instead.",
            "slotName": "[Optional] Destination app slot name into which app should be recovered."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resourceHealthMetadata",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Destination deployment slot during swap operation.",
            "preserveVnet": "<code>true</code> to preserve Virtual Network to the slot during swap; otherwise, <code>false</code>."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Destination deployment slot during swap operation.",
            "preserveVnet": "<code>true</code> to preserve Virtual Network to the slot during swap; otherwise, <code>false</code>."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "repoUrl": "(string)",
                "branch": "(string)",
                "isManualIntegration": "(boolean)",
                "deploymentRollbackEnabled": "(boolean)",
                "isMercurial": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "repoUrl": "Repository or source control URL.",
                "branch": "Name of branch to use for deployment.",
                "isManualIntegration": "<code>true</code> to limit to manual integration; <code>false</code> to enable continuous integration (which configures webhooks into online repos like GitHub).",
                "deploymentRollbackEnabled": "<code>true</code> to enable deployment rollback; otherwise, <code>false</code>.",
                "isMercurial": "<code>true</code> for a Mercurial repository; <code>false</code> for a Git repository."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/syncfunctiontriggers",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "vnetResourceId": "(string)",
            "certThumbprint": "(string)",
            "certBlob": "(string)",
            "routes": [
                {
                    "id": "(string)",
                    "name": "(string)",
                    "kind": "(string)",
                    "location": "(string)",
                    "type": "(string)",
                    "tags": {},
                    "properties": {
                        "name": "(string)",
                        "startAddress": "(string)",
                        "endAddress": "(string)",
                        "routeType": "(string)"
                    }
                }
            ],
            "resyncRequired": "(boolean)",
            "dnsServers": "(string)"
        },
        "RequestBodyDoc": {
            "vnetResourceId": "The Virtual Network's resource ID.",
            "certThumbprint": "The client certificate thumbprint.",
            "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \n Point-To-Site VPN connection.",
            "routes": [
                {
                    "id": "Resource Id.",
                    "name": "Resource Name.",
                    "kind": "Kind of resource.",
                    "location": "Resource Location.",
                    "type": "Resource type.",
                    "tags": {},
                    "properties": {
                        "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                        "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                        "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                        "routeType": "The type of route this is:\n DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918\n INHERITED - Routes inherited from the real Virtual Network routes\n STATIC - Static route set on the app only\n \n These values will be used for syncing an app's routes with those from a Virtual Network."
                    }
                }
            ],
            "resyncRequired": "<code>true</code> if a resync is required; otherwise, <code>false</code>.",
            "dnsServers": "DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "vnetResourceId": "(string)",
            "certThumbprint": "(string)",
            "certBlob": "(string)",
            "routes": [
                {
                    "id": "(string)",
                    "name": "(string)",
                    "kind": "(string)",
                    "location": "(string)",
                    "type": "(string)",
                    "tags": {},
                    "properties": {
                        "name": "(string)",
                        "startAddress": "(string)",
                        "endAddress": "(string)",
                        "routeType": "(string)"
                    }
                }
            ],
            "resyncRequired": "(boolean)",
            "dnsServers": "(string)"
        },
        "RequestBodyDoc": {
            "vnetResourceId": "The Virtual Network's resource ID.",
            "certThumbprint": "The client certificate thumbprint.",
            "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \n Point-To-Site VPN connection.",
            "routes": [
                {
                    "id": "Resource Id.",
                    "name": "Resource Name.",
                    "kind": "Kind of resource.",
                    "location": "Resource Location.",
                    "type": "Resource type.",
                    "tags": {},
                    "properties": {
                        "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                        "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                        "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                        "routeType": "The type of route this is:\n DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918\n INHERITED - Routes inherited from the real Virtual Network routes\n STATIC - Static route set on the app only\n \n These values will be used for syncing an app's routes with those from a Virtual Network."
                    }
                }
            ],
            "resyncRequired": "<code>true</code> if a resync is required; otherwise, <code>false</code>.",
            "dnsServers": "DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "vnetName": "The Virtual Network name.",
                "vpnPackageUri": "The URI where the VPN package can be downloaded."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "vnetName": "The Virtual Network name.",
                "vpnPackageUri": "The URI where the VPN package can be downloaded."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Destination deployment slot during swap operation.",
            "preserveVnet": "<code>true</code> to preserve Virtual Network to the slot during swap; otherwise, <code>false</code>."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap",
        "RequestBody": {
            "targetSlot": "(string)",
            "preserveVnet": "(boolean)"
        },
        "RequestBodyDoc": {
            "targetSlot": "Destination deployment slot during swap operation.",
            "preserveVnet": "<code>true</code> to preserve Virtual Network to the slot during swap; otherwise, <code>false</code>."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "repoUrl": "(string)",
                "branch": "(string)",
                "isManualIntegration": "(boolean)",
                "deploymentRollbackEnabled": "(boolean)",
                "isMercurial": "(boolean)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "repoUrl": "Repository or source control URL.",
                "branch": "Name of branch to use for deployment.",
                "isManualIntegration": "<code>true</code> to limit to manual integration; <code>false</code> to enable continuous integration (which configures webhooks into online repos like GitHub).",
                "deploymentRollbackEnabled": "<code>true</code> to enable deployment rollback; otherwise, <code>false</code>.",
                "isMercurial": "<code>true</code> for a Mercurial repository; <code>false</code> for a Git repository."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/syncfunctiontriggers",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "vnetResourceId": "(string)",
            "certThumbprint": "(string)",
            "certBlob": "(string)",
            "routes": [
                {
                    "id": "(string)",
                    "name": "(string)",
                    "kind": "(string)",
                    "location": "(string)",
                    "type": "(string)",
                    "tags": {},
                    "properties": {
                        "name": "(string)",
                        "startAddress": "(string)",
                        "endAddress": "(string)",
                        "routeType": "(string)"
                    }
                }
            ],
            "resyncRequired": "(boolean)",
            "dnsServers": "(string)"
        },
        "RequestBodyDoc": {
            "vnetResourceId": "The Virtual Network's resource ID.",
            "certThumbprint": "The client certificate thumbprint.",
            "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \n Point-To-Site VPN connection.",
            "routes": [
                {
                    "id": "Resource Id.",
                    "name": "Resource Name.",
                    "kind": "Kind of resource.",
                    "location": "Resource Location.",
                    "type": "Resource type.",
                    "tags": {},
                    "properties": {
                        "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                        "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                        "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                        "routeType": "The type of route this is:\n DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918\n INHERITED - Routes inherited from the real Virtual Network routes\n STATIC - Static route set on the app only\n \n These values will be used for syncing an app's routes with those from a Virtual Network."
                    }
                }
            ],
            "resyncRequired": "<code>true</code> if a resync is required; otherwise, <code>false</code>.",
            "dnsServers": "DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Delete",
        "HttpMethod": "DELETE",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}",
        "RequestBody": {
            "vnetResourceId": "(string)",
            "certThumbprint": "(string)",
            "certBlob": "(string)",
            "routes": [
                {
                    "id": "(string)",
                    "name": "(string)",
                    "kind": "(string)",
                    "location": "(string)",
                    "type": "(string)",
                    "tags": {},
                    "properties": {
                        "name": "(string)",
                        "startAddress": "(string)",
                        "endAddress": "(string)",
                        "routeType": "(string)"
                    }
                }
            ],
            "resyncRequired": "(boolean)",
            "dnsServers": "(string)"
        },
        "RequestBodyDoc": {
            "vnetResourceId": "The Virtual Network's resource ID.",
            "certThumbprint": "The client certificate thumbprint.",
            "certBlob": "A certificate file (.cer) blob containing the public key of the private key used to authenticate a \n Point-To-Site VPN connection.",
            "routes": [
                {
                    "id": "Resource Id.",
                    "name": "Resource Name.",
                    "kind": "Kind of resource.",
                    "location": "Resource Location.",
                    "type": "Resource type.",
                    "tags": {},
                    "properties": {
                        "name": "The name of this route. This is only returned by the server and does not need to be set by the client.",
                        "startAddress": "The starting address for this route. This may also include a CIDR notation, in which case the end address must not be specified.",
                        "endAddress": "The ending address for this route. If the start address is specified in CIDR notation, this must be omitted.",
                        "routeType": "The type of route this is:\n DEFAULT - By default, every app has routes to the local address ranges specified by RFC1918\n INHERITED - Routes inherited from the real Virtual Network routes\n STATIC - Static route set on the app only\n \n These values will be used for syncing an app's routes with those from a Virtual Network."
                    }
                }
            ],
            "resyncRequired": "<code>true</code> if a resync is required; otherwise, <code>false</code>.",
            "dnsServers": "DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses."
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "CreateOrUpdate",
        "HttpMethod": "PUT",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "vnetName": "The Virtual Network name.",
                "vpnPackageUri": "The URI where the VPN package can be downloaded."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Update",
        "HttpMethod": "PATCH",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}",
        "RequestBody": {
            "id": "(string)",
            "name": "(string)",
            "kind": "(string)",
            "location": "(string)",
            "type": "(string)",
            "tags": {},
            "properties": {
                "vnetName": "(string)",
                "vpnPackageUri": "(string)"
            }
        },
        "RequestBodyDoc": {
            "id": "Resource Id.",
            "name": "Resource Name.",
            "kind": "Kind of resource.",
            "location": "Resource Location.",
            "type": "Resource type.",
            "tags": {},
            "properties": {
                "vnetName": "The Virtual Network name.",
                "vpnPackageUri": "The URI where the VPN package can be downloaded."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/disable",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/reset",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "Get",
        "HttpMethod": "GET",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}",
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/validate",
        "RequestBody": {
            "name": "(string)",
            "type": "(string)",
            "location": "(string)",
            "properties": {
                "serverFarmId": "(string)",
                "skuName": "(string)",
                "needLinuxWorkers": "(boolean)",
                "capacity": "(integer)",
                "hostingEnvironment": "(string)"
            }
        },
        "RequestBodyDoc": {
            "name": "Resource name to verify.",
            "type": "Resource type used for verification.",
            "location": "Expected location of the resource.",
            "properties": {
                "serverFarmId": "ARM resource ID of an App Service plan that would host the app.",
                "skuName": "Name of the target SKU for the App Service plan.",
                "needLinuxWorkers": "<code>true</code> if App Service plan is for Linux workers; otherwise, <code>false</code>.",
                "capacity": "Target capacity of the App Service plan (number of VM's).",
                "hostingEnvironment": "Name of App Service Environment where app or App Service plan should be created."
            }
        },
        "ApiVersion": "2016-03-01"
    },
    {
        "MethodName": "MethodNameWeird",
        "HttpMethod": "POST",
        "Url": "https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/validateMoveResources",
        "RequestBody": {
            "targetResourceGroup": "(string)",
            "resources": [
                "(string)"
            ]
        },
        "RequestBodyDoc": {
            "resources": [
                null
            ]
        },
        "ApiVersion": "2016-03-01"
    }
]
