// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Microsoft.Azure.Management.WebSites;
using Microsoft.Azure.Management.WebSites.Models;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.Common;
using Microsoft.WindowsAzure.Common.Internals;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.WebSites
{
    /// <summary>
    /// In addition to standard HTTP status codes, the Windows Azure Web Sites
    /// Management REST API returns extended error codes and error messages.
    /// The extended codes do not replace the standard HTTP status codes, but
    /// provide additional, actionable information that can be used in
    /// conjunction with the standard HTTP status codes. For example, an HTTP
    /// 404 error can occur for numerous reasons, so having the additional
    /// information in the extended message can assist with problem
    /// resolution. (For more information on the standard HTTP codes returned
    /// by the REST API, see Service Management Status and Error Codes.)  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166968.aspx for
    /// more information)
    /// </summary>
    public static partial class WebSiteExtendedErrorCodes
    {
        /// <summary>
        /// Access is denied.
        /// </summary>
        public const string AccessDenied = "01001";
        
        /// <summary>
        /// Command resource object is not present in the request body.
        /// </summary>
        public const string CommandResourceNotPresent = "01002";
        
        /// <summary>
        /// Invalid name {0}.
        /// </summary>
        public const string InvalidName = "01003";
        
        /// <summary>
        /// Cannot understand command verb {0}.
        /// </summary>
        public const string UnknownCommandVerb = "01004";
        
        /// <summary>
        /// The service is currently in read only mode.
        /// </summary>
        public const string IsInReadOnlyMode = "01005";
        
        /// <summary>
        /// The {0} parameter is not specified.
        /// </summary>
        public const string ParameterIsNotSpecified = "01006";
        
        /// <summary>
        /// Parameter {0} has invalid value.
        /// </summary>
        public const string InvalidParameterValue = "01007";
        
        /// <summary>
        /// {0} object is not present in the request body.
        /// </summary>
        public const string InvalidRequest = "01008";
        
        /// <summary>
        /// The from value in the query string is bigger than or equal to the
        /// to value.
        /// </summary>
        public const string IncorrectDateTimeRange = "01009";
        
        /// <summary>
        /// Required parameter {0} is missing.
        /// </summary>
        public const string RequiredParameterMissing = "01010";
        
        /// <summary>
        /// Name of the web quota cannot change.
        /// </summary>
        public const string ResourceNameCannotChange = "01011";
        
        /// <summary>
        /// The value of the query string parameter cannot be converted to
        /// Boolean.
        /// </summary>
        public const string FailedToConvertParameterValue = "01012";
        
        /// <summary>
        /// Parameter with name {0} already exists in the request.
        /// </summary>
        public const string ParameterNameAlreadyExists = "01013";
        
        /// <summary>
        /// Parameter name cannot be empty.
        /// </summary>
        public const string ParameterNameIsEmpty = "01014";
        
        /// <summary>
        /// Not ready.
        /// </summary>
        public const string NotReady = "01015";
        
        /// <summary>
        /// Ready.
        /// </summary>
        public const string Ready = "01016";
        
        /// <summary>
        /// Update is not allowed for the {0} field.
        /// </summary>
        public const string UpdateForFieldNotAllowed = "01017";
        
        /// <summary>
        /// Web Service does not support Command {0}. Only supported command(s)
        /// is {1}.
        /// </summary>
        public const string NotSupportedCommand = "01018";
        
        /// <summary>
        /// Invalid data ({0}).
        /// </summary>
        public const string InvalidData = "01019";
        
        /// <summary>
        /// There was a conflict. {0}
        /// </summary>
        public const string GenericConflict = "01020";
        
        /// <summary>
        /// Internal server error occurred. {0}
        /// </summary>
        public const string InternalServerError = "01021";
        
        /// <summary>
        /// Number of sites exceeds the maximum allowed.
        /// </summary>
        public const string NumberOfSitesLimit = "03001";
        
        /// <summary>
        /// NumberOfWorkers exceeds the maximum allowed.
        /// </summary>
        public const string NumberOfWorkersLimit = "03002";
        
        /// <summary>
        /// There is not enough space on the disk.
        /// </summary>
        public const string NoStorageVolumeAvailable = "03003";
        
        /// <summary>
        /// WebSpace with name {0} already exists for subscription {1}.
        /// </summary>
        public const string WebSpaceAlreadyExists = "03004";
        
        /// <summary>
        /// Cannot find webspace {0} for subscription {1}
        /// </summary>
        public const string WebSpaceNotFound = "03005";
        
        /// <summary>
        /// Web space contains resources.
        /// </summary>
        public const string WebSpaceContainsResources = "03006";
        
        /// <summary>
        /// The file storage capacity exceeds the limit.
        /// </summary>
        public const string FileStorageLimit = "03007";
        
        /// <summary>
        /// Failed to delete web space {0}: {1}
        /// </summary>
        public const string WebSpaceDeleteError = "03008";
        
        /// <summary>
        /// Not enough available Standard Instance servers to satisfy this
        /// request.
        /// </summary>
        public const string NoWorkersAvailable = "03009";
        
        /// <summary>
        /// Failed to create web space {0} on storage volume {1}: {2}
        /// </summary>
        public const string WebSpaceCreateError = "03010";
        
        /// <summary>
        /// Directory already exists for site {0}.
        /// </summary>
        public const string DirectoryAlreadyExists = "04001";
        
        /// <summary>
        /// Failed to delete directory {0}.
        /// </summary>
        public const string DirectoryDeleteError = "04002";
        
        /// <summary>
        /// Invalid host name {0}.
        /// </summary>
        public const string InvalidHostName = "04003";
        
        /// <summary>
        /// NumberOfWorkers value must be more than zero.
        /// </summary>
        public const string InvalidNumberOfWorkers = "04004";
        
        /// <summary>
        /// Hostname '{0}' already exists.
        /// </summary>
        public const string HostNameAlreadyExists = "04005";
        
        /// <summary>
        /// No CNAME pointing from {0} to a site in a default DNS zone (or too
        /// many).
        /// </summary>
        public const string InvalidCustomHostNameValidation = "04006";
        
        /// <summary>
        /// There are no hostnames which could be used for validation.
        /// </summary>
        public const string InvalidCustomHostNameValidationNoBaseHostName = "04007";
        
        /// <summary>
        /// Site with name {0} already exists.
        /// </summary>
        public const string SiteAlreadyExists = "04008";
        
        /// <summary>
        /// Cannot find site {0}.
        /// </summary>
        public const string SiteNotFound = "04009";
        
        /// <summary>
        /// The external URL "{0}" specified on request header "{1}" is invalid.
        /// </summary>
        public const string InvalidExternalUriHeader = "04010";
        
        /// <summary>
        /// Failed to delete file {0}.
        /// </summary>
        public const string FileDeleteError = "04011";
        
        /// <summary>
        /// Number of workers for this site exceeds the maximum allowed.
        /// </summary>
        public const string NumberOfWorkersPerSiteLimit = "04012";
        
        /// <summary>
        /// WebSiteManager.CreateWebSite: Creating Site using storageVolume {0}.
        /// </summary>
        public const string TraceWebSiteStorageVolume = "04013";
        
        /// <summary>
        /// Cannot delete repository with name {0}.
        /// </summary>
        public const string RepositoryDeleteError = "05001";
        
        /// <summary>
        /// Development site already exists in the repository for site {0}.
        /// </summary>
        public const string RepositoryDevSiteAlreadyExists = "05002";
        
        /// <summary>
        /// Development site does not exist in the repository for site {0}.
        /// </summary>
        public const string RepositoryDevSiteNotExist = "05003";
        
        /// <summary>
        /// Site {0} already has repository created for it.
        /// </summary>
        public const string RepositorySiteAlreadyExists = "05004";
        
        /// <summary>
        /// Repository does not exist for site {0}.
        /// </summary>
        public const string RepositorySiteNotExist = "05005";
        
        /// <summary>
        /// Failed to create a development site.
        /// </summary>
        public const string TraceFailedToCreateDevSite = "05006";
        
        /// <summary>
        /// User {0} has been rejected.
        /// </summary>
        public const string AuthenticatedFailed = "06001";
        
        /// <summary>
        /// User {0} has been successfully authenticated.
        /// </summary>
        public const string AuthenticatedPassed = "06002";
        
        /// <summary>
        /// User {0} has been rejected.
        /// </summary>
        public const string AuthorizationFailed = "06003";
        
        /// <summary>
        /// User {0} has been authorized.
        /// </summary>
        public const string AuthorizationPassed = "06004";
        
        /// <summary>
        /// Publishing credentials have to be trimmed from white characters.
        /// </summary>
        public const string PublishingCredentialsNotTrimmed = "06005";
        
        /// <summary>
        /// Publishing password cannot be empty.
        /// </summary>
        public const string PublishingPasswordIsEmpty = "06006";
        
        /// <summary>
        /// Publishing password must be specified.
        /// </summary>
        public const string PublishingPasswordNotSpecified = "06007";
        
        /// <summary>
        /// Publishing username {0} is already used. Specify a different
        /// publishing username.
        /// </summary>
        public const string PublishingUserNameAlreadyExists = "06008";
        
        /// <summary>
        /// Publishing user name cannot be empty.
        /// </summary>
        public const string PublishingUserNameIsEmpty = "06009";
        
        /// <summary>
        /// An error occurred when adding the {0} entry: {1}
        /// </summary>
        public const string ErrorAdding = "51001";
        
        /// <summary>
        /// An error occurred when deleting the {0} entry: {1}
        /// </summary>
        public const string ErrorDeleting = "51002";
        
        /// <summary>
        /// An error occurred when updating the {0} entry: {1}
        /// </summary>
        public const string ErrorUpdating = "51003";
        
        /// <summary>
        /// Cannot find {0} with name {1}.
        /// </summary>
        public const string CannotFindEntity = "51004";
        
        /// <summary>
        /// Subscription with specified name already exists.
        /// </summary>
        public const string SubscriptionConflict = "52001";
        
        /// <summary>
        /// Subscripton Name cannot be null or empty.
        /// </summary>
        public const string SubscriptionNonEmpty = "52002";
        
        /// <summary>
        /// Subscription {0} not found.
        /// </summary>
        public const string SubscriptionNotFound = "52003";
        
        /// <summary>
        /// Subscription {0} is Suspended.
        /// </summary>
        public const string SubscriptionSuspended = "52004";
        
        /// <summary>
        /// Subscription contains WebSpaces.
        /// </summary>
        public const string NonEmptySubscription = "52005";
        
        /// <summary>
        /// WebSpace with specified name already exists.
        /// </summary>
        public const string WebSpaceConflict = "53001";
        
        /// <summary>
        /// WebSpace Name cannot be null or empty.
        /// </summary>
        public const string WebSpaceNonEmpty = "53002";
        
        /// <summary>
        /// WebSpace contains web sites.
        /// </summary>
        public const string NonEmptyWebSpace = "53003";
        
        /// <summary>
        /// An Error occurred when picking Stamp for WebSpace {0}.
        /// </summary>
        public const string ErrorPickingStamp = "53004";
        
        /// <summary>
        /// Web site with given name {0} already exists in the specified
        /// Subscription and Webspace.
        /// </summary>
        public const string WebSiteConflict = "54001";
        
        /// <summary>
        /// WebSiteName cannot be null or empty.
        /// </summary>
        public const string WebSiteNonEmpty = "54002";
        
        /// <summary>
        /// Specified Host Name {0} is already taken by another site.
        /// </summary>
        public const string HostNameConflict = "54003";
    }
}

namespace Microsoft.Azure.Management.WebSites.Models
{
    /// <summary>
    /// A specific backup.
    /// </summary>
    public partial class BackupItem
    {
        private string _blobName;
        
        /// <summary>
        /// Optional. The blob name where the backup is stored, e.g.
        /// mysite1_20140506.zip
        /// </summary>
        public string BlobName
        {
            get { return this._blobName; }
            set { this._blobName = value; }
        }
        
        private string _correlationId;
        
        /// <summary>
        /// Optional. Internal correlation identifier - identifies a specific
        /// backup.
        /// </summary>
        public string CorrelationId
        {
            get { return this._correlationId; }
            set { this._correlationId = value; }
        }
        
        private System.DateTime? _created;
        
        /// <summary>
        /// Optional. Timestamp when the backup has been created.
        /// </summary>
        public System.DateTime? Created
        {
            get { return this._created; }
            set { this._created = value; }
        }
        
        private IList<DatabaseBackupSetting> _databases;
        
        /// <summary>
        /// Optional. Database settings for backup.
        /// </summary>
        public IList<DatabaseBackupSetting> Databases
        {
            get { return this._databases; }
            set { this._databases = value; }
        }
        
        private System.DateTime? _finishedTimeStamp;
        
        /// <summary>
        /// Optional. Timestamp when this backup has been finished and a zip
        /// file has been uploaded to a storage account.
        /// </summary>
        public System.DateTime? FinishedTimeStamp
        {
            get { return this._finishedTimeStamp; }
            set { this._finishedTimeStamp = value; }
        }
        
        private System.DateTime? _lastRestoreTimeStamp;
        
        /// <summary>
        /// Optional. Timestamp when this backup has been used for a restore
        /// operation (empty if it wasn't).
        /// </summary>
        public System.DateTime? LastRestoreTimeStamp
        {
            get { return this._lastRestoreTimeStamp; }
            set { this._lastRestoreTimeStamp = value; }
        }
        
        private string _log;
        
        /// <summary>
        /// Optional. Information about the backup, usually used only if there
        /// was an error.
        /// </summary>
        public string Log
        {
            get { return this._log; }
            set { this._log = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of this backup.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private bool _scheduled;
        
        /// <summary>
        /// Optional. True if this backup has been created as a part of a
        /// scheduled backup; false otherwise.
        /// </summary>
        public bool Scheduled
        {
            get { return this._scheduled; }
            set { this._scheduled = value; }
        }
        
        private long _sizeInBytes;
        
        /// <summary>
        /// Optional. Size of the backup zip file in bytes.
        /// </summary>
        public long SizeInBytes
        {
            get { return this._sizeInBytes; }
            set { this._sizeInBytes = value; }
        }
        
        private BackupItemStatus _status;
        
        /// <summary>
        /// Optional. The status of the backup - e.g. Succeeded or Failed
        /// </summary>
        public BackupItemStatus Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _storageAccountUrl;
        
        /// <summary>
        /// Optional. SAS URL for a container in a storage account. E.g.
        /// https://NAME.blob.core.windows.net/CONTAINERNAME/?sv=2012-02-12&st=2013-12-05T19%3A30%3A45Z&se=2017-12-04T19%3A30%3A45Z&sr=c&sp=rwdl&sig=abcdefABCDEFabcdef0123456789
        /// </summary>
        public string StorageAccountUrl
        {
            get { return this._storageAccountUrl; }
            set { this._storageAccountUrl = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupItem class.
        /// </summary>
        public BackupItem()
        {
            this.Databases = new List<DatabaseBackupSetting>();
        }
    }
    
    /// <summary>
    /// List of backups for the website.
    /// </summary>
    public partial class BackupItemEnvelope : ResourceBase
    {
        private BackupItem _properties;
        
        /// <summary>
        /// Optional. Backups for a web site.
        /// </summary>
        public BackupItem Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupItemEnvelope class.
        /// </summary>
        public BackupItemEnvelope()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupItemEnvelope class with
        /// required arguments.
        /// </summary>
        public BackupItemEnvelope(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// List of backups for the website.
    /// </summary>
    public partial class BackupItemsEnvelope : ResourceBase
    {
        private IList<BackupItem> _properties;
        
        /// <summary>
        /// Optional. Backups for a web site.
        /// </summary>
        public IList<BackupItem> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupItemsEnvelope class.
        /// </summary>
        public BackupItemsEnvelope()
        {
            this.Properties = new List<BackupItem>();
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupItemsEnvelope class with
        /// required arguments.
        /// </summary>
        public BackupItemsEnvelope(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Backup status
    /// </summary>
    public enum BackupItemStatus
    {
        /// <summary>
        /// In progress
        /// </summary>
        InProgress = 0,
        
        /// <summary>
        /// Failed
        /// </summary>
        Failed = 1,
        
        /// <summary>
        /// Succeeded
        /// </summary>
        Succeeded = 2,
        
        /// <summary>
        /// Timed out
        /// </summary>
        TimedOut = 3,
        
        /// <summary>
        /// Created, pending
        /// </summary>
        Created = 4,
        
        /// <summary>
        /// Skipped
        /// </summary>
        Skipped = 5,
        
        /// <summary>
        /// Partially succeeded. Some file were not included in the backup due
        /// to locking conflicts
        /// </summary>
        PartiallySucceeded = 6,
    }
    
    /// <summary>
    /// A specific backup.
    /// </summary>
    public partial class BackupRequest
    {
        private BackupSchedule _backupSchedule;
        
        /// <summary>
        /// Optional. The backup schedule structure - valid only when setting
        /// up a schedule. Should be Null for on-demand backups.
        /// </summary>
        public BackupSchedule BackupSchedule
        {
            get { return this._backupSchedule; }
            set { this._backupSchedule = value; }
        }
        
        private IList<DatabaseBackupSetting> _databases;
        
        /// <summary>
        /// Optional. Database settings for backup.
        /// </summary>
        public IList<DatabaseBackupSetting> Databases
        {
            get { return this._databases; }
            set { this._databases = value; }
        }
        
        private bool? _enabled;
        
        /// <summary>
        /// Optional. Valid only for a backup schedule (can be Null for
        /// on-demand backups). True if enabled; false if disabled (no backups
        /// will be performed).
        /// </summary>
        public bool? Enabled
        {
            get { return this._enabled; }
            set { this._enabled = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of this backup - will be used for generating a
        /// blob name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _storageAccountUrl;
        
        /// <summary>
        /// Optional. SAS URL for a container in a storage account. E.g.
        /// https://NAME.blob.core.windows.net/CONTAINERNAME/?sv=2012-02-12&st=2013-12-05T19%3A30%3A45Z&se=2017-12-04T19%3A30%3A45Z&sr=c&sp=rwdl&sig=abcdefABCDEFabcdef0123456789
        /// </summary>
        public string StorageAccountUrl
        {
            get { return this._storageAccountUrl; }
            set { this._storageAccountUrl = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupRequest class.
        /// </summary>
        public BackupRequest()
        {
            this.Databases = new List<DatabaseBackupSetting>();
        }
    }
    
    /// <summary>
    /// A specific backup.
    /// </summary>
    public partial class BackupRequestEnvelope : ResourceBase
    {
        private BackupRequest _request;
        
        /// <summary>
        /// Optional. TODO.
        /// </summary>
        public BackupRequest Request
        {
            get { return this._request; }
            set { this._request = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupRequestEnvelope class.
        /// </summary>
        public BackupRequestEnvelope()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupRequestEnvelope class with
        /// required arguments.
        /// </summary>
        public BackupRequestEnvelope(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Defines a backup schedule for a website.
    /// </summary>
    public partial class BackupSchedule
    {
        private int _frequencyInterval;
        
        /// <summary>
        /// Optional. The frequency of backups.
        /// </summary>
        public int FrequencyInterval
        {
            get { return this._frequencyInterval; }
            set { this._frequencyInterval = value; }
        }
        
        private FrequencyUnit _frequencyUnit;
        
        /// <summary>
        /// Optional. Units for FrequencyInterval - e.g. Day or Hour
        /// </summary>
        public FrequencyUnit FrequencyUnit
        {
            get { return this._frequencyUnit; }
            set { this._frequencyUnit = value; }
        }
        
        private bool _keepAtLeastOneBackup;
        
        /// <summary>
        /// Optional. Retention policy deletes backups after predefined number
        /// of days. If this is true, there will be always at least one backup
        /// left. regardless of the policy. If false, all backups can be
        /// deleted.
        /// </summary>
        public bool KeepAtLeastOneBackup
        {
            get { return this._keepAtLeastOneBackup; }
            set { this._keepAtLeastOneBackup = value; }
        }
        
        private System.DateTime? _lastExecutionTime;
        
        /// <summary>
        /// Optional. The last time when this schedule started a backup, Null
        /// if didn't start anything yet.
        /// </summary>
        public System.DateTime? LastExecutionTime
        {
            get { return this._lastExecutionTime; }
            set { this._lastExecutionTime = value; }
        }
        
        private int _retentionPeriodInDays;
        
        /// <summary>
        /// Optional. Backups older N days (N defined by this value) will be
        /// automatically deleted.
        /// </summary>
        public int RetentionPeriodInDays
        {
            get { return this._retentionPeriodInDays; }
            set { this._retentionPeriodInDays = value; }
        }
        
        private System.DateTime? _startTime;
        
        /// <summary>
        /// Optional. When this schedule should start backing up the site. Null
        /// means immediately.
        /// </summary>
        public System.DateTime? StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupSchedule class.
        /// </summary>
        public BackupSchedule()
        {
        }
    }
    
    /// <summary>
    /// TODO
    /// </summary>
    public partial class BackupScheduleRequestEnvelope : ResourceBase
    {
        private BackupScheduleRequestResponse _properties;
        
        /// <summary>
        /// Optional. TODO.
        /// </summary>
        public BackupScheduleRequestResponse Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupScheduleRequestEnvelope
        /// class.
        /// </summary>
        public BackupScheduleRequestEnvelope()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupScheduleRequestEnvelope
        /// class with required arguments.
        /// </summary>
        public BackupScheduleRequestEnvelope(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// TODO
    /// </summary>
    public partial class BackupScheduleRequestResponse
    {
        private BackupSchedule _backupSchedule;
        
        /// <summary>
        /// Optional. Schedule - defines how often should be the backup
        /// performed.
        /// </summary>
        public BackupSchedule BackupSchedule
        {
            get { return this._backupSchedule; }
            set { this._backupSchedule = value; }
        }
        
        private IList<DatabaseBackupSetting> _databases;
        
        /// <summary>
        /// Optional. Database settings for backup.
        /// </summary>
        public IList<DatabaseBackupSetting> Databases
        {
            get { return this._databases; }
            set { this._databases = value; }
        }
        
        private bool? _enabled;
        
        /// <summary>
        /// Optional. True if this schedule is enabled and periodically
        /// executed; otherwise, false.
        /// </summary>
        public bool? Enabled
        {
            get { return this._enabled; }
            set { this._enabled = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Name of the backup schedule.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _storageAccountUrl;
        
        /// <summary>
        /// Optional. SAS URL for a container in a storage account. E.g.
        /// https://NAME.blob.core.windows.net/CONTAINERNAME/?sv=2012-02-12&st=2013-12-05T19%3A30%3A45Z&se=2017-12-04T19%3A30%3A45Z&sr=c&sp=rwdl&sig=abcdefABCDEFabcdef0123456789
        /// </summary>
        public string StorageAccountUrl
        {
            get { return this._storageAccountUrl; }
            set { this._storageAccountUrl = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BackupScheduleRequestResponse
        /// class.
        /// </summary>
        public BackupScheduleRequestResponse()
        {
            this.Databases = new List<DatabaseBackupSetting>();
        }
    }
    
    /// <summary>
    /// Connection string for database and other external resources.
    /// </summary>
    public partial class ConnectionStringInfo
    {
        private string _connectionString;
        
        /// <summary>
        /// Optional. A database connection string.
        /// </summary>
        public string ConnectionString
        {
            get { return this._connectionString; }
            set { this._connectionString = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of the connection string.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private DatabaseServerType _type;
        
        /// <summary>
        /// Optional. The type of the connection string (for example, "MySQL").
        /// </summary>
        public DatabaseServerType Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ConnectionStringInfo class.
        /// </summary>
        public ConnectionStringInfo()
        {
        }
    }
    
    /// <summary>
    /// A specific backup.
    /// </summary>
    public partial class DatabaseBackupSetting
    {
        private string _connectionString;
        
        /// <summary>
        /// Optional. Contains a connection string to a database which is being
        /// backed up/restored. If the restore should happen to a new
        /// database, the database name inside is the new one.
        /// </summary>
        public string ConnectionString
        {
            get { return this._connectionString; }
            set { this._connectionString = value; }
        }
        
        private string _connectionStringName;
        
        /// <summary>
        /// Optional.  Contains a connection string name that is linked to the
        /// SiteConfig.ConnectionStrings.This is used during restore with
        /// overwrite connection strings options.
        /// </summary>
        public string ConnectionStringName
        {
            get { return this._connectionStringName; }
            set { this._connectionStringName = value; }
        }
        
        private string _databaseType;
        
        /// <summary>
        /// Optional. The database type (either SqlAzure or MySql)
        /// </summary>
        public string DatabaseType
        {
            get { return this._databaseType; }
            set { this._databaseType = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. Always contains the original database name (it is used as
        /// a key for association with a dump in the backup package) - even if
        /// it is a restore to a new&different database.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the DatabaseBackupSetting class.
        /// </summary>
        public DatabaseBackupSetting()
        {
        }
    }
    
    /// <summary>
    /// Type of Database
    /// </summary>
    public enum DatabaseServerType
    {
        /// <summary>
        /// My SQL Server
        /// </summary>
        MySql = 0,
        
        /// <summary>
        /// MS SQL server
        /// </summary>
        SQLServer = 1,
        
        /// <summary>
        /// SQL Azure
        /// </summary>
        SQLAzure = 2,
        
        /// <summary>
        /// Custom SQL Server
        /// </summary>
        Custom = 3,
    }
    
    /// <summary>
    /// Defines the unit for the backup frequency
    /// </summary>
    public enum FrequencyUnit
    {
        /// <summary>
        /// Units are days
        /// </summary>
        Day = 0,
        
        /// <summary>
        /// Units are hours
        /// </summary>
        Hour = 1,
    }
    
    /// <summary>
    /// Historical metric snapshot for the web site.
    /// </summary>
    public partial class HistoricalUsageMetric
    {
        private string _code;
        
        /// <summary>
        /// Optional. Reports whether the metric data was returned successfully.
        /// </summary>
        public string Code
        {
            get { return this._code; }
            set { this._code = value; }
        }
        
        private HistoricalUsageMetricData _data;
        
        /// <summary>
        /// Optional. Historical metric snapshot data for the web site.
        /// </summary>
        public HistoricalUsageMetricData Data
        {
            get { return this._data; }
            set { this._data = value; }
        }
        
        private string _message;
        
        /// <summary>
        /// Optional. A string for optional message content.
        /// </summary>
        public string Message
        {
            get { return this._message; }
            set { this._message = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the HistoricalUsageMetric class.
        /// </summary>
        public HistoricalUsageMetric()
        {
        }
    }
    
    /// <summary>
    /// Historical metric snapshot data for the web site.
    /// </summary>
    public partial class HistoricalUsageMetricData
    {
        private string _displayName;
        
        /// <summary>
        /// Optional. The display name of the metric, including spaces.
        /// </summary>
        public string DisplayName
        {
            get { return this._displayName; }
            set { this._displayName = value; }
        }
        
        private DateTime _endTime;
        
        /// <summary>
        /// Optional. The end time of the data reported.
        /// </summary>
        public DateTime EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of the metric.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _primaryAggregationType;
        
        /// <summary>
        /// Optional. The primary data aggregation type. This value is usually
        /// Total.
        /// </summary>
        public string PrimaryAggregationType
        {
            get { return this._primaryAggregationType; }
            set { this._primaryAggregationType = value; }
        }
        
        private DateTime _startTime;
        
        /// <summary>
        /// Optional. The start time of the data reported.
        /// </summary>
        public DateTime StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private string _timeGrain;
        
        /// <summary>
        /// Optional. Length of time (rollup) during which the information was
        /// gathered. For more information, see Supported Rollups.
        /// </summary>
        public string TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        private string _unit;
        
        /// <summary>
        /// Optional. The unit of measurement for the metric (for example,
        /// milliseconds, bytes, or count).
        /// </summary>
        public string Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        private IList<HistoricalUsageMetricSample> _values;
        
        /// <summary>
        /// Optional. One or more MetricSample elements.
        /// </summary>
        public IList<HistoricalUsageMetricSample> Values
        {
            get { return this._values; }
            set { this._values = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the HistoricalUsageMetricData class.
        /// </summary>
        public HistoricalUsageMetricData()
        {
            this.Values = new List<HistoricalUsageMetricSample>();
        }
    }
    
    /// <summary>
    /// Supported historical usage metric names.
    /// </summary>
    public static partial class HistoricalUsageMetricNames
    {
        public const string CpuTime = "CpuTime";
        
        public const string BytesReceived = "BytesReceived";
        
        public const string BytesSent = "BytesSent";
        
        public const string IncomingRequestBytes = "IncomingRequestBytes";
        
        public const string IncomingRequestResponseBytes = "IncomingRequestResponseBytes";
        
        public const string OutgoingRequestBytes = "OutgoingRequestBytes";
        
        public const string OutgoingRequestResponseBytes = "OutgoingRequestResponseBytes";
        
        public const string LocalReadBytes = "LocalReadBytes";
        
        public const string LocalWrittenBytes = "LocalWrittenBytes";
        
        public const string NetworkReadBytes = "NetworkReadBytes";
        
        public const string NetworkWrittenBytes = "NetworkWrittenBytes";
        
        public const string Requests = "Requests";
        
        public const string Http2xx = "Http2xx";
        
        public const string Http3xx = "Http3xx";
        
        public const string Http401 = "Http401";
        
        public const string Http403 = "Http403";
        
        public const string Http404 = "Http404";
        
        public const string Http406 = "Http406";
        
        public const string Http4xx = "Http4xx";
        
        public const string Http5xx = "Http5xx";
    }
    
    /// <summary>
    /// Historical metric snapshot data sample.
    /// </summary>
    public partial class HistoricalUsageMetricSample
    {
        private int _count;
        
        /// <summary>
        /// Optional. The metric sample count. This value is usually 1.
        /// </summary>
        public int Count
        {
            get { return this._count; }
            set { this._count = value; }
        }
        
        private string _instanceName;
        
        /// <summary>
        /// Optional. Name of the instance for which the metric applies. If
        /// empty the metric is aggregated on all instances.
        /// </summary>
        public string InstanceName
        {
            get { return this._instanceName; }
            set { this._instanceName = value; }
        }
        
        private string _maximum;
        
        /// <summary>
        /// Optional. Maximum value recorded.
        /// </summary>
        public string Maximum
        {
            get { return this._maximum; }
            set { this._maximum = value; }
        }
        
        private string _minimum;
        
        /// <summary>
        /// Optional. Minimum value recorded.
        /// </summary>
        public string Minimum
        {
            get { return this._minimum; }
            set { this._minimum = value; }
        }
        
        private DateTime _timeCreated;
        
        /// <summary>
        /// Optional. Time the metric was taken.
        /// </summary>
        public DateTime TimeCreated
        {
            get { return this._timeCreated; }
            set { this._timeCreated = value; }
        }
        
        private string _total;
        
        /// <summary>
        /// Optional. Value of the metric sample for the time taken.
        /// </summary>
        public string Total
        {
            get { return this._total; }
            set { this._total = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the HistoricalUsageMetricSample class.
        /// </summary>
        public HistoricalUsageMetricSample()
        {
        }
    }
    
    /// <summary>
    /// The managed pipeline mode of a website.
    /// </summary>
    public enum ManagedPipelineMode
    {
        /// <summary>
        /// Integrated Managed Pipeline Mode.
        /// </summary>
        Integrated = 0,
        
        /// <summary>
        /// Classic Managed Pipeline Mode.
        /// </summary>
        Classic = 1,
    }
    
    /// <summary>
    /// Name value pair.
    /// </summary>
    public partial class NameValuePair
    {
        private string _name;
        
        /// <summary>
        /// Optional. The name of the pair.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private string _value;
        
        /// <summary>
        /// Optional. The value of the pair.
        /// </summary>
        public string Value
        {
            get { return this._value; }
            set { this._value = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the NameValuePair class.
        /// </summary>
        public NameValuePair()
        {
        }
    }
    
    /// <summary>
    /// Publishing Credentials  for the website.
    /// </summary>
    public partial class PublishingCredentials
    {
        private string _publishingPassword;
        
        /// <summary>
        /// Required. Hash value of the password used for publishing the web
        /// site.
        /// </summary>
        public string PublishingPassword
        {
            get { return this._publishingPassword; }
            set { this._publishingPassword = value; }
        }
        
        private string _publishingUserName;
        
        /// <summary>
        /// Required. The username used for publishing the web site. This is
        /// normally a dollar sign prepended to the web site name (for
        /// example, "$contoso").
        /// </summary>
        public string PublishingUserName
        {
            get { return this._publishingUserName; }
            set { this._publishingUserName = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the PublishingCredentials class.
        /// </summary>
        public PublishingCredentials()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the PublishingCredentials class with
        /// required arguments.
        /// </summary>
        public PublishingCredentials(string publishingPassword, string publishingUserName)
            : this()
        {
            if (publishingPassword == null)
            {
                throw new ArgumentNullException("publishingPassword");
            }
            if (publishingUserName == null)
            {
                throw new ArgumentNullException("publishingUserName");
            }
            this.PublishingPassword = publishingPassword;
            this.PublishingUserName = publishingUserName;
        }
    }
    
    /// <summary>
    /// The remote debugging version.
    /// </summary>
    public enum RemoteDebuggingVersion
    {
        /// <summary>
        /// Visual Studio 2012.
        /// </summary>
        VS2012 = 0,
        
        /// <summary>
        /// Visual Studio 2013.
        /// </summary>
        VS2013 = 1,
    }
    
    public partial class ResourceBase
    {
        private string _id;
        
        /// <summary>
        /// Optional. Gets the ID of the resource.
        /// </summary>
        public string Id
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private string _location;
        
        /// <summary>
        /// Required. Gets or sets the location of the resource.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        private string _name;
        
        /// <summary>
        /// Optional. The name of the resource.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        private IDictionary<string, string> _tags;
        
        /// <summary>
        /// Optional. Gets or sets the tags attached to the resource.
        /// </summary>
        public IDictionary<string, string> Tags
        {
            get { return this._tags; }
            set { this._tags = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Optional. The type of the resource
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ResourceBase class.
        /// </summary>
        public ResourceBase()
        {
            this.Tags = new Dictionary<string, string>();
        }
        
        /// <summary>
        /// Initializes a new instance of the ResourceBase class with required
        /// arguments.
        /// </summary>
        public ResourceBase(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create or Update operation for the resource
    /// group.
    /// </summary>
    public partial class ResourceGroupCreateOrUpdateParameters
    {
        private string _location;
        
        /// <summary>
        /// Required. The location of the resource group. It cannot be changed
        /// after the resource group has been created. Has to be one of the
        /// supported Azure Locations, such as West US, East US, West Europe,
        /// East Asia, or on-premise/alternate provider location names.
        /// </summary>
        public string Location
        {
            get { return this._location; }
            set { this._location = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ResourceGroupCreateOrUpdateParameters class.
        /// </summary>
        public ResourceGroupCreateOrUpdateParameters()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ResourceGroupCreateOrUpdateParameters class with required
        /// arguments.
        /// </summary>
        public ResourceGroupCreateOrUpdateParameters(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// The Create or Update resource group operation response.
    /// </summary>
    public partial class ResourceGroupCreateOrUpdateResponse : OperationResponse
    {
        private string _name;
        
        /// <summary>
        /// Optional. The resource group name.
        /// </summary>
        public string Name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// ResourceGroupCreateOrUpdateResponse class.
        /// </summary>
        public ResourceGroupCreateOrUpdateResponse()
        {
        }
    }
    
    /// <summary>
    /// Restore request to either a new or an existing site.
    /// </summary>
    public partial class RestoreRequest
    {
        private bool _adjustConnectionStrings;
        
        /// <summary>
        /// Optional. If the restore operation also restores a database along
        /// with the website and the database is on a different server than
        /// when the original site h
        /// </summary>
        public bool AdjustConnectionStrings
        {
            get { return this._adjustConnectionStrings; }
            set { this._adjustConnectionStrings = value; }
        }
        
        private string _blobName;
        
        /// <summary>
        /// Optional. The blob name where the backup is stored. E.g.
        /// mysite1_20140203.zip
        /// </summary>
        public string BlobName
        {
            get { return this._blobName; }
            set { this._blobName = value; }
        }
        
        private IList<DatabaseBackupSetting> _databases;
        
        /// <summary>
        /// Optional. Database settings for backup.
        /// </summary>
        public IList<DatabaseBackupSetting> Databases
        {
            get { return this._databases; }
            set { this._databases = value; }
        }
        
        private bool _ignoreConflictingHostNames;
        
        /// <summary>
        /// Optional. When restoring a site, custom domains might conflict with
        /// other site in the same datacenter. If this value is true, such
        /// hostnames will be ignored during restore. If this is false, the
        /// restore operation will fail on such conflict.
        /// </summary>
        public bool IgnoreConflictingHostNames
        {
            get { return this._ignoreConflictingHostNames; }
            set { this._ignoreConflictingHostNames = value; }
        }
        
        private bool _overwrite;
        
        /// <summary>
        /// Optional. True if the restore operation will be used for overwrite
        /// an existing site; false otherwise.
        /// </summary>
        public bool Overwrite
        {
            get { return this._overwrite; }
            set { this._overwrite = value; }
        }
        
        private string _storageAccountUrl;
        
        /// <summary>
        /// Optional. SAS URL for a container in a storage account. E.g.
        /// https://NAME.blob.core.windows.net/CONTAINERNAME/?sv=2012-02-12&st=2013-12-05T19%3A30%3A45Z&se=2017-12-04T19%3A30%3A45Z&sr=c&sp=rwdl&sig=abcdefABCDEFabcdef0123456789
        /// </summary>
        public string StorageAccountUrl
        {
            get { return this._storageAccountUrl; }
            set { this._storageAccountUrl = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RestoreRequest class.
        /// </summary>
        public RestoreRequest()
        {
            this.Databases = new List<DatabaseBackupSetting>();
        }
    }
    
    /// <summary>
    /// Restore request to either a new or an existing site.
    /// </summary>
    public partial class RestoreRequestEnvelope : ResourceBase
    {
        private RestoreRequest _request;
        
        /// <summary>
        /// Optional. TODO.
        /// </summary>
        public RestoreRequest Request
        {
            get { return this._request; }
            set { this._request = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the RestoreRequestEnvelope class.
        /// </summary>
        public RestoreRequestEnvelope()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the RestoreRequestEnvelope class with
        /// required arguments.
        /// </summary>
        public RestoreRequestEnvelope(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Web Hosting Plan SKU options.
    /// </summary>
    public enum SkuOptions
    {
        Free = 0,
        
        Shared = 1,
        
        Basic = 2,
        
        Standard = 3,
    }
    
    /// <summary>
    /// Describes a Web Hosting Plan.
    /// </summary>
    public partial class WebHostingPlan : ResourceBase
    {
        private WebHostingPlanProperties _properties;
        
        /// <summary>
        /// Optional. Represents the properties of the Web Hosting Plan.
        /// </summary>
        public WebHostingPlanProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebHostingPlan class.
        /// </summary>
        public WebHostingPlan()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the WebHostingPlan class with
        /// required arguments.
        /// </summary>
        public WebHostingPlan(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Create or update Web Hosting Plan parameters.
    /// </summary>
    public partial class WebHostingPlanCreateOrUpdateParameters
    {
        private WebHostingPlan _webHostingPlan;
        
        /// <summary>
        /// Required. Gets or sets information about a Web Hosting Plan being
        /// created of updated.
        /// </summary>
        public WebHostingPlan WebHostingPlan
        {
            get { return this._webHostingPlan; }
            set { this._webHostingPlan = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebHostingPlanCreateOrUpdateParameters class.
        /// </summary>
        public WebHostingPlanCreateOrUpdateParameters()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebHostingPlanCreateOrUpdateParameters class with required
        /// arguments.
        /// </summary>
        public WebHostingPlanCreateOrUpdateParameters(WebHostingPlan webHostingPlan)
            : this()
        {
            if (webHostingPlan == null)
            {
                throw new ArgumentNullException("webHostingPlan");
            }
            this.WebHostingPlan = webHostingPlan;
        }
    }
    
    /// <summary>
    /// The Create Web Hosting Plan operation response.
    /// </summary>
    public partial class WebHostingPlanCreateOrUpdateResponse : OperationResponse
    {
        private WebHostingPlan _webHostingPlan;
        
        /// <summary>
        /// Optional. Gets the Web Hosting Plan details.
        /// </summary>
        public WebHostingPlan WebHostingPlan
        {
            get { return this._webHostingPlan; }
            set { this._webHostingPlan = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebHostingPlanCreateOrUpdateResponse class.
        /// </summary>
        public WebHostingPlanCreateOrUpdateResponse()
        {
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Get Historical Usage Metrics Web hosting
    /// plan operation.
    /// </summary>
    public partial class WebHostingPlanGetHistoricalUsageMetricsParameters
    {
        private System.DateTime? _endTime;
        
        /// <summary>
        /// Optional. The ending time of the metrics to return. If this
        /// parameter is not specified, the current time is used.
        /// </summary>
        public System.DateTime? EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private bool _includeInstanceBreakdown;
        
        /// <summary>
        /// Optional. Flag which specifies if the metrics for each machine
        /// instance should be included. For sites that run on more than one
        /// machine this could be useful to identify a bad machine.
        /// </summary>
        public bool IncludeInstanceBreakdown
        {
            get { return this._includeInstanceBreakdown; }
            set { this._includeInstanceBreakdown = value; }
        }
        
        private IList<string> _metricNames;
        
        /// <summary>
        /// Optional. Specifies a comma-separated list of the names of the
        /// metrics to return. If the names parameter is not specified, then
        /// all available metrics are returned.
        /// </summary>
        public IList<string> MetricNames
        {
            get { return this._metricNames; }
            set { this._metricNames = value; }
        }
        
        private System.DateTime? _startTime;
        
        /// <summary>
        /// Optional. The starting time of the metrics to return. If this
        /// parameter is not specified, the beginning of the current hour is
        /// used.
        /// </summary>
        public System.DateTime? StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private string _timeGrain;
        
        /// <summary>
        /// Optional. The grain at which the metrics are returned. Supported
        /// values are PT1M (minute), PT1H (hour), P1D (day).
        /// </summary>
        public string TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebHostingPlanGetHistoricalUsageMetricsParameters class.
        /// </summary>
        public WebHostingPlanGetHistoricalUsageMetricsParameters()
        {
            this.MetricNames = new List<string>();
        }
    }
    
    /// <summary>
    /// The Get Historical Usage Metrics Web hosting plan operation response.
    /// </summary>
    public partial class WebHostingPlanGetHistoricalUsageMetricsResponse : OperationResponse, IEnumerable<HistoricalUsageMetric>
    {
        private IList<HistoricalUsageMetric> _usageMetrics;
        
        /// <summary>
        /// Optional. Historical metric snapshots for the web site.
        /// </summary>
        public IList<HistoricalUsageMetric> UsageMetrics
        {
            get { return this._usageMetrics; }
            set { this._usageMetrics = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebHostingPlanGetHistoricalUsageMetricsResponse class.
        /// </summary>
        public WebHostingPlanGetHistoricalUsageMetricsResponse()
        {
            this.UsageMetrics = new List<HistoricalUsageMetric>();
        }
        
        /// <summary>
        /// Gets the sequence of UsageMetrics.
        /// </summary>
        public IEnumerator<HistoricalUsageMetric> GetEnumerator()
        {
            return this.UsageMetrics.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of UsageMetrics.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The Get Web Hosting Plan operation response.
    /// </summary>
    public partial class WebHostingPlanGetResponse : OperationResponse
    {
        private WebHostingPlan _webHostingPlan;
        
        /// <summary>
        /// Optional. Details for the requested Web Hosting Plan.
        /// </summary>
        public WebHostingPlan WebHostingPlan
        {
            get { return this._webHostingPlan; }
            set { this._webHostingPlan = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebHostingPlanGetResponse class.
        /// </summary>
        public WebHostingPlanGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The List Web Hosting Plans operation response.
    /// </summary>
    public partial class WebHostingPlanListResponse : OperationResponse, IEnumerable<WebHostingPlan>
    {
        private IList<WebHostingPlan> _webHostingPlans;
        
        /// <summary>
        /// Optional. The Web Hosting Plans associated with the specified
        /// subscription.
        /// </summary>
        public IList<WebHostingPlan> WebHostingPlans
        {
            get { return this._webHostingPlans; }
            set { this._webHostingPlans = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebHostingPlanListResponse class.
        /// </summary>
        public WebHostingPlanListResponse()
        {
            this.WebHostingPlans = new List<WebHostingPlan>();
        }
        
        /// <summary>
        /// Gets the sequence of WebHostingPlans.
        /// </summary>
        public IEnumerator<WebHostingPlan> GetEnumerator()
        {
            return this.WebHostingPlans.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of WebHostingPlans.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// Represents the properties of a Web Hosting Plan.
    /// </summary>
    public partial class WebHostingPlanProperties
    {
        private int _numberOfWorkers;
        
        /// <summary>
        /// Optional. The instance count, which is the number of virtual
        /// machines dedicated to the Web Hosting Plan. Supported values are
        /// positive integers.
        /// </summary>
        public int NumberOfWorkers
        {
            get { return this._numberOfWorkers; }
            set { this._numberOfWorkers = value; }
        }
        
        private SkuOptions _sku;
        
        /// <summary>
        /// Optional. The Web Hosting Plan SKU.
        /// </summary>
        public SkuOptions Sku
        {
            get { return this._sku; }
            set { this._sku = value; }
        }
        
        private WorkerSizeOptions _workerSize;
        
        /// <summary>
        /// Optional. The instance size. Possible values are Small, Medium, or
        /// Large.
        /// </summary>
        public WorkerSizeOptions WorkerSize
        {
            get { return this._workerSize; }
            set { this._workerSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebHostingPlanProperties class.
        /// </summary>
        public WebHostingPlanProperties()
        {
        }
    }
    
    /// <summary>
    /// Describes a website.
    /// </summary>
    public partial class WebSite : ResourceBase
    {
        private WebSiteProperties _properties;
        
        /// <summary>
        /// Optional. Represents the properties of the website.
        /// </summary>
        public WebSiteProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSite class.
        /// </summary>
        public WebSite()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSite class with required
        /// arguments.
        /// </summary>
        public WebSite(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// List of app settings for the website.
    /// </summary>
    public partial class WebSiteAppSettingsEnvelope : ResourceBase
    {
        private IList<NameValuePair> _properties;
        
        /// <summary>
        /// Optional. App Settings configuration for a web site.
        /// </summary>
        public IList<NameValuePair> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteAppSettingsEnvelope class.
        /// </summary>
        public WebSiteAppSettingsEnvelope()
        {
            this.Properties = new List<NameValuePair>();
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteAppSettingsEnvelope class
        /// with required arguments.
        /// </summary>
        public WebSiteAppSettingsEnvelope(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// List of app settings for the website.
    /// </summary>
    public partial class WebSiteAppSettingsResult : OperationResponse
    {
        private WebSiteAppSettingsEnvelope _resource;
        
        /// <summary>
        /// Optional. Application settings configuration for a site.
        /// </summary>
        public WebSiteAppSettingsEnvelope Resource
        {
            get { return this._resource; }
            set { this._resource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteAppSettingsResult class.
        /// </summary>
        public WebSiteAppSettingsResult()
        {
        }
    }
    
    /// <summary>
    /// The backup record created based on the backup request.
    /// </summary>
    public partial class WebSiteBackupResponse : OperationResponse
    {
        private BackupItemEnvelope _backupItem;
        
        /// <summary>
        /// Optional. Backups for a web site.
        /// </summary>
        public BackupItemEnvelope BackupItem
        {
            get { return this._backupItem; }
            set { this._backupItem = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteBackupResponse class.
        /// </summary>
        public WebSiteBackupResponse()
        {
        }
    }
    
    /// <summary>
    /// Describes a website.
    /// </summary>
    public partial class WebSiteBase : ResourceBase
    {
        private WebSiteBaseProperties _properties;
        
        /// <summary>
        /// Optional. Represents the properties of the website.
        /// </summary>
        public WebSiteBaseProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteBase class.
        /// </summary>
        public WebSiteBase()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteBase class with required
        /// arguments.
        /// </summary>
        public WebSiteBase(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Parameters supplied to the Create Web Site operation.
    /// </summary>
    public partial class WebSiteBaseProperties
    {
        private string _serverFarm;
        
        /// <summary>
        /// Required. The name of the Server Farm (Web Hosting Plan) associated
        /// with this website.
        /// </summary>
        public string ServerFarm
        {
            get { return this._serverFarm; }
            set { this._serverFarm = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteBaseProperties class.
        /// </summary>
        public WebSiteBaseProperties()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteBaseProperties class with
        /// required arguments.
        /// </summary>
        public WebSiteBaseProperties(string serverFarm)
            : this()
        {
            if (serverFarm == null)
            {
                throw new ArgumentNullException("serverFarm");
            }
            this.ServerFarm = serverFarm;
        }
    }
    
    /// <summary>
    /// List of backups for the website.
    /// </summary>
    public partial class WebSiteConnectionStringsEnvelope : ResourceBase
    {
        private IList<ConnectionStringInfo> _properties;
        
        /// <summary>
        /// Optional. Connection strings configuration for a web site.
        /// </summary>
        public IList<ConnectionStringInfo> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteConnectionStringsEnvelope
        /// class.
        /// </summary>
        public WebSiteConnectionStringsEnvelope()
        {
            this.Properties = new List<ConnectionStringInfo>();
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteConnectionStringsEnvelope
        /// class with required arguments.
        /// </summary>
        public WebSiteConnectionStringsEnvelope(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// List of connection strings for the website.
    /// </summary>
    public partial class WebSiteConnectionStringsResult : OperationResponse
    {
        private WebSiteConnectionStringsEnvelope _resource;
        
        /// <summary>
        /// Optional. Connection strings configuration for a site.
        /// </summary>
        public WebSiteConnectionStringsEnvelope Resource
        {
            get { return this._resource; }
            set { this._resource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteConnectionStringsResult
        /// class.
        /// </summary>
        public WebSiteConnectionStringsResult()
        {
        }
    }
    
    /// <summary>
    /// Create or update website parameters.
    /// </summary>
    public partial class WebSiteCreateOrUpdateParameters
    {
        private WebSiteBase _webSite;
        
        /// <summary>
        /// Required. Gets or sets information about a website being created of
        /// updated.
        /// </summary>
        public WebSiteBase WebSite
        {
            get { return this._webSite; }
            set { this._webSite = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteCreateOrUpdateParameters
        /// class.
        /// </summary>
        public WebSiteCreateOrUpdateParameters()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteCreateOrUpdateParameters
        /// class with required arguments.
        /// </summary>
        public WebSiteCreateOrUpdateParameters(WebSiteBase webSite)
            : this()
        {
            if (webSite == null)
            {
                throw new ArgumentNullException("webSite");
            }
            this.WebSite = webSite;
        }
    }
    
    /// <summary>
    /// The Create Web Space operation response.
    /// </summary>
    public partial class WebSiteCreateResponse : OperationResponse
    {
        private WebSite _webSite;
        
        /// <summary>
        /// Optional. Details of the Web Site.
        /// </summary>
        public WebSite WebSite
        {
            get { return this._webSite; }
            set { this._webSite = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteCreateResponse class.
        /// </summary>
        public WebSiteCreateResponse()
        {
        }
    }
    
    /// <summary>
    /// The Delete Web Site operation parameters.
    /// </summary>
    public partial class WebSiteDeleteParameters
    {
        private bool _deleteAllSlots;
        
        /// <summary>
        /// Required. Delete all slots for the web site.
        /// </summary>
        public bool DeleteAllSlots
        {
            get { return this._deleteAllSlots; }
            set { this._deleteAllSlots = value; }
        }
        
        private bool _deleteEmptyServerFarm;
        
        /// <summary>
        /// Required. If the site being deleted is the last web site in a
        /// server farm, you can delete the server farm.
        /// </summary>
        public bool DeleteEmptyServerFarm
        {
            get { return this._deleteEmptyServerFarm; }
            set { this._deleteEmptyServerFarm = value; }
        }
        
        private bool _deleteMetrics;
        
        /// <summary>
        /// Required. Delete the metrics for the web site.
        /// </summary>
        public bool DeleteMetrics
        {
            get { return this._deleteMetrics; }
            set { this._deleteMetrics = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteDeleteParameters class.
        /// </summary>
        public WebSiteDeleteParameters()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteDeleteParameters class
        /// with required arguments.
        /// </summary>
        public WebSiteDeleteParameters(bool deleteEmptyServerFarm, bool deleteMetrics, bool deleteAllSlots)
            : this()
        {
            this.DeleteEmptyServerFarm = deleteEmptyServerFarm;
            this.DeleteMetrics = deleteMetrics;
            this.DeleteAllSlots = deleteAllSlots;
        }
    }
    
    /// <summary>
    /// The Delete Web Site Repository operation response.
    /// </summary>
    public partial class WebSiteDeleteRepositoryResponse : OperationResponse
    {
        private Uri _uri;
        
        /// <summary>
        /// Optional. Contains the URI of the web site repository.
        /// </summary>
        public Uri Uri
        {
            get { return this._uri; }
            set { this._uri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteDeleteRepositoryResponse
        /// class.
        /// </summary>
        public WebSiteDeleteRepositoryResponse()
        {
        }
    }
    
    /// <summary>
    /// Scheduled backup definition.
    /// </summary>
    public partial class WebSiteGetBackupConfigurationResponse : OperationResponse
    {
        private BackupScheduleRequestEnvelope _backupSchedule;
        
        /// <summary>
        /// Optional. Backups schedule for a site.
        /// </summary>
        public BackupScheduleRequestEnvelope BackupSchedule
        {
            get { return this._backupSchedule; }
            set { this._backupSchedule = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSiteGetBackupConfigurationResponse class.
        /// </summary>
        public WebSiteGetBackupConfigurationResponse()
        {
        }
    }
    
    /// <summary>
    /// List of backups for the website.
    /// </summary>
    public partial class WebSiteGetBackupsResponse : OperationResponse
    {
        private BackupItemsEnvelope _backupList;
        
        /// <summary>
        /// Optional. Backups for a web site.
        /// </summary>
        public BackupItemsEnvelope BackupList
        {
            get { return this._backupList; }
            set { this._backupList = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetBackupsResponse class.
        /// </summary>
        public WebSiteGetBackupsResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get Web Site Configuration operation parameters.
    /// </summary>
    public partial class WebSiteGetConfigurationParameters
    {
        private IList<string> _propertiesToInclude;
        
        /// <summary>
        /// Optional. Specifies a list of the names of any addtional parameters
        /// to return.
        /// </summary>
        public IList<string> PropertiesToInclude
        {
            get { return this._propertiesToInclude; }
            set { this._propertiesToInclude = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetConfigurationParameters
        /// class.
        /// </summary>
        public WebSiteGetConfigurationParameters()
        {
            this.PropertiesToInclude = new List<string>();
        }
    }
    
    /// <summary>
    /// The Get Web Site Configuration operation response.
    /// </summary>
    public partial class WebSiteGetConfigurationResponse : OperationResponse
    {
        private IDictionary<string, string> _appSettings;
        
        /// <summary>
        /// Optional. A set of name/value pairs that contain application
        /// settings for a site.
        /// </summary>
        public IDictionary<string, string> AppSettings
        {
            get { return this._appSettings; }
            set { this._appSettings = value; }
        }
        
        private IList<ConnectionStringInfo> _connectionStrings;
        
        /// <summary>
        /// Optional. Contains connection strings for database and other
        /// external resources.
        /// </summary>
        public IList<ConnectionStringInfo> ConnectionStrings
        {
            get { return this._connectionStrings; }
            set { this._connectionStrings = value; }
        }
        
        private IList<string> _defaultDocuments;
        
        /// <summary>
        /// Optional. Contains one or more string elements that list, in order
        /// of preference, the name of the file that a web site returns when
        /// the web site's domain name is requested by itself. For example, if
        /// the default document for http://contoso.com is default.htm, the
        /// page http://www.contoso.com/default.htm is returned when the
        /// browser is pointed to http://www.contoso.com.
        /// </summary>
        public IList<string> DefaultDocuments
        {
            get { return this._defaultDocuments; }
            set { this._defaultDocuments = value; }
        }
        
        private bool? _detailedErrorLoggingEnabled;
        
        /// <summary>
        /// Optional. True if detailed error logging is enabled; otherwise,
        /// false.
        /// </summary>
        public bool? DetailedErrorLoggingEnabled
        {
            get { return this._detailedErrorLoggingEnabled; }
            set { this._detailedErrorLoggingEnabled = value; }
        }
        
        private string _documentRoot;
        
        /// <summary>
        /// Optional. The document root.
        /// </summary>
        public string DocumentRoot
        {
            get { return this._documentRoot; }
            set { this._documentRoot = value; }
        }
        
        private IList<WebSiteGetConfigurationResponse.HandlerMapping> _handlerMappings;
        
        /// <summary>
        /// Optional. Specifies custom executable programs for handling
        /// requests for specific file name extensions.
        /// </summary>
        public IList<WebSiteGetConfigurationResponse.HandlerMapping> HandlerMappings
        {
            get { return this._handlerMappings; }
            set { this._handlerMappings = value; }
        }
        
        private bool? _httpLoggingEnabled;
        
        /// <summary>
        /// Optional. True if HTTP error logging is enabled; otherwise, false.
        /// </summary>
        public bool? HttpLoggingEnabled
        {
            get { return this._httpLoggingEnabled; }
            set { this._httpLoggingEnabled = value; }
        }
        
        private int? _logsDirectorySizeLimit;
        
        /// <summary>
        /// Optional. The limit of the logs directory.
        /// </summary>
        public int? LogsDirectorySizeLimit
        {
            get { return this._logsDirectorySizeLimit; }
            set { this._logsDirectorySizeLimit = value; }
        }
        
        private Microsoft.Azure.Management.WebSites.Models.ManagedPipelineMode? _managedPipelineMode;
        
        /// <summary>
        /// Optional. Managed pipeline modes.
        /// </summary>
        public Microsoft.Azure.Management.WebSites.Models.ManagedPipelineMode? ManagedPipelineMode
        {
            get { return this._managedPipelineMode; }
            set { this._managedPipelineMode = value; }
        }
        
        private IDictionary<string, string> _metadata;
        
        /// <summary>
        /// Optional. Contains name/value pairs for source control or other
        /// information.
        /// </summary>
        public IDictionary<string, string> Metadata
        {
            get { return this._metadata; }
            set { this._metadata = value; }
        }
        
        private string _netFrameworkVersion;
        
        /// <summary>
        /// Optional. The .NET Framework version. Supported values are v2.0 and
        /// v4.0.
        /// </summary>
        public string NetFrameworkVersion
        {
            get { return this._netFrameworkVersion; }
            set { this._netFrameworkVersion = value; }
        }
        
        private int? _numberOfWorkers;
        
        /// <summary>
        /// Optional. The number of web workers allotted to the web site. If
        /// the site mode is Free, this value is 1. If the site mode is
        /// Shared, this value can range from 1 through 6. If the site mode is
        /// Standard, this value can range from 1 through 10.
        /// </summary>
        public int? NumberOfWorkers
        {
            get { return this._numberOfWorkers; }
            set { this._numberOfWorkers = value; }
        }
        
        private string _phpVersion;
        
        /// <summary>
        /// Optional. Supported values are an empty string (an empty string
        /// disables PHP), 5.3, and 5.4.
        /// </summary>
        public string PhpVersion
        {
            get { return this._phpVersion; }
            set { this._phpVersion = value; }
        }
        
        private string _publishingPassword;
        
        /// <summary>
        /// Optional. Hash value of the password used for publishing the web
        /// site.
        /// </summary>
        public string PublishingPassword
        {
            get { return this._publishingPassword; }
            set { this._publishingPassword = value; }
        }
        
        private string _publishingUserName;
        
        /// <summary>
        /// Optional. The username used for publishing the web site. This is
        /// normally a dollar sign prepended to the web site name (for
        /// example, "$contoso").
        /// </summary>
        public string PublishingUserName
        {
            get { return this._publishingUserName; }
            set { this._publishingUserName = value; }
        }
        
        private bool? _remoteDebuggingEnabled;
        
        /// <summary>
        /// Optional. True remote debugging is enabled; otherwise, false.
        /// </summary>
        public bool? RemoteDebuggingEnabled
        {
            get { return this._remoteDebuggingEnabled; }
            set { this._remoteDebuggingEnabled = value; }
        }
        
        private RemoteDebuggingVersion _remoteDebuggingVersion;
        
        /// <summary>
        /// Optional. True remote debugging version.
        /// </summary>
        public RemoteDebuggingVersion RemoteDebuggingVersion
        {
            get { return this._remoteDebuggingVersion; }
            set { this._remoteDebuggingVersion = value; }
        }
        
        private bool? _requestTracingEnabled;
        
        /// <summary>
        /// Optional. True if request tracing is enabled; otherwise, false.
        /// </summary>
        public bool? RequestTracingEnabled
        {
            get { return this._requestTracingEnabled; }
            set { this._requestTracingEnabled = value; }
        }
        
        private System.DateTime? _requestTracingExpirationTime;
        
        /// <summary>
        /// Optional. Time remaining until request tracing expires.
        /// </summary>
        public System.DateTime? RequestTracingExpirationTime
        {
            get { return this._requestTracingExpirationTime; }
            set { this._requestTracingExpirationTime = value; }
        }
        
        private string _scmType;
        
        /// <summary>
        /// Optional. The source control method that the web site is using (for
        /// example, Local Git). If deployment from source control has not
        /// been set up for the web site, this value is None.
        /// </summary>
        public string ScmType
        {
            get { return this._scmType; }
            set { this._scmType = value; }
        }
        
        private bool? _use32BitWorkerProcess;
        
        /// <summary>
        /// Optional. True if 32-bit mode is enabled; otherwise, false.
        /// </summary>
        public bool? Use32BitWorkerProcess
        {
            get { return this._use32BitWorkerProcess; }
            set { this._use32BitWorkerProcess = value; }
        }
        
        private bool? _webSocketsEnabled;
        
        /// <summary>
        /// Optional. True if Web Sockets are enabled; otherwise, false.
        /// </summary>
        public bool? WebSocketsEnabled
        {
            get { return this._webSocketsEnabled; }
            set { this._webSocketsEnabled = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetConfigurationResponse
        /// class.
        /// </summary>
        public WebSiteGetConfigurationResponse()
        {
            this.AppSettings = new Dictionary<string, string>();
            this.ConnectionStrings = new List<ConnectionStringInfo>();
            this.DefaultDocuments = new List<string>();
            this.HandlerMappings = new List<WebSiteGetConfigurationResponse.HandlerMapping>();
            this.Metadata = new Dictionary<string, string>();
        }
        
        /// <summary>
        /// Specifies a custom executable program for handling requests for
        /// specific file name extensions.
        /// </summary>
        public partial class HandlerMapping
        {
            private string _arguments;
            
            /// <summary>
            /// Optional. A string that contains optional arguments for the
            /// script processor specified by the
            /// SiteConfig.HandlerMappings.HandlerMapping.ScriptProcessor
            /// element.
            /// </summary>
            public string Arguments
            {
                get { return this._arguments; }
                set { this._arguments = value; }
            }
            
            private string _extension;
            
            /// <summary>
            /// Optional. A string that specifies the extension of the file
            /// type that the script processor will handle (for example,
            /// *.php).
            /// </summary>
            public string Extension
            {
                get { return this._extension; }
                set { this._extension = value; }
            }
            
            private string _scriptProcessor;
            
            /// <summary>
            /// Optional. The absolute path to the location of the executable
            /// file that will handle the files specified in the
            /// SiteConfig.HandlerMappings.HandlerMapping.Extension element.
            /// </summary>
            public string ScriptProcessor
            {
                get { return this._scriptProcessor; }
                set { this._scriptProcessor = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the HandlerMapping class.
            /// </summary>
            public HandlerMapping()
            {
            }
        }
    }
    
    /// <summary>
    /// The Get Web Site Historical Usage Metrics parameters.
    /// </summary>
    public partial class WebSiteGetHistoricalUsageMetricsParameters
    {
        private System.DateTime? _endTime;
        
        /// <summary>
        /// Optional. The ending time of the metrics to return. If this
        /// parameter is not specified, the current time is used.
        /// </summary>
        public System.DateTime? EndTime
        {
            get { return this._endTime; }
            set { this._endTime = value; }
        }
        
        private bool _includeInstanceBreakdown;
        
        /// <summary>
        /// Optional. Flag which specifies if the metrics for each machine
        /// instance should be included. For sites that run on more than one
        /// machine this could be useful to identify a bad machine.
        /// </summary>
        public bool IncludeInstanceBreakdown
        {
            get { return this._includeInstanceBreakdown; }
            set { this._includeInstanceBreakdown = value; }
        }
        
        private IList<string> _metricNames;
        
        /// <summary>
        /// Optional. Specifies a comma-separated list of the names of the
        /// metrics to return. If the names parameter is not specified, then
        /// all available metrics are returned.
        /// </summary>
        public IList<string> MetricNames
        {
            get { return this._metricNames; }
            set { this._metricNames = value; }
        }
        
        private bool _slotView;
        
        /// <summary>
        /// Optional. Flag which specifies if the metrics returned should
        /// reflect slot swaps. Let's take for example following case: if
        /// production slot has hostname www.contos.com and take traffic for
        /// 12 hours and later is swapped with staging slot. Getting metrics
        /// with SlotView=false will reflect the swap - e.g. there will be a
        /// increase on the staging slot metrics after it goes to
        /// production.If SlotView=true is used it will show the metrics for
        /// the www.contoso.com regardless which slot was serving at the
        /// moment.
        /// </summary>
        public bool SlotView
        {
            get { return this._slotView; }
            set { this._slotView = value; }
        }
        
        private System.DateTime? _startTime;
        
        /// <summary>
        /// Optional. The starting time of the metrics to return. If this
        /// parameter is not specified, the beginning of the current hour is
        /// used.
        /// </summary>
        public System.DateTime? StartTime
        {
            get { return this._startTime; }
            set { this._startTime = value; }
        }
        
        private string _timeGrain;
        
        /// <summary>
        /// Optional. The grain at which the metrics are returned. Supported
        /// values are PT1M (minute), PT1H (hour), P1D (day).
        /// </summary>
        public string TimeGrain
        {
            get { return this._timeGrain; }
            set { this._timeGrain = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSiteGetHistoricalUsageMetricsParameters class.
        /// </summary>
        public WebSiteGetHistoricalUsageMetricsParameters()
        {
            this.MetricNames = new List<string>();
        }
    }
    
    /// <summary>
    /// The Get Web Site Historical Usage Metrics operation response.
    /// </summary>
    public partial class WebSiteGetHistoricalUsageMetricsResponse : OperationResponse, IEnumerable<HistoricalUsageMetric>
    {
        private IList<HistoricalUsageMetric> _usageMetrics;
        
        /// <summary>
        /// Optional. Historical metric snapshots for the web site.
        /// </summary>
        public IList<HistoricalUsageMetric> UsageMetrics
        {
            get { return this._usageMetrics; }
            set { this._usageMetrics = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSiteGetHistoricalUsageMetricsResponse class.
        /// </summary>
        public WebSiteGetHistoricalUsageMetricsResponse()
        {
            this.UsageMetrics = new List<HistoricalUsageMetric>();
        }
        
        /// <summary>
        /// Gets the sequence of UsageMetrics.
        /// </summary>
        public IEnumerator<HistoricalUsageMetric> GetEnumerator()
        {
            return this.UsageMetrics.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of UsageMetrics.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// The Get Web Site operation parameters.
    /// </summary>
    public partial class WebSiteGetParameters
    {
        private IList<string> _propertiesToInclude;
        
        /// <summary>
        /// Optional. Specifies a list of the names of any addtional parameters
        /// to return.
        /// </summary>
        public IList<string> PropertiesToInclude
        {
            get { return this._propertiesToInclude; }
            set { this._propertiesToInclude = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetParameters class.
        /// </summary>
        public WebSiteGetParameters()
        {
            this.PropertiesToInclude = new List<string>();
        }
    }
    
    /// <summary>
    /// The Get Web Site Publish Profile operation response.
    /// </summary>
    public partial class WebSiteGetPublishProfileResponse : OperationResponse, IEnumerable<WebSiteGetPublishProfileResponse.PublishProfile>
    {
        private IList<WebSiteGetPublishProfileResponse.PublishProfile> _publishProfiles;
        
        /// <summary>
        /// Optional. Contains one or more publish profiles.
        /// </summary>
        public IList<WebSiteGetPublishProfileResponse.PublishProfile> PublishProfiles
        {
            get { return this._publishProfiles; }
            set { this._publishProfiles = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetPublishProfileResponse
        /// class.
        /// </summary>
        public WebSiteGetPublishProfileResponse()
        {
            this.PublishProfiles = new List<WebSiteGetPublishProfileResponse.PublishProfile>();
        }
        
        /// <summary>
        /// Gets the sequence of PublishProfiles.
        /// </summary>
        public IEnumerator<WebSiteGetPublishProfileResponse.PublishProfile> GetEnumerator()
        {
            return this.PublishProfiles.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of PublishProfiles.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// Contains attributes that contain information for a single database
        /// connection.
        /// </summary>
        public partial class Database
        {
            private string _connectionString;
            
            /// <summary>
            /// Optional. Contains a database connection string.
            /// </summary>
            public string ConnectionString
            {
                get { return this._connectionString; }
                set { this._connectionString = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// Optional. Contains the friendly name of the connection string.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private string _providerName;
            
            /// <summary>
            /// Optional. Contains the type of database provider (for example,
            /// "SQL" or "MySQL").
            /// </summary>
            public string ProviderName
            {
                get { return this._providerName; }
                set { this._providerName = value; }
            }
            
            private string _type;
            
            /// <summary>
            /// Optional.
            /// </summary>
            public string Type
            {
                get { return this._type; }
                set { this._type = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the Database class.
            /// </summary>
            public Database()
            {
            }
        }
        
        /// <summary>
        /// Contains attributes that hold publish profile values.
        /// </summary>
        public partial class PublishProfile
        {
            private Uri _controlPanelUri;
            
            /// <summary>
            /// Optional. The URL of the control panel for the web site.
            /// </summary>
            public Uri ControlPanelUri
            {
                get { return this._controlPanelUri; }
                set { this._controlPanelUri = value; }
            }
            
            private IList<WebSiteGetPublishProfileResponse.Database> _databases;
            
            /// <summary>
            /// Optional. Contains connection information for the databases
            /// used by the web site application.
            /// </summary>
            public IList<WebSiteGetPublishProfileResponse.Database> Databases
            {
                get { return this._databases; }
                set { this._databases = value; }
            }
            
            private Uri _destinationAppUri;
            
            /// <summary>
            /// Optional. The URL of the website that will be published to.
            /// </summary>
            public Uri DestinationAppUri
            {
                get { return this._destinationAppUri; }
                set { this._destinationAppUri = value; }
            }
            
            private bool _ftpPassiveMode;
            
            /// <summary>
            /// Optional. True or False depending on whether FTP passive mode
            /// is being used. This attribute applies only if publishMethod is
            /// set to FTP.
            /// </summary>
            public bool FtpPassiveMode
            {
                get { return this._ftpPassiveMode; }
                set { this._ftpPassiveMode = value; }
            }
            
            private Uri _hostingProviderForumUri;
            
            /// <summary>
            /// Optional. The URL of the forum of the hosting provider.
            /// </summary>
            public Uri HostingProviderForumUri
            {
                get { return this._hostingProviderForumUri; }
                set { this._hostingProviderForumUri = value; }
            }
            
            private string _mSDeploySite;
            
            /// <summary>
            /// Optional. The name of the site that will be published to. This
            /// attribute applies only if publishMethod is set to MSDeploy.
            /// </summary>
            public string MSDeploySite
            {
                get { return this._mSDeploySite; }
                set { this._mSDeploySite = value; }
            }
            
            private string _mySqlConnectionString;
            
            /// <summary>
            /// Optional. The MySQL database connection string for the web site
            /// application, if the web site connects to a MySQL database.
            /// </summary>
            public string MySqlConnectionString
            {
                get { return this._mySqlConnectionString; }
                set { this._mySqlConnectionString = value; }
            }
            
            private string _profileName;
            
            /// <summary>
            /// Optional. The unique name of the publish profile.
            /// </summary>
            public string ProfileName
            {
                get { return this._profileName; }
                set { this._profileName = value; }
            }
            
            private string _publishMethod;
            
            /// <summary>
            /// Optional. The publish method, such as MSDeploy or FTP.
            /// </summary>
            public string PublishMethod
            {
                get { return this._publishMethod; }
                set { this._publishMethod = value; }
            }
            
            private string _publishUrl;
            
            /// <summary>
            /// Optional. The URL to which content will be uploaded.
            /// </summary>
            public string PublishUrl
            {
                get { return this._publishUrl; }
                set { this._publishUrl = value; }
            }
            
            private string _sqlServerConnectionString;
            
            /// <summary>
            /// Optional. The SQL Server database connection string for the web
            /// site application, if the web site connects to a SQL Server
            /// database.
            /// </summary>
            public string SqlServerConnectionString
            {
                get { return this._sqlServerConnectionString; }
                set { this._sqlServerConnectionString = value; }
            }
            
            private string _userName;
            
            /// <summary>
            /// Optional. The name for the identity that will be used for
            /// publishing.
            /// </summary>
            public string UserName
            {
                get { return this._userName; }
                set { this._userName = value; }
            }
            
            private string _userPassword;
            
            /// <summary>
            /// Optional. Hash value of the password that will be used for
            /// publishing.
            /// </summary>
            public string UserPassword
            {
                get { return this._userPassword; }
                set { this._userPassword = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the PublishProfile class.
            /// </summary>
            public PublishProfile()
            {
                this.Databases = new List<WebSiteGetPublishProfileResponse.Database>();
            }
        }
    }
    
    /// <summary>
    /// The Get Web Site Repository operation response.
    /// </summary>
    public partial class WebSiteGetRepositoryResponse : OperationResponse
    {
        private Uri _uri;
        
        /// <summary>
        /// Optional. Contains the URI of the web site repository.
        /// </summary>
        public Uri Uri
        {
            get { return this._uri; }
            set { this._uri = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetRepositoryResponse
        /// class.
        /// </summary>
        public WebSiteGetRepositoryResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get Web Site Details operation response.
    /// </summary>
    public partial class WebSiteGetResponse : OperationResponse
    {
        private WebSite _webSite;
        
        /// <summary>
        /// Optional. Details for the requested website.
        /// </summary>
        public WebSite WebSite
        {
            get { return this._webSite; }
            set { this._webSite = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetResponse class.
        /// </summary>
        public WebSiteGetResponse()
        {
        }
    }
    
    /// <summary>
    /// The Get Web Site Usage Metrics operation response.
    /// </summary>
    public partial class WebSiteGetUsageMetricsResponse : OperationResponse, IEnumerable<WebSiteGetUsageMetricsResponse.UsageMetric>
    {
        private IList<WebSiteGetUsageMetricsResponse.UsageMetric> _usageMetrics;
        
        /// <summary>
        /// Optional. The usage metrics for the web site.
        /// </summary>
        public IList<WebSiteGetUsageMetricsResponse.UsageMetric> UsageMetrics
        {
            get { return this._usageMetrics; }
            set { this._usageMetrics = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteGetUsageMetricsResponse
        /// class.
        /// </summary>
        public WebSiteGetUsageMetricsResponse()
        {
            this.UsageMetrics = new List<WebSiteGetUsageMetricsResponse.UsageMetric>();
        }
        
        /// <summary>
        /// Gets the sequence of UsageMetrics.
        /// </summary>
        public IEnumerator<WebSiteGetUsageMetricsResponse.UsageMetric> GetEnumerator()
        {
            return this.UsageMetrics.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of UsageMetrics.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// A specific usage metric.
        /// </summary>
        public partial class UsageMetric
        {
            private string _currentValue;
            
            /// <summary>
            /// Optional. The current value of the metric specified, expressed
            /// in terms of the measurement specified by the Unit element.
            /// </summary>
            public string CurrentValue
            {
                get { return this._currentValue; }
                set { this._currentValue = value; }
            }
            
            private string _displayName;
            
            /// <summary>
            /// Optional. The display name of the metric (includes spaces).
            /// </summary>
            public string DisplayName
            {
                get { return this._displayName; }
                set { this._displayName = value; }
            }
            
            private string _limit;
            
            /// <summary>
            /// Optional. The maximum point that the given metric can reach.
            /// The limit resets at the time specified by the NextResetTime
            /// element. If the limit is reached before the reset time, the
            /// site will be stopped. A value of -1 means unlimited. Resources
            /// with limits typically include CPU Time, Memory Usage, and File
            /// System Storage. Important: Site level Limits information is
            /// only meaningful for Shared and Standard web sites. For free
            /// web sites, limits are enforced at the webspace level.
            /// </summary>
            public string Limit
            {
                get { return this._limit; }
                set { this._limit = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// Optional. The name of the metric, without spaces. The value is
            /// usually the same as that of the ResourceName element.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private DateTime _nextResetTime;
            
            /// <summary>
            /// Optional. The time at which the metric will be reset.
            /// </summary>
            public DateTime NextResetTime
            {
                get { return this._nextResetTime; }
                set { this._nextResetTime = value; }
            }
            
            private string _resourceName;
            
            /// <summary>
            /// Optional. The name of the resource being measured.
            /// </summary>
            public string ResourceName
            {
                get { return this._resourceName; }
                set { this._resourceName = value; }
            }
            
            private string _unit;
            
            /// <summary>
            /// Optional. The unit of measure for the given metric.
            /// </summary>
            public string Unit
            {
                get { return this._unit; }
                set { this._unit = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the UsageMetric class.
            /// </summary>
            public UsageMetric()
            {
            }
        }
    }
    
    /// <summary>
    /// The List Web Sites operation parameters.
    /// </summary>
    public partial class WebSiteListParameters
    {
        private IList<string> _propertiesToInclude;
        
        /// <summary>
        /// Optional. Specifies a list of the names of any addtional parameters
        /// to return.
        /// </summary>
        public IList<string> PropertiesToInclude
        {
            get { return this._propertiesToInclude; }
            set { this._propertiesToInclude = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteListParameters class.
        /// </summary>
        public WebSiteListParameters()
        {
            this.PropertiesToInclude = new List<string>();
        }
    }
    
    /// <summary>
    /// The List Web Sites operation response.
    /// </summary>
    public partial class WebSiteListResponse : OperationResponse, IEnumerable<WebSite>
    {
        private IList<WebSite> _webSites;
        
        /// <summary>
        /// Optional. The list of websites.
        /// </summary>
        public IList<WebSite> WebSites
        {
            get { return this._webSites; }
            set { this._webSites = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteListResponse class.
        /// </summary>
        public WebSiteListResponse()
        {
            this.WebSites = new List<WebSite>();
        }
        
        /// <summary>
        /// Gets the sequence of WebSites.
        /// </summary>
        public IEnumerator<WebSite> GetEnumerator()
        {
            return this.WebSites.GetEnumerator();
        }
        
        /// <summary>
        /// Gets the sequence of WebSites.
        /// </summary>
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
    }
    
    /// <summary>
    /// List of metadata for the website.
    /// </summary>
    public partial class WebSiteMetadataEnvelope : ResourceBase
    {
        private IList<NameValuePair> _properties;
        
        /// <summary>
        /// Optional. Metadata configuration for a web site.
        /// </summary>
        public IList<NameValuePair> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteMetadataEnvelope class.
        /// </summary>
        public WebSiteMetadataEnvelope()
        {
            this.Properties = new List<NameValuePair>();
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteMetadataEnvelope class
        /// with required arguments.
        /// </summary>
        public WebSiteMetadataEnvelope(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// List of metadata for the website.
    /// </summary>
    public partial class WebSiteMetadataResult : OperationResponse
    {
        private WebSiteMetadataEnvelope _resource;
        
        /// <summary>
        /// Optional. Metadata configuration for a site.
        /// </summary>
        public WebSiteMetadataEnvelope Resource
        {
            get { return this._resource; }
            set { this._resource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteMetadataResult class.
        /// </summary>
        public WebSiteMetadataResult()
        {
        }
    }
    
    /// <summary>
    /// The Update Web Site key value pair operation parameters.
    /// </summary>
    public partial class WebSiteNameValueParameters : ResourceBase
    {
        private IList<NameValuePair> _properties;
        
        /// <summary>
        /// Required. The name value pair parameters for the web site.
        /// </summary>
        public IList<NameValuePair> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteNameValueParameters class.
        /// </summary>
        public WebSiteNameValueParameters()
        {
            this.Properties = new List<NameValuePair>();
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteNameValueParameters class
        /// with required arguments.
        /// </summary>
        public WebSiteNameValueParameters(IList<NameValuePair> properties, string location)
            : this()
        {
            if (properties == null)
            {
                throw new ArgumentNullException("properties");
            }
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Properties = properties;
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Represents the properties of a website.
    /// </summary>
    public partial class WebSiteProperties
    {
        private bool _adminEnabled;
        
        /// <summary>
        /// Optional. Read-only. This value is always true.
        /// </summary>
        public bool AdminEnabled
        {
            get { return this._adminEnabled; }
            set { this._adminEnabled = value; }
        }
        
        private WebSpaceAvailabilityState _availabilityState;
        
        /// <summary>
        /// Optional. The state of the availability of management information
        /// for the site. Possible values are Normal or Limited. Normal means
        /// that the site is running correctly and that management information
        /// for the site is available. Limited means that only partial
        /// management information for the site is available and that detailed
        /// site information is unavailable.
        /// </summary>
        public WebSpaceAvailabilityState AvailabilityState
        {
            get { return this._availabilityState; }
            set { this._availabilityState = value; }
        }
        
        private bool _enabled;
        
        /// <summary>
        /// Optional. true if the site is enabled; otherwise, false. Setting
        /// this value to false disables the site (takes the site off line).
        /// </summary>
        public bool Enabled
        {
            get { return this._enabled; }
            set { this._enabled = value; }
        }
        
        private IList<string> _enabledHostNames;
        
        /// <summary>
        /// Optional. An array of strings that contains enabled hostnames for
        /// the site. By default, these are [SiteName].azurewebsites.net and
        /// [SiteName].scm.azurewebsites.net.
        /// </summary>
        public IList<string> EnabledHostNames
        {
            get { return this._enabledHostNames; }
            set { this._enabledHostNames = value; }
        }
        
        private IList<string> _hostNames;
        
        /// <summary>
        /// Optional. An array of strings that contains the public hostnames
        /// for the site, including custom domains. Important: When you add a
        /// custom domain in a PUT operation, be sure to include every
        /// hostname that you want for the web site. To delete a custom domain
        /// name in a PUT operation, include all of the hostnames for the site
        /// that you want to keep, but leave out the one that you wangt to
        /// delete.
        /// </summary>
        public IList<string> HostNames
        {
            get { return this._hostNames; }
            set { this._hostNames = value; }
        }
        
        private IList<WebSiteProperties.WebSiteHostNameSslState> _hostNameSslStates;
        
        /// <summary>
        /// Optional. SSL states bound to the website.
        /// </summary>
        public IList<WebSiteProperties.WebSiteHostNameSslState> HostNameSslStates
        {
            get { return this._hostNameSslStates; }
            set { this._hostNameSslStates = value; }
        }
        
        private DateTime _lastModifiedTimeUtc;
        
        /// <summary>
        /// Optional. A dateTime value that contains, in Coordinated Universal
        /// Time, the last time the web site was modified.
        /// </summary>
        public DateTime LastModifiedTimeUtc
        {
            get { return this._lastModifiedTimeUtc; }
            set { this._lastModifiedTimeUtc = value; }
        }
        
        private WebSiteProperties.SiteProperties _properties;
        
        /// <summary>
        /// Optional. Contains AppSettings, Metadata, and Properties for a site.
        /// </summary>
        public WebSiteProperties.SiteProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        private string _provisioningState;
        
        /// <summary>
        /// Optional. Gets or sets resource provisioning state.
        /// </summary>
        public string ProvisioningState
        {
            get { return this._provisioningState; }
            set { this._provisioningState = value; }
        }
        
        private string _repositorySiteName;
        
        /// <summary>
        /// Optional. The name of the repository web site.
        /// </summary>
        public string RepositorySiteName
        {
            get { return this._repositorySiteName; }
            set { this._repositorySiteName = value; }
        }
        
        private WebSiteRuntimeAvailabilityState _runtimeAvailabilityState;
        
        /// <summary>
        /// Optional. Possible values are Normal, Degraded, or NotAvailable.
        /// Normal: the web site is running correctly. Degraded: the web site
        /// is running temporarily in a degraded mode (typically with less
        /// memory and a shared instance.) Not Available: due to an unexpected
        /// issue, the site has been excluded from provisioning. This
        /// typically occurs only for free sites.
        /// </summary>
        public WebSiteRuntimeAvailabilityState RuntimeAvailabilityState
        {
            get { return this._runtimeAvailabilityState; }
            set { this._runtimeAvailabilityState = value; }
        }
        
        private string _serverFarm;
        
        /// <summary>
        /// Optional. Name of a Web Hosting Plan (Server Farm) that this site
        /// belongs to.
        /// </summary>
        public string ServerFarm
        {
            get { return this._serverFarm; }
            set { this._serverFarm = value; }
        }
        
        private SkuOptions _sku;
        
        /// <summary>
        /// Optional. SKU of a Web Hosting Plan (Server Farm) that this site
        /// belongs to.
        /// </summary>
        public SkuOptions Sku
        {
            get { return this._sku; }
            set { this._sku = value; }
        }
        
        private WebSiteState _state;
        
        /// <summary>
        /// Optional. A string that describes the state of the web site.
        /// Possible values are Stopped or Running.
        /// </summary>
        public WebSiteState State
        {
            get { return this._state; }
            set { this._state = value; }
        }
        
        private IList<string> _trafficManagerHostNames;
        
        /// <summary>
        /// Optional. An array of strings that contain the traffic manager
        /// hostnames.
        /// </summary>
        public IList<string> TrafficManagerHostNames
        {
            get { return this._trafficManagerHostNames; }
            set { this._trafficManagerHostNames = value; }
        }
        
        private Uri _uri;
        
        /// <summary>
        /// Optional. Direct URL to the web site endpoint on Windows Azure Web
        /// Sites, including the subscription ID, webspace name, and site name.
        /// </summary>
        public Uri Uri
        {
            get { return this._uri; }
            set { this._uri = value; }
        }
        
        private WebSiteUsageState _usageState;
        
        /// <summary>
        /// Optional. Possible values are Normal or Exceeded. If any quota is
        /// exceeded, the UsageState value changes to Exceeded and the site
        /// goes off line.
        /// </summary>
        public WebSiteUsageState UsageState
        {
            get { return this._usageState; }
            set { this._usageState = value; }
        }
        
        private string _webSpace;
        
        /// <summary>
        /// Optional. The name of the webspace in which the web site is
        /// located. This property is read-only.
        /// </summary>
        public string WebSpace
        {
            get { return this._webSpace; }
            set { this._webSpace = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteProperties class.
        /// </summary>
        public WebSiteProperties()
        {
            this.EnabledHostNames = new List<string>();
            this.HostNames = new List<string>();
            this.HostNameSslStates = new List<WebSiteProperties.WebSiteHostNameSslState>();
            this.TrafficManagerHostNames = new List<string>();
        }
        
        public partial class SiteProperties
        {
            private IDictionary<string, string> _appSettings;
            
            /// <summary>
            /// Optional. A set of name/value pairs that contain application
            /// settings for a site.
            /// </summary>
            public IDictionary<string, string> AppSettings
            {
                get { return this._appSettings; }
                set { this._appSettings = value; }
            }
            
            private IDictionary<string, string> _metadata;
            
            /// <summary>
            /// Optional. A set of name/value pairs that contain metadata
            /// information for a site.
            /// </summary>
            public IDictionary<string, string> Metadata
            {
                get { return this._metadata; }
                set { this._metadata = value; }
            }
            
            private IDictionary<string, string> _properties;
            
            /// <summary>
            /// Optional. A set of name/value pairs that contain properties for
            /// a site.
            /// </summary>
            public IDictionary<string, string> Properties
            {
                get { return this._properties; }
                set { this._properties = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the SiteProperties class.
            /// </summary>
            public SiteProperties()
            {
                this.AppSettings = new Dictionary<string, string>();
                this.Metadata = new Dictionary<string, string>();
                this.Properties = new Dictionary<string, string>();
            }
        }
        
        /// <summary>
        /// SSL states bound to a website.
        /// </summary>
        public partial class WebSiteHostNameSslState
        {
            private string _ipBasedSslResult;
            
            /// <summary>
            /// Optional. The IP based SSL result
            /// </summary>
            public string IpBasedSslResult
            {
                get { return this._ipBasedSslResult; }
                set { this._ipBasedSslResult = value; }
            }
            
            private string _name;
            
            /// <summary>
            /// Optional. The URL of the web site.
            /// </summary>
            public string Name
            {
                get { return this._name; }
                set { this._name = value; }
            }
            
            private WebSiteSslState _sslState;
            
            /// <summary>
            /// Optional. The SSL state. Possible values are Disabled,
            /// SniEnabled, or IpBasedEnabled.
            /// </summary>
            public WebSiteSslState SslState
            {
                get { return this._sslState; }
                set { this._sslState = value; }
            }
            
            private string _thumbprint;
            
            /// <summary>
            /// Optional. A string that contains the thumbprint of the SSL
            /// certificate.
            /// </summary>
            public string Thumbprint
            {
                get { return this._thumbprint; }
                set { this._thumbprint = value; }
            }
            
            private bool? _toUpdate;
            
            /// <summary>
            /// Optional. Boolean value indicating if it should be updated
            /// </summary>
            public bool? ToUpdate
            {
                get { return this._toUpdate; }
                set { this._toUpdate = value; }
            }
            
            private bool? _toUpdateIpBasedSsl;
            
            /// <summary>
            /// Optional. Boolean value indicating if it should be updated
            /// based on ssl
            /// </summary>
            public bool? ToUpdateIpBasedSsl
            {
                get { return this._toUpdateIpBasedSsl; }
                set { this._toUpdateIpBasedSsl = value; }
            }
            
            private string _virtualIP;
            
            /// <summary>
            /// Optional. String. The IP address assigned to the hostname if
            /// the hostname uses IP SSL.
            /// </summary>
            public string VirtualIP
            {
                get { return this._virtualIP; }
                set { this._virtualIP = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the WebSiteHostNameSslState class.
            /// </summary>
            public WebSiteHostNameSslState()
            {
            }
        }
    }
    
    /// <summary>
    /// Publishing credentials for the website.
    /// </summary>
    public partial class WebSitePublishingCredentialsEnvelope : ResourceBase
    {
        private PublishingCredentials _properties;
        
        /// <summary>
        /// Optional. Publishing credentials for a web site.
        /// </summary>
        public PublishingCredentials Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSitePublishingCredentialsEnvelope class.
        /// </summary>
        public WebSitePublishingCredentialsEnvelope()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSitePublishingCredentialsEnvelope class with required arguments.
        /// </summary>
        public WebSitePublishingCredentialsEnvelope(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Publishing credentials for the website.
    /// </summary>
    public partial class WebSitePublishingCredentialsResult : OperationResponse
    {
        private WebSitePublishingCredentialsEnvelope _resource;
        
        /// <summary>
        /// Optional. Publishing credentials for a site.
        /// </summary>
        public WebSitePublishingCredentialsEnvelope Resource
        {
            get { return this._resource; }
            set { this._resource = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSitePublishingCredentialsResult class.
        /// </summary>
        public WebSitePublishingCredentialsResult()
        {
        }
    }
    
    /// <summary>
    /// List of backups for the website.
    /// </summary>
    public partial class WebSiteRestoreDiscover : ResourceBase
    {
        private WebSiteRestoreDiscoverProperties _properties;
        
        /// <summary>
        /// Optional. Backups for a web site.
        /// </summary>
        public WebSiteRestoreDiscoverProperties Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteRestoreDiscover class.
        /// </summary>
        public WebSiteRestoreDiscover()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteRestoreDiscover class with
        /// required arguments.
        /// </summary>
        public WebSiteRestoreDiscover(string location)
            : this()
        {
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Location = location;
        }
    }
    
    /// <summary>
    /// The information gathered about a backup storaged in a storage account.
    /// </summary>
    public partial class WebSiteRestoreDiscoverProperties
    {
        private bool _adjustConnectionStrings;
        
        /// <summary>
        /// Optional. If the restore operation also restores a database along
        /// with the website and the database is on a different server than
        /// when the original site h
        /// </summary>
        public bool AdjustConnectionStrings
        {
            get { return this._adjustConnectionStrings; }
            set { this._adjustConnectionStrings = value; }
        }
        
        private string _blobName;
        
        /// <summary>
        /// Optional. The blob name where the backup is stored, e.g.
        /// mysite1_20140506.zip
        /// </summary>
        public string BlobName
        {
            get { return this._blobName; }
            set { this._blobName = value; }
        }
        
        private IList<DatabaseBackupSetting> _databases;
        
        /// <summary>
        /// Optional. Database settings for backup.
        /// </summary>
        public IList<DatabaseBackupSetting> Databases
        {
            get { return this._databases; }
            set { this._databases = value; }
        }
        
        private bool _ignoreConflictingHostNames;
        
        /// <summary>
        /// Optional. When restoring a site, custom domains might conflict with
        /// other site in the same datacenter. If this value is true, such
        /// hostnames will be ignored during restore. If this is false, the
        /// restore operation will fail on such conflict.
        /// </summary>
        public bool IgnoreConflictingHostNames
        {
            get { return this._ignoreConflictingHostNames; }
            set { this._ignoreConflictingHostNames = value; }
        }
        
        private bool _overwrite;
        
        /// <summary>
        /// Optional. True if the restore operation will be used for overwrite
        /// an existing site; false otherwise.
        /// </summary>
        public bool Overwrite
        {
            get { return this._overwrite; }
            set { this._overwrite = value; }
        }
        
        private string _storageAccountUrl;
        
        /// <summary>
        /// Optional. SAS URL for a container in a storage account. E.g.
        /// https://NAME.blob.core.windows.net/CONTAINERNAME/?sv=2012-02-12&st=2013-12-05T19%3A30%3A45Z&se=2017-12-04T19%3A30%3A45Z&sr=c&sp=rwdl&sig=abcdefABCDEFabcdef0123456789
        /// </summary>
        public string StorageAccountUrl
        {
            get { return this._storageAccountUrl; }
            set { this._storageAccountUrl = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteRestoreDiscoverProperties
        /// class.
        /// </summary>
        public WebSiteRestoreDiscoverProperties()
        {
            this.Databases = new List<DatabaseBackupSetting>();
        }
    }
    
    /// <summary>
    /// The information gathered about a backup storaged in a storage account.
    /// </summary>
    public partial class WebSiteRestoreDiscoverResponse : OperationResponse
    {
        private WebSiteRestoreDiscover _envelope;
        
        /// <summary>
        /// Optional. OperationId for the restore operation.
        /// </summary>
        public WebSiteRestoreDiscover Envelope
        {
            get { return this._envelope; }
            set { this._envelope = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteRestoreDiscoverResponse
        /// class.
        /// </summary>
        public WebSiteRestoreDiscoverResponse()
        {
        }
    }
    
    /// <summary>
    /// Restore operation information.
    /// </summary>
    public partial class WebSiteRestoreResponse : OperationResponse
    {
        private string _operationId;
        
        /// <summary>
        /// Optional. OperationId for the restore operation.
        /// </summary>
        public string OperationId
        {
            get { return this._operationId; }
            set { this._operationId = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteRestoreResponse class.
        /// </summary>
        public WebSiteRestoreResponse()
        {
        }
    }
    
    /// <summary>
    /// The runtime availability of a website.
    /// </summary>
    public enum WebSiteRuntimeAvailabilityState
    {
        /// <summary>
        /// The web site is running correctly.
        /// </summary>
        Normal = 0,
        
        /// <summary>
        /// The web site is running temporarily in a degraded mode (typically
        /// with less memory and a shared instance).
        /// </summary>
        Degraded = 1,
        
        /// <summary>
        /// Due to an unexpected issue, the site has been excluded from
        /// provisioning. This typically occurs only for free sites.
        /// </summary>
        NotAvailable = 2,
    }
    
    /// <summary>
    /// A web site's SSL state.
    /// </summary>
    public enum WebSiteSslState
    {
        Disabled = 0,
        
        SniEnabled = 1,
        
        IpBasedEnabled = 2,
    }
    
    /// <summary>
    /// The state of the website.
    /// </summary>
    public enum WebSiteState
    {
        Stopped = 0,
        
        Running = 1,
    }
    
    /// <summary>
    /// The Update Web Site Configuration parameters.
    /// </summary>
    public partial class WebSiteUpdateConfigurationParameters
    {
        private bool? _alwaysOn;
        
        /// <summary>
        /// Optional. True if Always On functionality is enabled for the site;
        /// otherwise, false.
        /// </summary>
        public bool? AlwaysOn
        {
            get { return this._alwaysOn; }
            set { this._alwaysOn = value; }
        }
        
        private IDictionary<string, string> _appSettings;
        
        /// <summary>
        /// Optional. A set of name/value pairs that contain application
        /// settings for a site.
        /// </summary>
        public IDictionary<string, string> AppSettings
        {
            get { return this._appSettings; }
            set { this._appSettings = value; }
        }
        
        private IList<ConnectionStringInfo> _connectionStrings;
        
        /// <summary>
        /// Optional. Contains connection strings for database and other
        /// external resources.
        /// </summary>
        public IList<ConnectionStringInfo> ConnectionStrings
        {
            get { return this._connectionStrings; }
            set { this._connectionStrings = value; }
        }
        
        private IList<string> _defaultDocuments;
        
        /// <summary>
        /// Optional. Contains one or more string elements that list, in order
        /// of preference, the name of the file that a web site returns when
        /// the web site's domain name is requested by itself. For example, if
        /// the default document for http://contoso.com is default.htm, the
        /// page http://www.contoso.com/default.htm is returned when the
        /// browser is pointed to http://www.contoso.com.
        /// </summary>
        public IList<string> DefaultDocuments
        {
            get { return this._defaultDocuments; }
            set { this._defaultDocuments = value; }
        }
        
        private bool? _detailedErrorLoggingEnabled;
        
        /// <summary>
        /// Optional. True if detailed error logging is enabled; otherwise,
        /// false.
        /// </summary>
        public bool? DetailedErrorLoggingEnabled
        {
            get { return this._detailedErrorLoggingEnabled; }
            set { this._detailedErrorLoggingEnabled = value; }
        }
        
        private string _documentRoot;
        
        /// <summary>
        /// Optional. The document root.
        /// </summary>
        public string DocumentRoot
        {
            get { return this._documentRoot; }
            set { this._documentRoot = value; }
        }
        
        private IList<WebSiteUpdateConfigurationParameters.HandlerMapping> _handlerMappings;
        
        /// <summary>
        /// Optional. Specifies custom executable programs for handling
        /// requests for specific file name extensions.
        /// </summary>
        public IList<WebSiteUpdateConfigurationParameters.HandlerMapping> HandlerMappings
        {
            get { return this._handlerMappings; }
            set { this._handlerMappings = value; }
        }
        
        private bool? _httpLoggingEnabled;
        
        /// <summary>
        /// Optional. True if HTTP error logging is enabled; otherwise, false.
        /// </summary>
        public bool? HttpLoggingEnabled
        {
            get { return this._httpLoggingEnabled; }
            set { this._httpLoggingEnabled = value; }
        }
        
        private int? _logsDirectorySizeLimit;
        
        /// <summary>
        /// Optional. The limit of the logs directory.
        /// </summary>
        public int? LogsDirectorySizeLimit
        {
            get { return this._logsDirectorySizeLimit; }
            set { this._logsDirectorySizeLimit = value; }
        }
        
        private Microsoft.Azure.Management.WebSites.Models.ManagedPipelineMode? _managedPipelineMode;
        
        /// <summary>
        /// Optional. Managed pipeline modes.
        /// </summary>
        public Microsoft.Azure.Management.WebSites.Models.ManagedPipelineMode? ManagedPipelineMode
        {
            get { return this._managedPipelineMode; }
            set { this._managedPipelineMode = value; }
        }
        
        private IDictionary<string, string> _metadata;
        
        /// <summary>
        /// Optional. Contains name/value pairs for source control or other
        /// information.
        /// </summary>
        public IDictionary<string, string> Metadata
        {
            get { return this._metadata; }
            set { this._metadata = value; }
        }
        
        private string _netFrameworkVersion;
        
        /// <summary>
        /// Optional. The .NET Framework version. Supported values are v2.0,
        /// v4.0 and v4.5.
        /// </summary>
        public string NetFrameworkVersion
        {
            get { return this._netFrameworkVersion; }
            set { this._netFrameworkVersion = value; }
        }
        
        private int? _numberOfWorkers;
        
        /// <summary>
        /// Optional. The number of web workers allotted to the web site. If
        /// the site mode is Free, this value is 1. If the site mode is
        /// Shared, this value can range from 1 through 6. If the site mode is
        /// Standard, this value can range from 1 through 10.
        /// </summary>
        public int? NumberOfWorkers
        {
            get { return this._numberOfWorkers; }
            set { this._numberOfWorkers = value; }
        }
        
        private string _phpVersion;
        
        /// <summary>
        /// Optional. Supported values are an empty string (an empty string
        /// disables PHP), 5.3, and 5.4.
        /// </summary>
        public string PhpVersion
        {
            get { return this._phpVersion; }
            set { this._phpVersion = value; }
        }
        
        private bool? _remoteDebuggingEnabled;
        
        /// <summary>
        /// Optional. True remote debugging is enabled; otherwise, false.
        /// </summary>
        public bool? RemoteDebuggingEnabled
        {
            get { return this._remoteDebuggingEnabled; }
            set { this._remoteDebuggingEnabled = value; }
        }
        
        private RemoteDebuggingVersion _remoteDebuggingVersion;
        
        /// <summary>
        /// Optional. True remote debugging version.
        /// </summary>
        public RemoteDebuggingVersion RemoteDebuggingVersion
        {
            get { return this._remoteDebuggingVersion; }
            set { this._remoteDebuggingVersion = value; }
        }
        
        private bool? _requestTracingEnabled;
        
        /// <summary>
        /// Optional. True if request tracing is enabled; otherwise, false.
        /// </summary>
        public bool? RequestTracingEnabled
        {
            get { return this._requestTracingEnabled; }
            set { this._requestTracingEnabled = value; }
        }
        
        private System.DateTime? _requestTracingExpirationTime;
        
        /// <summary>
        /// Optional. Time remaining until request tracing expires.
        /// </summary>
        public System.DateTime? RequestTracingExpirationTime
        {
            get { return this._requestTracingExpirationTime; }
            set { this._requestTracingExpirationTime = value; }
        }
        
        private string _scmType;
        
        /// <summary>
        /// Optional. The source control method that the web site is using (for
        /// example, Local Git). If deployment from source control has not
        /// been set up for the web site, this value is None.
        /// </summary>
        public string ScmType
        {
            get { return this._scmType; }
            set { this._scmType = value; }
        }
        
        private bool? _use32BitWorkerProcess;
        
        /// <summary>
        /// Optional. True if 32-bit mode is enabled; otherwise, false.
        /// </summary>
        public bool? Use32BitWorkerProcess
        {
            get { return this._use32BitWorkerProcess; }
            set { this._use32BitWorkerProcess = value; }
        }
        
        private bool? _webSocketsEnabled;
        
        /// <summary>
        /// Optional. True if Web Sockets are enabled; otherwise, false.
        /// </summary>
        public bool? WebSocketsEnabled
        {
            get { return this._webSocketsEnabled; }
            set { this._webSocketsEnabled = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSiteUpdateConfigurationParameters class.
        /// </summary>
        public WebSiteUpdateConfigurationParameters()
        {
            // suwatch
            //this.AppSettings = new Dictionary<string, string>();
            //this.ConnectionStrings = new List<ConnectionStringInfo>();
            //this.DefaultDocuments = new List<string>();
            //this.HandlerMappings = new List<WebSiteUpdateConfigurationParameters.HandlerMapping>();
            //this.Metadata = new Dictionary<string, string>();
        }
        
        /// <summary>
        /// Specifies a custom executable program for handling requests for
        /// specific file name extensions.
        /// </summary>
        public partial class HandlerMapping
        {
            private string _arguments;
            
            /// <summary>
            /// Optional. A string that contains optional arguments for the
            /// script processor specified by the
            /// SiteConfig.HandlerMappings.HandlerMapping.ScriptProcessor
            /// element.
            /// </summary>
            public string Arguments
            {
                get { return this._arguments; }
                set { this._arguments = value; }
            }
            
            private string _extension;
            
            /// <summary>
            /// Optional. A string that specifies the extension of the file
            /// type that the script processor will handle (for example,
            /// *.php).
            /// </summary>
            public string Extension
            {
                get { return this._extension; }
                set { this._extension = value; }
            }
            
            private string _scriptProcessor;
            
            /// <summary>
            /// Optional. The absolute path to the location of the executable
            /// file that will handle the files specified in the
            /// SiteConfig.HandlerMappings.HandlerMapping.Extension element.
            /// </summary>
            public string ScriptProcessor
            {
                get { return this._scriptProcessor; }
                set { this._scriptProcessor = value; }
            }
            
            /// <summary>
            /// Initializes a new instance of the HandlerMapping class.
            /// </summary>
            public HandlerMapping()
            {
            }
        }
    }
    
    /// <summary>
    /// The Update Web Site connection strings operation parameters.
    /// </summary>
    public partial class WebSiteUpdateConnectionStringsParameters : ResourceBase
    {
        private IList<ConnectionStringInfo> _properties;
        
        /// <summary>
        /// Required. The connection strings for the web site.
        /// </summary>
        public IList<ConnectionStringInfo> Properties
        {
            get { return this._properties; }
            set { this._properties = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSiteUpdateConnectionStringsParameters class.
        /// </summary>
        public WebSiteUpdateConnectionStringsParameters()
        {
            this.Properties = new List<ConnectionStringInfo>();
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// WebSiteUpdateConnectionStringsParameters class with required
        /// arguments.
        /// </summary>
        public WebSiteUpdateConnectionStringsParameters(IList<ConnectionStringInfo> properties, string location)
            : this()
        {
            if (properties == null)
            {
                throw new ArgumentNullException("properties");
            }
            if (location == null)
            {
                throw new ArgumentNullException("location");
            }
            this.Properties = properties;
            this.Location = location;
        }
    }
    
    /// <summary>
    /// Usage of a website's quota.
    /// </summary>
    public enum WebSiteUsageState
    {
        Normal = 0,
        
        Exceeded = 1,
    }
    
    /// <summary>
    /// The availability of a web space.
    /// </summary>
    public enum WebSpaceAvailabilityState
    {
        Normal = 0,
        
        Limited = 1,
    }
    
    public static partial class WebSpaceNames
    {
        public const string EastUSWebSpace = "eastuswebspace";
        
        public const string WestUSWebSpace = "westuswebspace";
        
        public const string NorthCentralUSWebSpace = "northcentraluswebspace";
        
        public const string NorthEuropeWebSpace = "northeuropewebspace";
        
        public const string WestEuropeWebSpace = "westeuropewebspace";
        
        public const string EastAsiaWebSpace = "eastasiawebspace";
    }
    
    public enum WorkerSizeOptions
    {
        Small = 0,
        
        Medium = 1,
        
        Large = 2,
    }
}

namespace Microsoft.Azure.Management.WebSites
{
    /// <summary>
    /// The Windows Azure Web Sites management API provides a RESTful set of
    /// web services that interact with Windows Azure Web Sites service to
    /// manage your web sites. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Web Sites
    /// service.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    /// more information)
    /// </summary>
    public static partial class WebSiteManagementClientExtensions
    {
        /// <summary>
        /// Begins deleting a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse BeginDeletingResourceGroup(this IWebSiteManagementClient operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteManagementClient)s).BeginDeletingResourceGroupAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begins deleting a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> BeginDeletingResourceGroupAsync(this IWebSiteManagementClient operations, string resourceGroupName)
        {
            return operations.BeginDeletingResourceGroupAsync(resourceGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates or updates the resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// The Create or Update resource group operation response.
        /// </returns>
        public static ResourceGroupCreateOrUpdateResponse CreateOrUpdateResourceGroup(this IWebSiteManagementClient operations, string resourceGroupName, ResourceGroupCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteManagementClient)s).CreateOrUpdateResourceGroupAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates or updates the resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <returns>
        /// The Create or Update resource group operation response.
        /// </returns>
        public static Task<ResourceGroupCreateOrUpdateResponse> CreateOrUpdateResourceGroupAsync(this IWebSiteManagementClient operations, string resourceGroupName, ResourceGroupCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateResourceGroupAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets all resource groups in the subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse GetResourceGroups(this IWebSiteManagementClient operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteManagementClient)s).GetResourceGroupsAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets all resource groups in the subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> GetResourceGroupsAsync(this IWebSiteManagementClient operations)
        {
            return operations.GetResourceGroupsAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Register the resource provider with a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse RegisterResourceProvider(this IWebSiteManagementClient operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteManagementClient)s).RegisterResourceProviderAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Register the resource provider with a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RegisterResourceProviderAsync(this IWebSiteManagementClient operations)
        {
            return operations.RegisterResourceProviderAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Unregister the resource provider with a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UnregisterResourceProvider(this IWebSiteManagementClient operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteManagementClient)s).UnregisterResourceProviderAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Unregister the resource provider with a subscription.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteManagementClient.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UnregisterResourceProviderAsync(this IWebSiteManagementClient operations)
        {
            return operations.UnregisterResourceProviderAsync(CancellationToken.None);
        }
    }
    
    /// <summary>
    /// The Windows Azure Web Sites management API provides a RESTful set of
    /// web services that interact with Windows Azure Web Sites service to
    /// manage your web sites. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Web Sites
    /// service.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    /// more information)
    /// </summary>
    public partial interface IWebSiteManagementClient : IDisposable
    {
        /// <summary>
        /// Gets the API version.
        /// </summary>
        string ApiVersion
        {
            get; 
        }
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        Uri BaseUri
        {
            get; 
        }
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        SubscriptionCloudCredentials Credentials
        {
            get; 
        }
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationInitialTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        int LongRunningOperationRetryTimeout
        {
            get; set; 
        }
        
        /// <summary>
        /// Operations for managing the Web Hosting Plans in a resource group.
        /// Web hosting plans (WHPs) represent a set of features and capacity
        /// that you can share across your web sites. Web hosting plans
        /// support the 4 Azure Web Sites pricing tiers (Free, Shared, Basic,
        /// and Standard) where each tier has its own capabilities and
        /// capacity. Sites in the same subscription, resource group, and
        /// geographic location can share a web hosting plan. All the sites
        /// sharing a web hosting plan can leverage all the capabilities and
        /// features defined by the web hosting plan tier. All web sites
        /// associated with a given web hosting plan run on the resources
        /// defined by the web hosting plan.  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        IWebHostingPlanOperations WebHostingPlans
        {
            get; 
        }
        
        /// <summary>
        /// Operations for managing the web sites in a web space.
        /// </summary>
        IWebSiteOperations WebSites
        {
            get; 
        }
        
        /// <summary>
        /// Begins deleting a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> BeginDeletingResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Creates or updates the resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create or Update resource group operation response.
        /// </returns>
        Task<ResourceGroupCreateOrUpdateResponse> CreateOrUpdateResourceGroupAsync(string resourceGroupName, ResourceGroupCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets all resource groups in the subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> GetResourceGroupsAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Register the resource provider with a subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> RegisterResourceProviderAsync(CancellationToken cancellationToken);
        
        /// <summary>
        /// Unregister the resource provider with a subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UnregisterResourceProviderAsync(CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// The Windows Azure Web Sites management API provides a RESTful set of
    /// web services that interact with Windows Azure Web Sites service to
    /// manage your web sites. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Web Sites
    /// service.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    /// more information)
    /// </summary>
    public partial class WebSiteManagementClient : ServiceClient<WebSiteManagementClient>, IWebSiteManagementClient
    {
        private string _apiVersion;
        
        /// <summary>
        /// Gets the API version.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private int _longRunningOperationInitialTimeout;
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationInitialTimeout
        {
            get { return this._longRunningOperationInitialTimeout; }
            set { this._longRunningOperationInitialTimeout = value; }
        }
        
        private int _longRunningOperationRetryTimeout;
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationRetryTimeout
        {
            get { return this._longRunningOperationRetryTimeout; }
            set { this._longRunningOperationRetryTimeout = value; }
        }
        
        private IWebHostingPlanOperations _webHostingPlans;
        
        /// <summary>
        /// Operations for managing the Web Hosting Plans in a resource group.
        /// Web hosting plans (WHPs) represent a set of features and capacity
        /// that you can share across your web sites. Web hosting plans
        /// support the 4 Azure Web Sites pricing tiers (Free, Shared, Basic,
        /// and Standard) where each tier has its own capabilities and
        /// capacity. Sites in the same subscription, resource group, and
        /// geographic location can share a web hosting plan. All the sites
        /// sharing a web hosting plan can leverage all the capabilities and
        /// features defined by the web hosting plan tier. All web sites
        /// associated with a given web hosting plan run on the resources
        /// defined by the web hosting plan.  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        public virtual IWebHostingPlanOperations WebHostingPlans
        {
            get { return this._webHostingPlans; }
        }
        
        private IWebSiteOperations _webSites;
        
        /// <summary>
        /// Operations for managing the web sites in a web space.
        /// </summary>
        public virtual IWebSiteOperations WebSites
        {
            get { return this._webSites; }
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteManagementClient class.
        /// </summary>
        private WebSiteManagementClient()
            : base()
        {
            this._webHostingPlans = new WebHostingPlanOperations(this);
            this._webSites = new WebSiteOperations(this);
            this._apiVersion = "2014-06-01";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Required. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        public WebSiteManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        public WebSiteManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        private WebSiteManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._webHostingPlans = new WebHostingPlanOperations(this);
            this._webSites = new WebSiteOperations(this);
            this._apiVersion = "2014-06-01";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Required. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public WebSiteManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the WebSiteManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public WebSiteManagementClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// WebSiteManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of WebSiteManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<WebSiteManagementClient> client)
        {
            base.Clone(client);
            
            if (client is WebSiteManagementClient)
            {
                WebSiteManagementClient clonedClient = ((WebSiteManagementClient)client);
                
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                clonedClient._apiVersion = this._apiVersion;
                clonedClient._longRunningOperationInitialTimeout = this._longRunningOperationInitialTimeout;
                clonedClient._longRunningOperationRetryTimeout = this._longRunningOperationRetryTimeout;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
        
        /// <summary>
        /// Begins deleting a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> BeginDeletingResourceGroupAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                Tracing.Enter(invocationId, this, "BeginDeletingResourceGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Credentials.SubscriptionId != null ? this.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates or updates the resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create or Update resource group operation response.
        /// </returns>
        public async Task<ResourceGroupCreateOrUpdateResponse> CreateOrUpdateResourceGroupAsync(string resourceGroupName, ResourceGroupCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateResourceGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Credentials.SubscriptionId != null ? this.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups/" + resourceGroupName.Trim() + "?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject resourceGroupCreateOrUpdateParametersValue = new JObject();
                requestDoc = resourceGroupCreateOrUpdateParametersValue;
                
                resourceGroupCreateOrUpdateParametersValue["location"] = parameters.Location;
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ResourceGroupCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new ResourceGroupCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            result.Name = nameInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets all resource groups in the subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> GetResourceGroupsAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "GetResourceGroupsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Credentials.SubscriptionId != null ? this.Credentials.SubscriptionId.Trim() : "") + "/resourcegroups?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Register the resource provider with a subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RegisterResourceProviderAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "RegisterResourceProviderAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Credentials.SubscriptionId != null ? this.Credentials.SubscriptionId.Trim() : "") + "/providers/Microsoft.Web/register?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Unregister the resource provider with a subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UnregisterResourceProviderAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                Tracing.Enter(invocationId, this, "UnregisterResourceProviderAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Credentials.SubscriptionId != null ? this.Credentials.SubscriptionId.Trim() : "") + "/providers/Microsoft.Web/unregister?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The Windows Azure Web Sites management API provides a RESTful set of
    /// web services that interact with Windows Azure Web Sites service to
    /// manage your web sites. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Web Sites
    /// service.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    /// more information)
    /// </summary>
    public static partial class WebHostingPlanOperationsExtensions
    {
        /// <summary>
        /// Creates a new Web Hosting Plan or updates an existing one.  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebHostingPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the Web Hosting Plan.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Server Farm operation.
        /// </param>
        /// <returns>
        /// The Create Web Hosting Plan operation response.
        /// </returns>
        public static WebHostingPlanCreateOrUpdateResponse CreateOrUpdate(this IWebHostingPlanOperations operations, string resourceGroupName, string webHostingPlanName, WebHostingPlanCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebHostingPlanOperations)s).CreateOrUpdateAsync(resourceGroupName, webHostingPlanName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a new Web Hosting Plan or updates an existing one.  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebHostingPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the Web Hosting Plan.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Server Farm operation.
        /// </param>
        /// <returns>
        /// The Create Web Hosting Plan operation response.
        /// </returns>
        public static Task<WebHostingPlanCreateOrUpdateResponse> CreateOrUpdateAsync(this IWebHostingPlanOperations operations, string resourceGroupName, string webHostingPlanName, WebHostingPlanCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, webHostingPlanName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes a Web Hosting Plan  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebHostingPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the Web Hosting Plan to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IWebHostingPlanOperations operations, string resourceGroupName, string webHostingPlanName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebHostingPlanOperations)s).DeleteAsync(resourceGroupName, webHostingPlanName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes a Web Hosting Plan  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebHostingPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the Web Hosting Plan to delete.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IWebHostingPlanOperations operations, string resourceGroupName, string webHostingPlanName)
        {
            return operations.DeleteAsync(resourceGroupName, webHostingPlanName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets details of an existing Web Hosting Plan  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebHostingPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the Web Hosting Plan.
        /// </param>
        /// <returns>
        /// The Get Web Hosting Plan operation response.
        /// </returns>
        public static WebHostingPlanGetResponse Get(this IWebHostingPlanOperations operations, string resourceGroupName, string webHostingPlanName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebHostingPlanOperations)s).GetAsync(resourceGroupName, webHostingPlanName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets details of an existing Web Hosting Plan  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebHostingPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the Web Hosting Plan.
        /// </param>
        /// <returns>
        /// The Get Web Hosting Plan operation response.
        /// </returns>
        public static Task<WebHostingPlanGetResponse> GetAsync(this IWebHostingPlanOperations operations, string resourceGroupName, string webHostingPlanName)
        {
            return operations.GetAsync(resourceGroupName, webHostingPlanName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebHostingPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the web hosting plan.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Historical Usage Metrics
        /// Web hosting plan operation.
        /// </param>
        /// <returns>
        /// The Get Historical Usage Metrics Web hosting plan operation
        /// response.
        /// </returns>
        public static WebHostingPlanGetHistoricalUsageMetricsResponse GetHistoricalUsageMetrics(this IWebHostingPlanOperations operations, string resourceGroupName, string webHostingPlanName, WebHostingPlanGetHistoricalUsageMetricsParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebHostingPlanOperations)s).GetHistoricalUsageMetricsAsync(resourceGroupName, webHostingPlanName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebHostingPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the web hosting plan.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Historical Usage Metrics
        /// Web hosting plan operation.
        /// </param>
        /// <returns>
        /// The Get Historical Usage Metrics Web hosting plan operation
        /// response.
        /// </returns>
        public static Task<WebHostingPlanGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(this IWebHostingPlanOperations operations, string resourceGroupName, string webHostingPlanName, WebHostingPlanGetHistoricalUsageMetricsParameters parameters)
        {
            return operations.GetHistoricalUsageMetricsAsync(resourceGroupName, webHostingPlanName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets all Web Hosting Plans in a current subscription and Resource
        /// Group.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebHostingPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// The List Web Hosting Plans operation response.
        /// </returns>
        public static WebHostingPlanListResponse List(this IWebHostingPlanOperations operations, string resourceGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebHostingPlanOperations)s).ListAsync(resourceGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets all Web Hosting Plans in a current subscription and Resource
        /// Group.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebHostingPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <returns>
        /// The List Web Hosting Plans operation response.
        /// </returns>
        public static Task<WebHostingPlanListResponse> ListAsync(this IWebHostingPlanOperations operations, string resourceGroupName)
        {
            return operations.ListAsync(resourceGroupName, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the Web Hosting Plans in a resource group. Web
    /// hosting plans (WHPs) represent a set of features and capacity that you
    /// can share across your web sites. Web hosting plans support the 4 Azure
    /// Web Sites pricing tiers (Free, Shared, Basic, and Standard) where each
    /// tier has its own capabilities and capacity. Sites in the same
    /// subscription, resource group, and geographic location can share a web
    /// hosting plan. All the sites sharing a web hosting plan can leverage
    /// all the capabilities and features defined by the web hosting plan
    /// tier. All web sites associated with a given web hosting plan run on
    /// the resources defined by the web hosting plan.  (see
    /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
    /// for more information)
    /// </summary>
    public partial interface IWebHostingPlanOperations
    {
        /// <summary>
        /// Creates a new Web Hosting Plan or updates an existing one.  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// The name of the Web Hosting Plan.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Server Farm operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Web Hosting Plan operation response.
        /// </returns>
        Task<WebHostingPlanCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string webHostingPlanName, WebHostingPlanCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Deletes a Web Hosting Plan  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// The name of the Web Hosting Plan to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string resourceGroupName, string webHostingPlanName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets details of an existing Web Hosting Plan  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// The name of the Web Hosting Plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Hosting Plan operation response.
        /// </returns>
        Task<WebHostingPlanGetResponse> GetAsync(string resourceGroupName, string webHostingPlanName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// The name of the web hosting plan.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Get Historical Usage Metrics Web hosting
        /// plan operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Historical Usage Metrics Web hosting plan operation
        /// response.
        /// </returns>
        Task<WebHostingPlanGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(string resourceGroupName, string webHostingPlanName, WebHostingPlanGetHistoricalUsageMetricsParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets all Web Hosting Plans in a current subscription and Resource
        /// Group.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Web Hosting Plans operation response.
        /// </returns>
        Task<WebHostingPlanListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the Web Hosting Plans in a resource group. Web
    /// hosting plans (WHPs) represent a set of features and capacity that you
    /// can share across your web sites. Web hosting plans support the 4 Azure
    /// Web Sites pricing tiers (Free, Shared, Basic, and Standard) where each
    /// tier has its own capabilities and capacity. Sites in the same
    /// subscription, resource group, and geographic location can share a web
    /// hosting plan. All the sites sharing a web hosting plan can leverage
    /// all the capabilities and features defined by the web hosting plan
    /// tier. All web sites associated with a given web hosting plan run on
    /// the resources defined by the web hosting plan.  (see
    /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
    /// for more information)
    /// </summary>
    internal partial class WebHostingPlanOperations : IServiceOperations<WebSiteManagementClient>, IWebHostingPlanOperations
    {
        /// <summary>
        /// Initializes a new instance of the WebHostingPlanOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal WebHostingPlanOperations(WebSiteManagementClient client)
        {
            this._client = client;
        }
        
        private WebSiteManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.WebSites.WebSiteManagementClient.
        /// </summary>
        public WebSiteManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates a new Web Hosting Plan or updates an existing one.  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the Web Hosting Plan.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Server Farm operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Web Hosting Plan operation response.
        /// </returns>
        public async Task<WebHostingPlanCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string webHostingPlanName, WebHostingPlanCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webHostingPlanName == null)
            {
                throw new ArgumentNullException("webHostingPlanName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.WebHostingPlan == null)
            {
                throw new ArgumentNullException("parameters.WebHostingPlan");
            }
            if (parameters.WebHostingPlan.Location == null)
            {
                throw new ArgumentNullException("parameters.WebHostingPlan.Location");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webHostingPlanName", webHostingPlanName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/serverFarms/" + webHostingPlanName.Trim() + "?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject webHostingPlanCreateOrUpdateParametersValue = new JObject();
                requestDoc = webHostingPlanCreateOrUpdateParametersValue;
                
                if (parameters.WebHostingPlan.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    webHostingPlanCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    propertiesValue["sku"] = parameters.WebHostingPlan.Properties.Sku.ToString();
                    
                    propertiesValue["numberOfWorkers"] = parameters.WebHostingPlan.Properties.NumberOfWorkers;
                    
                    propertiesValue["workerSize"] = parameters.WebHostingPlan.Properties.WorkerSize.ToString();
                }
                
                if (parameters.WebHostingPlan.Id != null)
                {
                    webHostingPlanCreateOrUpdateParametersValue["id"] = parameters.WebHostingPlan.Id;
                }
                
                if (parameters.WebHostingPlan.Name != null)
                {
                    webHostingPlanCreateOrUpdateParametersValue["name"] = parameters.WebHostingPlan.Name;
                }
                
                webHostingPlanCreateOrUpdateParametersValue["location"] = parameters.WebHostingPlan.Location;
                
                JObject tagsDictionary = new JObject();
                if (parameters.WebHostingPlan.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.WebHostingPlan.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                webHostingPlanCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.WebHostingPlan.Type != null)
                {
                    webHostingPlanCreateOrUpdateParametersValue["type"] = parameters.WebHostingPlan.Type;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebHostingPlanCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebHostingPlanCreateOrUpdateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    JToken serverFarmValue = responseDoc["ServerFarm"];
                    if (serverFarmValue != null && serverFarmValue.Type != JTokenType.Null)
                    {
                        WebHostingPlanCreateOrUpdateResponse serverFarmInstance = new WebHostingPlanCreateOrUpdateResponse();
                        
                        WebHostingPlan webHostingPlanInstance = new WebHostingPlan();
                        result.WebHostingPlan = webHostingPlanInstance;
                        
                        JToken propertiesValue2 = serverFarmValue["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            WebHostingPlanProperties propertiesInstance = new WebHostingPlanProperties();
                            webHostingPlanInstance.Properties = propertiesInstance;
                            
                            JToken skuValue = propertiesValue2["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                SkuOptions skuInstance = ((SkuOptions)Enum.Parse(typeof(SkuOptions), ((string)skuValue), true));
                                propertiesInstance.Sku = skuInstance;
                            }
                            
                            JToken numberOfWorkersValue = propertiesValue2["numberOfWorkers"];
                            if (numberOfWorkersValue != null && numberOfWorkersValue.Type != JTokenType.Null)
                            {
                                int numberOfWorkersInstance = ((int)numberOfWorkersValue);
                                propertiesInstance.NumberOfWorkers = numberOfWorkersInstance;
                            }
                            
                            JToken workerSizeValue = propertiesValue2["workerSize"];
                            if (workerSizeValue != null && workerSizeValue.Type != JTokenType.Null)
                            {
                                WorkerSizeOptions workerSizeInstance = ((WorkerSizeOptions)Enum.Parse(typeof(WorkerSizeOptions), ((string)workerSizeValue), true));
                                propertiesInstance.WorkerSize = workerSizeInstance;
                            }
                        }
                        
                        JToken idValue = serverFarmValue["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            webHostingPlanInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = serverFarmValue["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            webHostingPlanInstance.Name = nameInstance;
                        }
                        
                        JToken locationValue = serverFarmValue["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            webHostingPlanInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)serverFarmValue["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                webHostingPlanInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                        
                        JToken typeValue = serverFarmValue["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            webHostingPlanInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a Web Hosting Plan  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the Web Hosting Plan to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string resourceGroupName, string webHostingPlanName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webHostingPlanName == null)
            {
                throw new ArgumentNullException("webHostingPlanName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webHostingPlanName", webHostingPlanName);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/serverFarms/" + webHostingPlanName.Trim() + "?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets details of an existing Web Hosting Plan  (see
        /// http://azure.microsoft.com/en-us/documentation/articles/azure-web-sites-web-hosting-plans-in-depth-overview/
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the Web Hosting Plan.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Hosting Plan operation response.
        /// </returns>
        public async Task<WebHostingPlanGetResponse> GetAsync(string resourceGroupName, string webHostingPlanName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webHostingPlanName == null)
            {
                throw new ArgumentNullException("webHostingPlanName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webHostingPlanName", webHostingPlanName);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/serverFarms/" + webHostingPlanName.Trim() + "?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebHostingPlanGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebHostingPlanGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        WebHostingPlan webHostingPlanInstance = new WebHostingPlan();
                        result.WebHostingPlan = webHostingPlanInstance;
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            WebHostingPlanProperties propertiesInstance = new WebHostingPlanProperties();
                            webHostingPlanInstance.Properties = propertiesInstance;
                            
                            JToken skuValue = propertiesValue["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                SkuOptions skuInstance = ((SkuOptions)Enum.Parse(typeof(SkuOptions), ((string)skuValue), true));
                                propertiesInstance.Sku = skuInstance;
                            }
                            
                            JToken numberOfWorkersValue = propertiesValue["numberOfWorkers"];
                            if (numberOfWorkersValue != null && numberOfWorkersValue.Type != JTokenType.Null)
                            {
                                int numberOfWorkersInstance = ((int)numberOfWorkersValue);
                                propertiesInstance.NumberOfWorkers = numberOfWorkersInstance;
                            }
                            
                            JToken workerSizeValue = propertiesValue["workerSize"];
                            if (workerSizeValue != null && workerSizeValue.Type != JTokenType.Null)
                            {
                                WorkerSizeOptions workerSizeInstance = ((WorkerSizeOptions)Enum.Parse(typeof(WorkerSizeOptions), ((string)workerSizeValue), true));
                                propertiesInstance.WorkerSize = workerSizeInstance;
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            webHostingPlanInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            webHostingPlanInstance.Name = nameInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            webHostingPlanInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                webHostingPlanInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            webHostingPlanInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webHostingPlanName'>
        /// Required. The name of the web hosting plan.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Get Historical Usage Metrics
        /// Web hosting plan operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Historical Usage Metrics Web hosting plan operation
        /// response.
        /// </returns>
        public async Task<WebHostingPlanGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(string resourceGroupName, string webHostingPlanName, WebHostingPlanGetHistoricalUsageMetricsParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webHostingPlanName == null)
            {
                throw new ArgumentNullException("webHostingPlanName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webHostingPlanName", webHostingPlanName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetHistoricalUsageMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/serverFarms/" + webHostingPlanName.Trim() + "/metrics?";
            url = url + "api-version=2014-06-01";
            if (parameters.MetricNames != null && parameters.MetricNames.Count > 0)
            {
                url = url + "&names=" + Uri.EscapeDataString(string.Join(",", parameters.MetricNames));
            }
            if (parameters.StartTime != null)
            {
                url = url + "&StartTime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.StartTime.Value.ToUniversalTime()));
            }
            if (parameters.EndTime != null)
            {
                url = url + "&EndTime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.EndTime.Value.ToUniversalTime()));
            }
            if (parameters.TimeGrain != null)
            {
                url = url + "&timeGrain=" + Uri.EscapeDataString(parameters.TimeGrain != null ? parameters.TimeGrain.Trim() : "");
            }
            url = url + "&details=" + Uri.EscapeDataString(parameters.IncludeInstanceBreakdown.ToString().ToLower());
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebHostingPlanGetHistoricalUsageMetricsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebHostingPlanGetHistoricalUsageMetricsResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken propertiesArray = responseDoc["properties"];
                        if (propertiesArray != null && propertiesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken propertiesValue in ((JArray)propertiesArray))
                            {
                                HistoricalUsageMetric historicalUsageMetricInstance = new HistoricalUsageMetric();
                                result.UsageMetrics.Add(historicalUsageMetricInstance);
                                
                                JToken codeValue = propertiesValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    historicalUsageMetricInstance.Code = codeInstance;
                                }
                                
                                JToken dataValue = propertiesValue["data"];
                                if (dataValue != null && dataValue.Type != JTokenType.Null)
                                {
                                    HistoricalUsageMetricData dataInstance = new HistoricalUsageMetricData();
                                    historicalUsageMetricInstance.Data = dataInstance;
                                    
                                    JToken displayNameValue = dataValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        dataInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken endTimeValue = dataValue["EndTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        dataInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken nameValue = dataValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        dataInstance.Name = nameInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = dataValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        string primaryAggregationTypeInstance = ((string)primaryAggregationTypeValue);
                                        dataInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken startTimeValue = dataValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        dataInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken timeGrainValue = dataValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        string timeGrainInstance = ((string)timeGrainValue);
                                        dataInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken unitValue = dataValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        string unitInstance = ((string)unitValue);
                                        dataInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken valuesArray = dataValue["values"];
                                    if (valuesArray != null && valuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken valuesValue in ((JArray)valuesArray))
                                        {
                                            HistoricalUsageMetricSample metricSampleInstance = new HistoricalUsageMetricSample();
                                            dataInstance.Values.Add(metricSampleInstance);
                                            
                                            JToken countValue = valuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricSampleInstance.Count = countInstance;
                                            }
                                            
                                            JToken maximumValue = valuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                string maximumInstance = ((string)maximumValue);
                                                metricSampleInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken minimumValue = valuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                string minimumInstance = ((string)minimumValue);
                                                metricSampleInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken timeCreatedValue = valuesValue["timeCreated"];
                                            if (timeCreatedValue != null && timeCreatedValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeCreatedInstance = ((DateTime)timeCreatedValue);
                                                metricSampleInstance.TimeCreated = timeCreatedInstance;
                                            }
                                            
                                            JToken totalValue = valuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                string totalInstance = ((string)totalValue);
                                                metricSampleInstance.Total = totalInstance;
                                            }
                                            
                                            JToken instanceNameValue = valuesValue["instanceName"];
                                            if (instanceNameValue != null && instanceNameValue.Type != JTokenType.Null)
                                            {
                                                string instanceNameInstance = ((string)instanceNameValue);
                                                metricSampleInstance.InstanceName = instanceNameInstance;
                                            }
                                        }
                                    }
                                }
                                
                                JToken messageValue = propertiesValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    historicalUsageMetricInstance.Message = messageInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets all Web Hosting Plans in a current subscription and Resource
        /// Group.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn194277.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Web Hosting Plans operation response.
        /// </returns>
        public async Task<WebHostingPlanListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/serverFarms?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebHostingPlanListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebHostingPlanListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                WebHostingPlan webHostingPlanInstance = new WebHostingPlan();
                                result.WebHostingPlans.Add(webHostingPlanInstance);
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    WebHostingPlanProperties propertiesInstance = new WebHostingPlanProperties();
                                    webHostingPlanInstance.Properties = propertiesInstance;
                                    
                                    JToken skuValue = propertiesValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        SkuOptions skuInstance = ((SkuOptions)Enum.Parse(typeof(SkuOptions), ((string)skuValue), true));
                                        propertiesInstance.Sku = skuInstance;
                                    }
                                    
                                    JToken numberOfWorkersValue = propertiesValue["numberOfWorkers"];
                                    if (numberOfWorkersValue != null && numberOfWorkersValue.Type != JTokenType.Null)
                                    {
                                        int numberOfWorkersInstance = ((int)numberOfWorkersValue);
                                        propertiesInstance.NumberOfWorkers = numberOfWorkersInstance;
                                    }
                                    
                                    JToken workerSizeValue = propertiesValue["workerSize"];
                                    if (workerSizeValue != null && workerSizeValue.Type != JTokenType.Null)
                                    {
                                        WorkerSizeOptions workerSizeInstance = ((WorkerSizeOptions)Enum.Parse(typeof(WorkerSizeOptions), ((string)workerSizeValue), true));
                                        propertiesInstance.WorkerSize = workerSizeInstance;
                                    }
                                }
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    webHostingPlanInstance.Id = idInstance;
                                }
                                
                                JToken nameValue = valueValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    webHostingPlanInstance.Name = nameInstance;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    webHostingPlanInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property.Name);
                                        string tagsValue = ((string)property.Value);
                                        webHostingPlanInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    webHostingPlanInstance.Type = typeInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
    
    /// <summary>
    /// The Windows Azure Web Sites management API provides a RESTful set of
    /// web services that interact with Windows Azure Web Sites service to
    /// manage your web sites. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Web Sites
    /// service.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    /// more information)
    /// </summary>
    public static partial class WebSiteOperationsExtensions
    {
        /// <summary>
        /// Backups a site on-demand.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// Required. A backup specification.
        /// </param>
        /// <returns>
        /// The backup record created based on the backup request.
        /// </returns>
        public static WebSiteBackupResponse Backup(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).BackupAsync(resourceGroupName, webSiteName, slotName, backupRequestEnvelope);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Backups a site on-demand.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// Required. A backup specification.
        /// </param>
        /// <returns>
        /// The backup record created based on the backup request.
        /// </returns>
        public static Task<WebSiteBackupResponse> BackupAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope)
        {
            return operations.BackupAsync(resourceGroupName, webSiteName, slotName, backupRequestEnvelope, CancellationToken.None);
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public static WebSiteCreateResponse CreateOrUpdate(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).CreateOrUpdateAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public static Task<WebSiteCreateResponse> CreateOrUpdateAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse CreateRepository(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).CreateRepositoryAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> CreateRepositoryAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.CreateRepositoryAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group..
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the Web Site resource.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete a web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Delete(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteDeleteParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).DeleteAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group..
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the Web Site resource.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete a web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> DeleteAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteDeleteParameters parameters)
        {
            return operations.DeleteAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public static WebSiteDeleteRepositoryResponse DeleteRepository(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).DeleteRepositoryAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public static Task<WebSiteDeleteRepositoryResponse> DeleteRepositoryAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.DeleteRepositoryAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Scans a backup in a storage account and returns database
        /// information etc. Should be called before calling Restore to
        /// discover what parameters are needed for the restore operation.
        /// KNOWN BUG: This has to be called against an exisingsite, otherwise
        /// will hit an error about non-existing resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// Required. A restore request.
        /// </param>
        /// <returns>
        /// The information gathered about a backup storaged in a storage
        /// account.
        /// </returns>
        public static WebSiteRestoreDiscoverResponse Discover(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).DiscoverAsync(resourceGroupName, webSiteName, slotName, restoreRequestEnvelope);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Scans a backup in a storage account and returns database
        /// information etc. Should be called before calling Restore to
        /// discover what parameters are needed for the restore operation.
        /// KNOWN BUG: This has to be called against an exisingsite, otherwise
        /// will hit an error about non-existing resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// Required. A restore request.
        /// </param>
        /// <returns>
        /// The information gathered about a backup storaged in a storage
        /// account.
        /// </returns>
        public static Task<WebSiteRestoreDiscoverResponse> DiscoverAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope)
        {
            return operations.DiscoverAsync(resourceGroupName, webSiteName, slotName, restoreRequestEnvelope, CancellationToken.None);
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse GeneratePassword(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GeneratePasswordAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> GeneratePasswordAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GeneratePasswordAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public static WebSiteGetResponse Get(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public static Task<WebSiteGetResponse> GetAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetParameters parameters)
        {
            return operations.GetAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        public static WebSiteAppSettingsResult GetAppSettings(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetAppSettingsAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        public static Task<WebSiteAppSettingsResult> GetAppSettingsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetAppSettingsAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a schedule configuration for site backups.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// Scheduled backup definition.
        /// </returns>
        public static WebSiteGetBackupConfigurationResponse GetBackupConfiguration(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetBackupConfigurationAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a schedule configuration for site backups.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// Scheduled backup definition.
        /// </returns>
        public static Task<WebSiteGetBackupConfigurationResponse> GetBackupConfigurationAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetBackupConfigurationAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public static WebSiteGetConfigurationResponse GetConfiguration(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetConfigurationAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public static Task<WebSiteGetConfigurationResponse> GetConfigurationAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetConfigurationParameters parameters)
        {
            return operations.GetConfigurationAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        public static WebSiteConnectionStringsResult GetConnectionStrings(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetConnectionStringsAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        public static Task<WebSiteConnectionStringsResult> GetConnectionStringsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetConnectionStringsAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public static WebSiteGetHistoricalUsageMetricsResponse GetHistoricalUsageMetrics(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetHistoricalUsageMetricsParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetHistoricalUsageMetricsAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public static Task<WebSiteGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetHistoricalUsageMetricsParameters parameters)
        {
            return operations.GetHistoricalUsageMetricsAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        public static WebSiteMetadataResult GetMetadata(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetMetadataAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        public static Task<WebSiteMetadataResult> GetMetadataAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetMetadataAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get publishing credentials for the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site.
        /// </param>
        /// <returns>
        /// Publishing credentials for the website.
        /// </returns>
        public static WebSitePublishingCredentialsResult GetPublishingCredentials(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetPublishingCredentialsAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get publishing credentials for the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site.
        /// </param>
        /// <returns>
        /// Publishing credentials for the website.
        /// </returns>
        public static Task<WebSitePublishingCredentialsResult> GetPublishingCredentialsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetPublishingCredentialsAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve the publish settings information for a web site.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public static WebSiteGetPublishProfileResponse GetPublishProfile(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetPublishProfileAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve the publish settings information for a web site.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public static Task<WebSiteGetPublishProfileResponse> GetPublishProfileAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetPublishProfileAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public static WebSiteGetRepositoryResponse GetRepository(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetRepositoryAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public static Task<WebSiteGetRepositoryResponse> GetRepositoryAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetRepositoryAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get a web site's current usage metrics. The metrics returned
        /// include CPU Time, Data In, Data Out, Local bytes read, Local bytes
        /// written, Network bytes read, Network bytes written, WP stop
        /// requests, Memory Usage, CPU Time - Minute Limit, and File System
        /// Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public static WebSiteGetUsageMetricsResponse GetUsageMetrics(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetUsageMetricsAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get a web site's current usage metrics. The metrics returned
        /// include CPU Time, Data In, Data Out, Local bytes read, Local bytes
        /// written, Network bytes read, Network bytes written, WP stop
        /// requests, Memory Usage, CPU Time - Minute Limit, and File System
        /// Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public static Task<WebSiteGetUsageMetricsResponse> GetUsageMetricsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetUsageMetricsAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// List the Web Sites in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Optional. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public static WebSiteListResponse List(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).ListAsync(resourceGroupName, webSiteName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List the Web Sites in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Optional. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public static Task<WebSiteListResponse> ListAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteListParameters parameters)
        {
            return operations.ListAsync(resourceGroupName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns list of all backups which are tracked by the system.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// List of backups for the website.
        /// </returns>
        public static WebSiteGetBackupsResponse ListBackups(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).ListBackupsAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns list of all backups which are tracked by the system.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// List of backups for the website.
        /// </returns>
        public static Task<WebSiteGetBackupsResponse> ListBackupsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.ListBackupsAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Restart(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).RestartAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> RestartAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.RestartAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Restores a site to either a new site or existing site (Overwrite
        /// flag has to be set to true for that).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// Required. A restore request.
        /// </param>
        /// <returns>
        /// Restore operation information.
        /// </returns>
        public static WebSiteRestoreResponse Restore(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).RestoreAsync(resourceGroupName, webSiteName, slotName, restoreRequestEnvelope);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restores a site to either a new site or existing site (Overwrite
        /// flag has to be set to true for that).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// Required. A restore request.
        /// </param>
        /// <returns>
        /// Restore operation information.
        /// </returns>
        public static Task<WebSiteRestoreResponse> RestoreAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope)
        {
            return operations.RestoreAsync(resourceGroupName, webSiteName, slotName, restoreRequestEnvelope, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Start(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).StartAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> StartAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.StartAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse Stop(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).StopAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> StopAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.StopAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the application settings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site app settings parameters
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        public static WebSiteAppSettingsResult UpdateAppSettings(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateAppSettingsAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the application settings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site app settings parameters
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        public static Task<WebSiteAppSettingsResult> UpdateAppSettingsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters)
        {
            return operations.UpdateAppSettingsAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates a backup schedule for a site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// Required. A backup schedule specification.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateBackupConfiguration(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateBackupConfigurationAsync(resourceGroupName, webSiteName, slotName, backupRequestEnvelope);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates a backup schedule for a site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// Required. A backup schedule specification.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateBackupConfigurationAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope)
        {
            return operations.UpdateBackupConfigurationAsync(resourceGroupName, webSiteName, slotName, backupRequestEnvelope, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site Configuration parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static OperationResponse UpdateConfiguration(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateConfigurationAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site Configuration parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<OperationResponse> UpdateConfigurationAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConfigurationParameters parameters)
        {
            return operations.UpdateConfigurationAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the connection strings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site connection strings parameters
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        public static WebSiteConnectionStringsResult UpdateConnectionStrings(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConnectionStringsParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateConnectionStringsAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the connection strings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site connection strings parameters
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        public static Task<WebSiteConnectionStringsResult> UpdateConnectionStringsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConnectionStringsParameters parameters)
        {
            return operations.UpdateConnectionStringsAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the metadata for a web site by issuing an HTTP GET
        /// request, or update them by using HTTP PUT with a request body that
        /// contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site metadata parameters
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        public static WebSiteMetadataResult UpdateMetadata(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateMetadataAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the metadata for a web site by issuing an HTTP GET
        /// request, or update them by using HTTP PUT with a request body that
        /// contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site metadata parameters
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        public static Task<WebSiteMetadataResult> UpdateMetadataAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters)
        {
            return operations.UpdateMetadataAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
    }
    
    /// <summary>
    /// Operations for managing the web sites in a web space.
    /// </summary>
    public partial interface IWebSiteOperations
    {
        /// <summary>
        /// Backups a site on-demand.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// A backup specification.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The backup record created based on the backup request.
        /// </returns>
        Task<WebSiteBackupResponse> BackupAsync(string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        Task<WebSiteCreateResponse> CreateOrUpdateAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> CreateRepositoryAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Deletes the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group..
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the Web Site resource.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// The parameters to delete a web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> DeleteAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteDeleteParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        Task<WebSiteDeleteRepositoryResponse> DeleteRepositoryAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Scans a backup in a storage account and returns database
        /// information etc. Should be called before calling Restore to
        /// discover what parameters are needed for the restore operation.
        /// KNOWN BUG: This has to be called against an exisingsite, otherwise
        /// will hit an error about non-existing resource.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// A restore request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The information gathered about a backup storaged in a storage
        /// account.
        /// </returns>
        Task<WebSiteRestoreDiscoverResponse> DiscoverAsync(string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> GeneratePasswordAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        Task<WebSiteGetResponse> GetAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteGetParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Name of website
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot of the website
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        Task<WebSiteAppSettingsResult> GetAppSettingsAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a schedule configuration for site backups.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Scheduled backup definition.
        /// </returns>
        Task<WebSiteGetBackupConfigurationResponse> GetBackupConfigurationAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        Task<WebSiteGetConfigurationResponse> GetConfigurationAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteGetConfigurationParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Name of website
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot of the web site
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        Task<WebSiteConnectionStringsResult> GetConnectionStringsAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        Task<WebSiteGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteGetHistoricalUsageMetricsParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Name of website
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot of the web site
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        Task<WebSiteMetadataResult> GetMetadataAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get publishing credentials for the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Name of website
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Publishing credentials for the website.
        /// </returns>
        Task<WebSitePublishingCredentialsResult> GetPublishingCredentialsAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Retrieve the publish settings information for a web site.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        Task<WebSiteGetPublishProfileResponse> GetPublishProfileAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        Task<WebSiteGetRepositoryResponse> GetRepositoryAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Get a web site's current usage metrics. The metrics returned
        /// include CPU Time, Data In, Data Out, Local bytes read, Local bytes
        /// written, Network bytes read, Network bytes written, WP stop
        /// requests, Memory Usage, CPU Time - Minute Limit, and File System
        /// Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        Task<WebSiteGetUsageMetricsResponse> GetUsageMetricsAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// List the Web Sites in a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        Task<WebSiteListResponse> ListAsync(string resourceGroupName, string webSiteName, WebSiteListParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns list of all backups which are tracked by the system.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of backups for the website.
        /// </returns>
        Task<WebSiteGetBackupsResponse> ListBackupsAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Name of website
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> RestartAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Restores a site to either a new site or existing site (Overwrite
        /// flag has to be set to true for that).
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// A restore request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Restore operation information.
        /// </returns>
        Task<WebSiteRestoreResponse> RestoreAsync(string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope, CancellationToken cancellationToken);
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Name of website
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot of the website
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> StartAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Name of website
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot of the web site
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> StopAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve the application settings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// The Update Web Site app settings parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        Task<WebSiteAppSettingsResult> UpdateAppSettingsAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Updates a backup schedule for a site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// A backup schedule specification.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UpdateBackupConfigurationAsync(string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// The Update Web Site Configuration parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<OperationResponse> UpdateConfigurationAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConfigurationParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve the connection strings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the website
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// The Update Web Site connection strings parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        Task<WebSiteConnectionStringsResult> UpdateConnectionStringsAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConnectionStringsParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// You can retrieve the metadata for a web site by issuing an HTTP GET
        /// request, or update them by using HTTP PUT with a request body that
        /// contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// The name of the website
        /// </param>
        /// <param name='slotName'>
        /// The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// The Update Web Site metadata parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        Task<WebSiteMetadataResult> UpdateMetadataAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters, CancellationToken cancellationToken);
    }
    
    /// <summary>
    /// Operations for managing the web sites in a web space.
    /// </summary>
    internal partial class WebSiteOperations : IServiceOperations<WebSiteManagementClient>, IWebSiteOperations
    {
        /// <summary>
        /// Initializes a new instance of the WebSiteOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal WebSiteOperations(WebSiteManagementClient client)
        {
            this._client = client;
        }
        
        private WebSiteManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.WebSites.WebSiteManagementClient.
        /// </summary>
        public WebSiteManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Backups a site on-demand.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// Required. A backup specification.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The backup record created based on the backup request.
        /// </returns>
        public async Task<WebSiteBackupResponse> BackupAsync(string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (backupRequestEnvelope == null)
            {
                throw new ArgumentNullException("backupRequestEnvelope");
            }
            if (backupRequestEnvelope.Location == null)
            {
                throw new ArgumentNullException("backupRequestEnvelope.Location");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("backupRequestEnvelope", backupRequestEnvelope);
                Tracing.Enter(invocationId, this, "BackupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/backup?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject backupRequestEnvelopeValue = new JObject();
                requestDoc = backupRequestEnvelopeValue;
                
                if (backupRequestEnvelope.Request != null)
                {
                    JObject propertiesValue = new JObject();
                    backupRequestEnvelopeValue["properties"] = propertiesValue;
                    
                    if (backupRequestEnvelope.Request.BackupSchedule != null)
                    {
                        JObject backupScheduleValue = new JObject();
                        propertiesValue["backupSchedule"] = backupScheduleValue;
                        
                        backupScheduleValue["frequencyInterval"] = backupRequestEnvelope.Request.BackupSchedule.FrequencyInterval;
                        
                        backupScheduleValue["frequencyUnit"] = backupRequestEnvelope.Request.BackupSchedule.FrequencyUnit.ToString();
                        
                        backupScheduleValue["keepAtLeastOneBackup"] = backupRequestEnvelope.Request.BackupSchedule.KeepAtLeastOneBackup;
                        
                        if (backupRequestEnvelope.Request.BackupSchedule.LastExecutionTime != null)
                        {
                            backupScheduleValue["lastExecutionTime"] = backupRequestEnvelope.Request.BackupSchedule.LastExecutionTime.Value;
                        }
                        
                        backupScheduleValue["retentionPeriodInDays"] = backupRequestEnvelope.Request.BackupSchedule.RetentionPeriodInDays;
                        
                        if (backupRequestEnvelope.Request.BackupSchedule.StartTime != null)
                        {
                            backupScheduleValue["startTime"] = backupRequestEnvelope.Request.BackupSchedule.StartTime.Value;
                        }
                    }
                    
                    if (backupRequestEnvelope.Request.Databases != null)
                    {
                        JArray databasesArray = new JArray();
                        foreach (DatabaseBackupSetting databasesItem in backupRequestEnvelope.Request.Databases)
                        {
                            JObject databaseBackupSettingValue = new JObject();
                            databasesArray.Add(databaseBackupSettingValue);
                            
                            if (databasesItem.ConnectionString != null)
                            {
                                databaseBackupSettingValue["connectionString"] = databasesItem.ConnectionString;
                            }
                            
                            if (databasesItem.ConnectionStringName != null)
                            {
                                databaseBackupSettingValue["connectionStringName"] = databasesItem.ConnectionStringName;
                            }
                            
                            if (databasesItem.DatabaseType != null)
                            {
                                databaseBackupSettingValue["databaseType"] = databasesItem.DatabaseType;
                            }
                            
                            if (databasesItem.Name != null)
                            {
                                databaseBackupSettingValue["name"] = databasesItem.Name;
                            }
                        }
                        propertiesValue["databases"] = databasesArray;
                    }
                    
                    if (backupRequestEnvelope.Request.Enabled != null)
                    {
                        propertiesValue["enabled"] = backupRequestEnvelope.Request.Enabled.Value;
                    }
                    
                    if (backupRequestEnvelope.Request.Name != null)
                    {
                        propertiesValue["name"] = backupRequestEnvelope.Request.Name;
                    }
                    
                    if (backupRequestEnvelope.Request.StorageAccountUrl != null)
                    {
                        propertiesValue["storageAccountUrl"] = backupRequestEnvelope.Request.StorageAccountUrl;
                    }
                }
                
                if (backupRequestEnvelope.Id != null)
                {
                    backupRequestEnvelopeValue["id"] = backupRequestEnvelope.Id;
                }
                
                if (backupRequestEnvelope.Name != null)
                {
                    backupRequestEnvelopeValue["name"] = backupRequestEnvelope.Name;
                }
                
                backupRequestEnvelopeValue["location"] = backupRequestEnvelope.Location;
                
                JObject tagsDictionary = new JObject();
                if (backupRequestEnvelope.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in backupRequestEnvelope.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                backupRequestEnvelopeValue["tags"] = tagsDictionary;
                
                if (backupRequestEnvelope.Type != null)
                {
                    backupRequestEnvelopeValue["type"] = backupRequestEnvelope.Type;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteBackupResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteBackupResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        BackupItemEnvelope backupItemInstance = new BackupItemEnvelope();
                        result.BackupItem = backupItemInstance;
                        
                        JToken propertiesValue2 = responseDoc["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            BackupItem propertiesInstance = new BackupItem();
                            backupItemInstance.Properties = propertiesInstance;
                            
                            JToken storageAccountUrlValue = propertiesValue2["storageAccountUrl"];
                            if (storageAccountUrlValue != null && storageAccountUrlValue.Type != JTokenType.Null)
                            {
                                string storageAccountUrlInstance = ((string)storageAccountUrlValue);
                                propertiesInstance.StorageAccountUrl = storageAccountUrlInstance;
                            }
                            
                            JToken blobNameValue = propertiesValue2["blobName"];
                            if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                            {
                                string blobNameInstance = ((string)blobNameValue);
                                propertiesInstance.BlobName = blobNameInstance;
                            }
                            
                            JToken nameValue = propertiesValue2["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                propertiesInstance.Name = nameInstance;
                            }
                            
                            JToken statusValue = propertiesValue2["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                BackupItemStatus statusInstance = ((BackupItemStatus)Enum.Parse(typeof(BackupItemStatus), ((string)statusValue), true));
                                propertiesInstance.Status = statusInstance;
                            }
                            
                            JToken sizeInBytesValue = propertiesValue2["sizeInBytes"];
                            if (sizeInBytesValue != null && sizeInBytesValue.Type != JTokenType.Null)
                            {
                                long sizeInBytesInstance = ((long)sizeInBytesValue);
                                propertiesInstance.SizeInBytes = sizeInBytesInstance;
                            }
                            
                            JToken createdValue = propertiesValue2["created"];
                            if (createdValue != null && createdValue.Type != JTokenType.Null)
                            {
                                DateTime createdInstance = ((DateTime)createdValue);
                                propertiesInstance.Created = createdInstance;
                            }
                            
                            JToken logValue = propertiesValue2["log"];
                            if (logValue != null && logValue.Type != JTokenType.Null)
                            {
                                string logInstance = ((string)logValue);
                                propertiesInstance.Log = logInstance;
                            }
                            
                            JToken databasesArray2 = propertiesValue2["databases"];
                            if (databasesArray2 != null && databasesArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken databasesValue in ((JArray)databasesArray2))
                                {
                                    DatabaseBackupSetting databaseBackupSettingInstance = new DatabaseBackupSetting();
                                    propertiesInstance.Databases.Add(databaseBackupSettingInstance);
                                    
                                    JToken connectionStringValue = databasesValue["connectionString"];
                                    if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance = ((string)connectionStringValue);
                                        databaseBackupSettingInstance.ConnectionString = connectionStringInstance;
                                    }
                                    
                                    JToken connectionStringNameValue = databasesValue["connectionStringName"];
                                    if (connectionStringNameValue != null && connectionStringNameValue.Type != JTokenType.Null)
                                    {
                                        string connectionStringNameInstance = ((string)connectionStringNameValue);
                                        databaseBackupSettingInstance.ConnectionStringName = connectionStringNameInstance;
                                    }
                                    
                                    JToken databaseTypeValue = databasesValue["databaseType"];
                                    if (databaseTypeValue != null && databaseTypeValue.Type != JTokenType.Null)
                                    {
                                        string databaseTypeInstance = ((string)databaseTypeValue);
                                        databaseBackupSettingInstance.DatabaseType = databaseTypeInstance;
                                    }
                                    
                                    JToken nameValue2 = databasesValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        databaseBackupSettingInstance.Name = nameInstance2;
                                    }
                                }
                            }
                            
                            JToken scheduledValue = propertiesValue2["scheduled"];
                            if (scheduledValue != null && scheduledValue.Type != JTokenType.Null)
                            {
                                bool scheduledInstance = ((bool)scheduledValue);
                                propertiesInstance.Scheduled = scheduledInstance;
                            }
                            
                            JToken lastRestoreTimeStampValue = propertiesValue2["lastRestoreTimeStamp"];
                            if (lastRestoreTimeStampValue != null && lastRestoreTimeStampValue.Type != JTokenType.Null)
                            {
                                DateTime lastRestoreTimeStampInstance = ((DateTime)lastRestoreTimeStampValue);
                                propertiesInstance.LastRestoreTimeStamp = lastRestoreTimeStampInstance;
                            }
                            
                            JToken finishedTimeStampValue = propertiesValue2["finishedTimeStamp"];
                            if (finishedTimeStampValue != null && finishedTimeStampValue.Type != JTokenType.Null)
                            {
                                DateTime finishedTimeStampInstance = ((DateTime)finishedTimeStampValue);
                                propertiesInstance.FinishedTimeStamp = finishedTimeStampInstance;
                            }
                            
                            JToken correlationIdValue = propertiesValue2["correlationId"];
                            if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                            {
                                string correlationIdInstance = ((string)correlationIdValue);
                                propertiesInstance.CorrelationId = correlationIdInstance;
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            backupItemInstance.Id = idInstance;
                        }
                        
                        JToken nameValue3 = responseDoc["name"];
                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                        {
                            string nameInstance3 = ((string)nameValue3);
                            backupItemInstance.Name = nameInstance3;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            backupItemInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                backupItemInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            backupItemInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public async Task<WebSiteCreateResponse> CreateOrUpdateAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.WebSite == null)
            {
                throw new ArgumentNullException("parameters.WebSite");
            }
            if (parameters.WebSite.Location == null)
            {
                throw new ArgumentNullException("parameters.WebSite.Location");
            }
            if (parameters.WebSite.Properties != null)
            {
                if (parameters.WebSite.Properties.ServerFarm == null)
                {
                    throw new ArgumentNullException("parameters.WebSite.Properties.ServerFarm");
                }
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject webSiteCreateOrUpdateParametersValue = new JObject();
                requestDoc = webSiteCreateOrUpdateParametersValue;
                
                if (parameters.WebSite.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    webSiteCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    propertiesValue["ServerFarm"] = parameters.WebSite.Properties.ServerFarm;
                }
                
                if (parameters.WebSite.Id != null)
                {
                    webSiteCreateOrUpdateParametersValue["id"] = parameters.WebSite.Id;
                }
                
                if (parameters.WebSite.Name != null)
                {
                    webSiteCreateOrUpdateParametersValue["name"] = parameters.WebSite.Name;
                }
                
                webSiteCreateOrUpdateParametersValue["location"] = parameters.WebSite.Location;
                
                JObject tagsDictionary = new JObject();
                if (parameters.WebSite.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.WebSite.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                webSiteCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                
                if (parameters.WebSite.Type != null)
                {
                    webSiteCreateOrUpdateParametersValue["type"] = parameters.WebSite.Type;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteCreateResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteCreateResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> CreateRepositoryAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "CreateRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/repository?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group..
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the Web Site resource.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete a web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> DeleteAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteDeleteParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "?";
            url = url + "api-version=2014-06-01";
            url = url + "&deleteEmptyServerFarm=" + Uri.EscapeDataString(parameters.DeleteEmptyServerFarm.ToString().ToLower());
            url = url + "&deleteMetrics=" + Uri.EscapeDataString(parameters.DeleteMetrics.ToString().ToLower());
            url = url + "&deleteAllSlots=" + Uri.EscapeDataString(parameters.DeleteAllSlots.ToString().ToLower());
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public async Task<WebSiteDeleteRepositoryResponse> DeleteRepositoryAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "DeleteRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/repository?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteDeleteRepositoryResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteDeleteRepositoryResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken uriValue = responseDoc["uri"];
                        if (uriValue != null && uriValue.Type != JTokenType.Null)
                        {
                            Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                            result.Uri = uriInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Scans a backup in a storage account and returns database
        /// information etc. Should be called before calling Restore to
        /// discover what parameters are needed for the restore operation.
        /// KNOWN BUG: This has to be called against an exisingsite, otherwise
        /// will hit an error about non-existing resource.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// Required. A restore request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The information gathered about a backup storaged in a storage
        /// account.
        /// </returns>
        public async Task<WebSiteRestoreDiscoverResponse> DiscoverAsync(string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (restoreRequestEnvelope == null)
            {
                throw new ArgumentNullException("restoreRequestEnvelope");
            }
            if (restoreRequestEnvelope.Location == null)
            {
                throw new ArgumentNullException("restoreRequestEnvelope.Location");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("restoreRequestEnvelope", restoreRequestEnvelope);
                Tracing.Enter(invocationId, this, "DiscoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/restore/discover?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject restoreRequestEnvelopeValue = new JObject();
                requestDoc = restoreRequestEnvelopeValue;
                
                if (restoreRequestEnvelope.Request != null)
                {
                    JObject propertiesValue = new JObject();
                    restoreRequestEnvelopeValue["properties"] = propertiesValue;
                    
                    propertiesValue["AdjustConnectionStrings"] = restoreRequestEnvelope.Request.AdjustConnectionStrings;
                    
                    if (restoreRequestEnvelope.Request.BlobName != null)
                    {
                        propertiesValue["BlobName"] = restoreRequestEnvelope.Request.BlobName;
                    }
                    
                    if (restoreRequestEnvelope.Request.Databases != null)
                    {
                        JArray databasesArray = new JArray();
                        foreach (DatabaseBackupSetting databasesItem in restoreRequestEnvelope.Request.Databases)
                        {
                            JObject databaseBackupSettingValue = new JObject();
                            databasesArray.Add(databaseBackupSettingValue);
                            
                            if (databasesItem.ConnectionString != null)
                            {
                                databaseBackupSettingValue["connectionString"] = databasesItem.ConnectionString;
                            }
                            
                            if (databasesItem.ConnectionStringName != null)
                            {
                                databaseBackupSettingValue["connectionStringName"] = databasesItem.ConnectionStringName;
                            }
                            
                            if (databasesItem.DatabaseType != null)
                            {
                                databaseBackupSettingValue["databaseType"] = databasesItem.DatabaseType;
                            }
                            
                            if (databasesItem.Name != null)
                            {
                                databaseBackupSettingValue["name"] = databasesItem.Name;
                            }
                        }
                        propertiesValue["Databases"] = databasesArray;
                    }
                    
                    propertiesValue["IgnoreConflictingHostNames"] = restoreRequestEnvelope.Request.IgnoreConflictingHostNames;
                    
                    propertiesValue["Overwrite"] = restoreRequestEnvelope.Request.Overwrite;
                    
                    if (restoreRequestEnvelope.Request.StorageAccountUrl != null)
                    {
                        propertiesValue["StorageAccountUrl"] = restoreRequestEnvelope.Request.StorageAccountUrl;
                    }
                }
                
                if (restoreRequestEnvelope.Id != null)
                {
                    restoreRequestEnvelopeValue["id"] = restoreRequestEnvelope.Id;
                }
                
                if (restoreRequestEnvelope.Name != null)
                {
                    restoreRequestEnvelopeValue["name"] = restoreRequestEnvelope.Name;
                }
                
                restoreRequestEnvelopeValue["location"] = restoreRequestEnvelope.Location;
                
                JObject tagsDictionary = new JObject();
                if (restoreRequestEnvelope.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in restoreRequestEnvelope.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                restoreRequestEnvelopeValue["tags"] = tagsDictionary;
                
                if (restoreRequestEnvelope.Type != null)
                {
                    restoreRequestEnvelopeValue["type"] = restoreRequestEnvelope.Type;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteRestoreDiscoverResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteRestoreDiscoverResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        WebSiteRestoreDiscover envelopeInstance = new WebSiteRestoreDiscover();
                        result.Envelope = envelopeInstance;
                        
                        JToken propertiesValue2 = responseDoc["properties"];
                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                        {
                            WebSiteRestoreDiscoverProperties propertiesInstance = new WebSiteRestoreDiscoverProperties();
                            envelopeInstance.Properties = propertiesInstance;
                            
                            JToken storageAccountUrlValue = propertiesValue2["storageAccountUrl"];
                            if (storageAccountUrlValue != null && storageAccountUrlValue.Type != JTokenType.Null)
                            {
                                string storageAccountUrlInstance = ((string)storageAccountUrlValue);
                                propertiesInstance.StorageAccountUrl = storageAccountUrlInstance;
                            }
                            
                            JToken blobNameValue = propertiesValue2["blobName"];
                            if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                            {
                                string blobNameInstance = ((string)blobNameValue);
                                propertiesInstance.BlobName = blobNameInstance;
                            }
                            
                            JToken overwriteValue = propertiesValue2["overwrite"];
                            if (overwriteValue != null && overwriteValue.Type != JTokenType.Null)
                            {
                                bool overwriteInstance = ((bool)overwriteValue);
                                propertiesInstance.Overwrite = overwriteInstance;
                            }
                            
                            JToken databasesArray2 = propertiesValue2["databases"];
                            if (databasesArray2 != null && databasesArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken databasesValue in ((JArray)databasesArray2))
                                {
                                    DatabaseBackupSetting databaseBackupSettingInstance = new DatabaseBackupSetting();
                                    propertiesInstance.Databases.Add(databaseBackupSettingInstance);
                                    
                                    JToken connectionStringValue = databasesValue["connectionString"];
                                    if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance = ((string)connectionStringValue);
                                        databaseBackupSettingInstance.ConnectionString = connectionStringInstance;
                                    }
                                    
                                    JToken connectionStringNameValue = databasesValue["connectionStringName"];
                                    if (connectionStringNameValue != null && connectionStringNameValue.Type != JTokenType.Null)
                                    {
                                        string connectionStringNameInstance = ((string)connectionStringNameValue);
                                        databaseBackupSettingInstance.ConnectionStringName = connectionStringNameInstance;
                                    }
                                    
                                    JToken databaseTypeValue = databasesValue["databaseType"];
                                    if (databaseTypeValue != null && databaseTypeValue.Type != JTokenType.Null)
                                    {
                                        string databaseTypeInstance = ((string)databaseTypeValue);
                                        databaseBackupSettingInstance.DatabaseType = databaseTypeInstance;
                                    }
                                    
                                    JToken nameValue = databasesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        databaseBackupSettingInstance.Name = nameInstance;
                                    }
                                }
                            }
                            
                            JToken ignoreConflictingHostNamesValue = propertiesValue2["ignoreConflictingHostNames"];
                            if (ignoreConflictingHostNamesValue != null && ignoreConflictingHostNamesValue.Type != JTokenType.Null)
                            {
                                bool ignoreConflictingHostNamesInstance = ((bool)ignoreConflictingHostNamesValue);
                                propertiesInstance.IgnoreConflictingHostNames = ignoreConflictingHostNamesInstance;
                            }
                            
                            JToken adjustConnectionStringsValue = propertiesValue2["adjustConnectionStrings"];
                            if (adjustConnectionStringsValue != null && adjustConnectionStringsValue.Type != JTokenType.Null)
                            {
                                bool adjustConnectionStringsInstance = ((bool)adjustConnectionStringsValue);
                                propertiesInstance.AdjustConnectionStrings = adjustConnectionStringsInstance;
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            envelopeInstance.Id = idInstance;
                        }
                        
                        JToken nameValue2 = responseDoc["name"];
                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                        {
                            string nameInstance2 = ((string)nameValue2);
                            envelopeInstance.Name = nameInstance2;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            envelopeInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                envelopeInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            envelopeInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> GeneratePasswordAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "GeneratePasswordAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "newPassword?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public async Task<WebSiteGetResponse> GetAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteGetParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "?";
            url = url + "api-version=2014-06-01";
            if (parameters != null && parameters.PropertiesToInclude != null && parameters.PropertiesToInclude.Count > 0)
            {
                url = url + "&propertiesToInclude=" + Uri.EscapeDataString(string.Join(",", parameters.PropertiesToInclude));
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        WebSite webSiteInstance = new WebSite();
                        result.WebSite = webSiteInstance;
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            WebSiteProperties propertiesInstance = new WebSiteProperties();
                            webSiteInstance.Properties = propertiesInstance;
                            
                            JToken adminEnabledValue = propertiesValue["adminEnabled"];
                            if (adminEnabledValue != null && adminEnabledValue.Type != JTokenType.Null)
                            {
                                bool adminEnabledInstance = ((bool)adminEnabledValue);
                                propertiesInstance.AdminEnabled = adminEnabledInstance;
                            }
                            
                            JToken availabilityStateValue = propertiesValue["availabilityState"];
                            if (availabilityStateValue != null && availabilityStateValue.Type != JTokenType.Null)
                            {
                                WebSpaceAvailabilityState availabilityStateInstance = ((WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), ((string)availabilityStateValue), true));
                                propertiesInstance.AvailabilityState = availabilityStateInstance;
                            }
                            
                            JToken enabledValue = propertiesValue["enabled"];
                            if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                            {
                                bool enabledInstance = ((bool)enabledValue);
                                propertiesInstance.Enabled = enabledInstance;
                            }
                            
                            JToken enabledHostNamesArray = propertiesValue["enabledHostNames"];
                            if (enabledHostNamesArray != null && enabledHostNamesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken enabledHostNamesValue in ((JArray)enabledHostNamesArray))
                                {
                                    propertiesInstance.EnabledHostNames.Add(((string)enabledHostNamesValue));
                                }
                            }
                            
                            JToken hostNameSslStatesArray = propertiesValue["hostNameSslStates"];
                            if (hostNameSslStatesArray != null && hostNameSslStatesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken hostNameSslStatesValue in ((JArray)hostNameSslStatesArray))
                                {
                                    WebSiteProperties.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSiteProperties.WebSiteHostNameSslState();
                                    propertiesInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                    
                                    JToken nameValue = hostNameSslStatesValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        webSiteHostNameSslStateInstance.Name = nameInstance;
                                    }
                                    
                                    JToken sslStateValue = hostNameSslStatesValue["sslState"];
                                    if (sslStateValue != null && sslStateValue.Type != JTokenType.Null)
                                    {
                                        WebSiteSslState sslStateInstance = ((WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), ((string)sslStateValue), true));
                                        webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                    }
                                    
                                    JToken thumbprintValue = hostNameSslStatesValue["thumbprint"];
                                    if (thumbprintValue != null && thumbprintValue.Type != JTokenType.Null)
                                    {
                                        string thumbprintInstance = ((string)thumbprintValue);
                                        webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                    }
                                    
                                    JToken virtualIPValue = hostNameSslStatesValue["virtualIP"];
                                    if (virtualIPValue != null && virtualIPValue.Type != JTokenType.Null)
                                    {
                                        string virtualIPInstance = ((string)virtualIPValue);
                                        webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                    }
                                    
                                    JToken ipBasedSslResultValue = hostNameSslStatesValue["ipBasedSslResult"];
                                    if (ipBasedSslResultValue != null && ipBasedSslResultValue.Type != JTokenType.Null)
                                    {
                                        string ipBasedSslResultInstance = ((string)ipBasedSslResultValue);
                                        webSiteHostNameSslStateInstance.IpBasedSslResult = ipBasedSslResultInstance;
                                    }
                                    
                                    JToken toUpdateValue = hostNameSslStatesValue["toUpdate"];
                                    if (toUpdateValue != null && toUpdateValue.Type != JTokenType.Null)
                                    {
                                        bool toUpdateInstance = ((bool)toUpdateValue);
                                        webSiteHostNameSslStateInstance.ToUpdate = toUpdateInstance;
                                    }
                                    
                                    JToken toUpdateIpBasedSslValue = hostNameSslStatesValue["toUpdateIpBasedSsl"];
                                    if (toUpdateIpBasedSslValue != null && toUpdateIpBasedSslValue.Type != JTokenType.Null)
                                    {
                                        bool toUpdateIpBasedSslInstance = ((bool)toUpdateIpBasedSslValue);
                                        webSiteHostNameSslStateInstance.ToUpdateIpBasedSsl = toUpdateIpBasedSslInstance;
                                    }
                                }
                            }
                            
                            JToken hostNamesArray = propertiesValue["hostNames"];
                            if (hostNamesArray != null && hostNamesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken hostNamesValue in ((JArray)hostNamesArray))
                                {
                                    propertiesInstance.HostNames.Add(((string)hostNamesValue));
                                }
                            }
                            
                            JToken lastModifiedTimeUtcValue = propertiesValue["lastModifiedTimeUtc"];
                            if (lastModifiedTimeUtcValue != null && lastModifiedTimeUtcValue.Type != JTokenType.Null)
                            {
                                DateTime lastModifiedTimeUtcInstance = ((DateTime)lastModifiedTimeUtcValue);
                                propertiesInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                            }
                            
                            JToken repositorySiteNameValue = propertiesValue["repositorySiteName"];
                            if (repositorySiteNameValue != null && repositorySiteNameValue.Type != JTokenType.Null)
                            {
                                string repositorySiteNameInstance = ((string)repositorySiteNameValue);
                                propertiesInstance.RepositorySiteName = repositorySiteNameInstance;
                            }
                            
                            JToken runtimeAvailabilityStateValue = propertiesValue["runtimeAvailabilityState"];
                            if (runtimeAvailabilityStateValue != null && runtimeAvailabilityStateValue.Type != JTokenType.Null)
                            {
                                WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = ((WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), ((string)runtimeAvailabilityStateValue), true));
                                propertiesInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                            }
                            
                            JToken trafficManagerHostNamesArray = propertiesValue["trafficManagerHostNames"];
                            if (trafficManagerHostNamesArray != null && trafficManagerHostNamesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken trafficManagerHostNamesValue in ((JArray)trafficManagerHostNamesArray))
                                {
                                    propertiesInstance.TrafficManagerHostNames.Add(((string)trafficManagerHostNamesValue));
                                }
                            }
                            
                            JToken selfLinkValue = propertiesValue["selfLink"];
                            if (selfLinkValue != null && selfLinkValue.Type != JTokenType.Null)
                            {
                                Uri selfLinkInstance = TypeConversion.TryParseUri(((string)selfLinkValue));
                                propertiesInstance.Uri = selfLinkInstance;
                            }
                            
                            JToken serverFarmValue = propertiesValue["serverFarm"];
                            if (serverFarmValue != null && serverFarmValue.Type != JTokenType.Null)
                            {
                                string serverFarmInstance = ((string)serverFarmValue);
                                propertiesInstance.ServerFarm = serverFarmInstance;
                            }
                            
                            JToken skuValue = propertiesValue["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                SkuOptions skuInstance = ((SkuOptions)Enum.Parse(typeof(SkuOptions), ((string)skuValue), true));
                                propertiesInstance.Sku = skuInstance;
                            }
                            
                            JToken sitePropertiesValue = propertiesValue["siteProperties"];
                            if (sitePropertiesValue != null && sitePropertiesValue.Type != JTokenType.Null)
                            {
                                WebSiteProperties.SiteProperties sitePropertiesInstance = new WebSiteProperties.SiteProperties();
                                propertiesInstance.Properties = sitePropertiesInstance;
                                
                                JToken appSettingsSequenceElement = ((JToken)sitePropertiesValue["appSettings"]);
                                if (appSettingsSequenceElement != null && appSettingsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in appSettingsSequenceElement)
                                    {
                                        string appSettingsKey = ((string)property.Name);
                                        string appSettingsValue = ((string)property.Value);
                                        sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                    }
                                }
                                
                                JToken metadataSequenceElement = ((JToken)sitePropertiesValue["metadata"]);
                                if (metadataSequenceElement != null && metadataSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property2 in metadataSequenceElement)
                                    {
                                        string metadataKey = ((string)property2.Name);
                                        string metadataValue = ((string)property2.Value);
                                        sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                    }
                                }
                                
                                JToken propertiesSequenceElement = ((JToken)sitePropertiesValue["properties"]);
                                if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property3 in propertiesSequenceElement)
                                    {
                                        string propertiesKey = ((string)property3.Name);
                                        string propertiesValue2 = ((string)property3.Value);
                                        sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue2);
                                    }
                                }
                            }
                            
                            JToken stateValue = propertiesValue["state"];
                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                            {
                                WebSiteState stateInstance = ((WebSiteState)Enum.Parse(typeof(WebSiteState), ((string)stateValue), true));
                                propertiesInstance.State = stateInstance;
                            }
                            
                            JToken usageStateValue = propertiesValue["usageState"];
                            if (usageStateValue != null && usageStateValue.Type != JTokenType.Null)
                            {
                                WebSiteUsageState usageStateInstance = ((WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), ((string)usageStateValue), true));
                                propertiesInstance.UsageState = usageStateInstance;
                            }
                            
                            JToken webSpaceValue = propertiesValue["webSpace"];
                            if (webSpaceValue != null && webSpaceValue.Type != JTokenType.Null)
                            {
                                string webSpaceInstance = ((string)webSpaceValue);
                                propertiesInstance.WebSpace = webSpaceInstance;
                            }
                            
                            JToken provisioningStateValue = propertiesValue["provisioningState"];
                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                            {
                                string provisioningStateInstance = ((string)provisioningStateValue);
                                propertiesInstance.ProvisioningState = provisioningStateInstance;
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            webSiteInstance.Id = idInstance;
                        }
                        
                        JToken nameValue2 = responseDoc["name"];
                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                        {
                            string nameInstance2 = ((string)nameValue2);
                            webSiteInstance.Name = nameInstance2;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            webSiteInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property4 in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property4.Name);
                                string tagsValue = ((string)property4.Value);
                                webSiteInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            webSiteInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        public async Task<WebSiteAppSettingsResult> GetAppSettingsAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "GetAppSettingsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/config/appsettings/list?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteAppSettingsResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteAppSettingsResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        WebSiteAppSettingsEnvelope resourceInstance = new WebSiteAppSettingsEnvelope();
                        result.Resource = resourceInstance;
                        
                        JToken propertiesArray = responseDoc["properties"];
                        if (propertiesArray != null && propertiesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken propertiesValue in ((JArray)propertiesArray))
                            {
                                NameValuePair nameValuePairInstance = new NameValuePair();
                                resourceInstance.Properties.Add(nameValuePairInstance);
                                
                                JToken nameValue = propertiesValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    nameValuePairInstance.Name = nameInstance;
                                }
                                
                                JToken valueValue = propertiesValue["value"];
                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                {
                                    string valueInstance = ((string)valueValue);
                                    nameValuePairInstance.Value = valueInstance;
                                }
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            resourceInstance.Id = idInstance;
                        }
                        
                        JToken nameValue2 = responseDoc["name"];
                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                        {
                            string nameInstance2 = ((string)nameValue2);
                            resourceInstance.Name = nameInstance2;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            resourceInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                resourceInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            resourceInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a schedule configuration for site backups.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Scheduled backup definition.
        /// </returns>
        public async Task<WebSiteGetBackupConfigurationResponse> GetBackupConfigurationAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "GetBackupConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/backup/config?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetBackupConfigurationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetBackupConfigurationResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        BackupScheduleRequestEnvelope backupScheduleInstance = new BackupScheduleRequestEnvelope();
                        result.BackupSchedule = backupScheduleInstance;
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            BackupScheduleRequestResponse propertiesInstance = new BackupScheduleRequestResponse();
                            backupScheduleInstance.Properties = propertiesInstance;
                            
                            JToken enabledValue = propertiesValue["enabled"];
                            if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                            {
                                bool enabledInstance = ((bool)enabledValue);
                                propertiesInstance.Enabled = enabledInstance;
                            }
                            
                            JToken nameValue = propertiesValue["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                propertiesInstance.Name = nameInstance;
                            }
                            
                            JToken storageAccountUrlValue = propertiesValue["storageAccountUrl"];
                            if (storageAccountUrlValue != null && storageAccountUrlValue.Type != JTokenType.Null)
                            {
                                string storageAccountUrlInstance = ((string)storageAccountUrlValue);
                                propertiesInstance.StorageAccountUrl = storageAccountUrlInstance;
                            }
                            
                            JToken backupScheduleValue = propertiesValue["backupSchedule"];
                            if (backupScheduleValue != null && backupScheduleValue.Type != JTokenType.Null)
                            {
                                BackupSchedule backupScheduleInstance2 = new BackupSchedule();
                                propertiesInstance.BackupSchedule = backupScheduleInstance2;
                                
                                JToken frequencyIntervalValue = backupScheduleValue["frequencyInterval"];
                                if (frequencyIntervalValue != null && frequencyIntervalValue.Type != JTokenType.Null)
                                {
                                    int frequencyIntervalInstance = ((int)frequencyIntervalValue);
                                    backupScheduleInstance2.FrequencyInterval = frequencyIntervalInstance;
                                }
                                
                                JToken frequencyUnitValue = backupScheduleValue["frequencyUnit"];
                                if (frequencyUnitValue != null && frequencyUnitValue.Type != JTokenType.Null)
                                {
                                    FrequencyUnit frequencyUnitInstance = ((FrequencyUnit)Enum.Parse(typeof(FrequencyUnit), ((string)frequencyUnitValue), true));
                                    backupScheduleInstance2.FrequencyUnit = frequencyUnitInstance;
                                }
                                
                                JToken keepAtLeastOneBackupValue = backupScheduleValue["keepAtLeastOneBackup"];
                                if (keepAtLeastOneBackupValue != null && keepAtLeastOneBackupValue.Type != JTokenType.Null)
                                {
                                    bool keepAtLeastOneBackupInstance = ((bool)keepAtLeastOneBackupValue);
                                    backupScheduleInstance2.KeepAtLeastOneBackup = keepAtLeastOneBackupInstance;
                                }
                                
                                JToken lastExecutionTimeValue = backupScheduleValue["lastExecutionTime"];
                                if (lastExecutionTimeValue != null && lastExecutionTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastExecutionTimeInstance = ((DateTime)lastExecutionTimeValue);
                                    backupScheduleInstance2.LastExecutionTime = lastExecutionTimeInstance;
                                }
                                
                                JToken retentionPeriodInDaysValue = backupScheduleValue["retentionPeriodInDays"];
                                if (retentionPeriodInDaysValue != null && retentionPeriodInDaysValue.Type != JTokenType.Null)
                                {
                                    int retentionPeriodInDaysInstance = ((int)retentionPeriodInDaysValue);
                                    backupScheduleInstance2.RetentionPeriodInDays = retentionPeriodInDaysInstance;
                                }
                                
                                JToken startTimeValue = backupScheduleValue["startTime"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                    backupScheduleInstance2.StartTime = startTimeInstance;
                                }
                            }
                            
                            JToken databasesArray = propertiesValue["databases"];
                            if (databasesArray != null && databasesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken databasesValue in ((JArray)databasesArray))
                                {
                                    DatabaseBackupSetting databaseBackupSettingInstance = new DatabaseBackupSetting();
                                    propertiesInstance.Databases.Add(databaseBackupSettingInstance);
                                    
                                    JToken connectionStringValue = databasesValue["connectionString"];
                                    if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                    {
                                        string connectionStringInstance = ((string)connectionStringValue);
                                        databaseBackupSettingInstance.ConnectionString = connectionStringInstance;
                                    }
                                    
                                    JToken connectionStringNameValue = databasesValue["connectionStringName"];
                                    if (connectionStringNameValue != null && connectionStringNameValue.Type != JTokenType.Null)
                                    {
                                        string connectionStringNameInstance = ((string)connectionStringNameValue);
                                        databaseBackupSettingInstance.ConnectionStringName = connectionStringNameInstance;
                                    }
                                    
                                    JToken databaseTypeValue = databasesValue["databaseType"];
                                    if (databaseTypeValue != null && databaseTypeValue.Type != JTokenType.Null)
                                    {
                                        string databaseTypeInstance = ((string)databaseTypeValue);
                                        databaseBackupSettingInstance.DatabaseType = databaseTypeInstance;
                                    }
                                    
                                    JToken nameValue2 = databasesValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        databaseBackupSettingInstance.Name = nameInstance2;
                                    }
                                }
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            backupScheduleInstance.Id = idInstance;
                        }
                        
                        JToken nameValue3 = responseDoc["name"];
                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                        {
                            string nameInstance3 = ((string)nameValue3);
                            backupScheduleInstance.Name = nameInstance3;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            backupScheduleInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                backupScheduleInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            backupScheduleInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Configuration operation response.
        /// </returns>
        public async Task<WebSiteGetConfigurationResponse> GetConfigurationAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteGetConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/config/web?";
            url = url + "api-version=2014-06-01";
            if (parameters != null && parameters.PropertiesToInclude != null && parameters.PropertiesToInclude.Count > 0)
            {
                url = url + "&propertiesToInclude=" + Uri.EscapeDataString(string.Join(",", parameters.PropertiesToInclude));
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetConfigurationResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetConfigurationResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    JToken siteConfigValue = responseDoc["properties"];
                    if (siteConfigValue != null && siteConfigValue.Type != JTokenType.Null)
                    {
                        WebSiteGetConfigurationResponse siteConfigInstance = new WebSiteGetConfigurationResponse();
                        
                        JToken appSettingsSequenceElement = ((JToken)siteConfigValue["appSettings"]);
                        if (appSettingsSequenceElement != null && appSettingsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in appSettingsSequenceElement)
                            {
                                string appSettingsKey = ((string)property.Name);
                                string appSettingsValue = ((string)property.Value);
                                siteConfigInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                            }
                        }
                        
                        JToken connectionStringsArray = siteConfigValue["connectionStrings"];
                        if (connectionStringsArray != null && connectionStringsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken connectionStringsValue in ((JArray)connectionStringsArray))
                            {
                                ConnectionStringInfo connStringInfoInstance = new ConnectionStringInfo();
                                siteConfigInstance.ConnectionStrings.Add(connStringInfoInstance);
                                
                                JToken connectionStringValue = connectionStringsValue["connectionString"];
                                if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance = ((string)connectionStringValue);
                                    connStringInfoInstance.ConnectionString = connectionStringInstance;
                                }
                                
                                JToken nameValue = connectionStringsValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    connStringInfoInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = connectionStringsValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    DatabaseServerType typeInstance = ((DatabaseServerType)Enum.Parse(typeof(DatabaseServerType), ((string)typeValue), true));
                                    connStringInfoInstance.Type = typeInstance;
                                }
                            }
                        }
                        
                        JToken defaultDocumentsArray = siteConfigValue["defaultDocuments"];
                        if (defaultDocumentsArray != null && defaultDocumentsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken defaultDocumentsValue in ((JArray)defaultDocumentsArray))
                            {
                                siteConfigInstance.DefaultDocuments.Add(((string)defaultDocumentsValue));
                            }
                        }
                        
                        JToken detailedErrorLoggingEnabledValue = siteConfigValue["detailedErrorLoggingEnabled"];
                        if (detailedErrorLoggingEnabledValue != null && detailedErrorLoggingEnabledValue.Type != JTokenType.Null)
                        {
                            bool detailedErrorLoggingEnabledInstance = ((bool)detailedErrorLoggingEnabledValue);
                            siteConfigInstance.DetailedErrorLoggingEnabled = detailedErrorLoggingEnabledInstance;
                        }
                        
                        JToken documentRootValue = siteConfigValue["documentRoot"];
                        if (documentRootValue != null && documentRootValue.Type != JTokenType.Null)
                        {
                            string documentRootInstance = ((string)documentRootValue);
                            siteConfigInstance.DocumentRoot = documentRootInstance;
                        }
                        
                        JToken handlerMappingsArray = siteConfigValue["handlerMappings"];
                        if (handlerMappingsArray != null && handlerMappingsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken handlerMappingsValue in ((JArray)handlerMappingsArray))
                            {
                                WebSiteGetConfigurationResponse.HandlerMapping handlerMappingInstance = new WebSiteGetConfigurationResponse.HandlerMapping();
                                siteConfigInstance.HandlerMappings.Add(handlerMappingInstance);
                                
                                JToken argumentsValue = handlerMappingsValue["arguments"];
                                if (argumentsValue != null && argumentsValue.Type != JTokenType.Null)
                                {
                                    string argumentsInstance = ((string)argumentsValue);
                                    handlerMappingInstance.Arguments = argumentsInstance;
                                }
                                
                                JToken extensionValue = handlerMappingsValue["extension"];
                                if (extensionValue != null && extensionValue.Type != JTokenType.Null)
                                {
                                    string extensionInstance = ((string)extensionValue);
                                    handlerMappingInstance.Extension = extensionInstance;
                                }
                                
                                JToken scriptProcessorValue = handlerMappingsValue["scriptProcessor"];
                                if (scriptProcessorValue != null && scriptProcessorValue.Type != JTokenType.Null)
                                {
                                    string scriptProcessorInstance = ((string)scriptProcessorValue);
                                    handlerMappingInstance.ScriptProcessor = scriptProcessorInstance;
                                }
                            }
                        }
                        
                        JToken httpLoggingEnabledValue = siteConfigValue["httpLoggingEnabled"];
                        if (httpLoggingEnabledValue != null && httpLoggingEnabledValue.Type != JTokenType.Null)
                        {
                            bool httpLoggingEnabledInstance = ((bool)httpLoggingEnabledValue);
                            siteConfigInstance.HttpLoggingEnabled = httpLoggingEnabledInstance;
                        }
                        
                        JToken logsDirectorySizeLimitValue = siteConfigValue["logsDirectorySizeLimit"];
                        if (logsDirectorySizeLimitValue != null && logsDirectorySizeLimitValue.Type != JTokenType.Null)
                        {
                            int logsDirectorySizeLimitInstance = ((int)logsDirectorySizeLimitValue);
                            siteConfigInstance.LogsDirectorySizeLimit = logsDirectorySizeLimitInstance;
                        }
                        
                        JToken managedPipelineModeValue = siteConfigValue["managedPipelineMode"];
                        if (managedPipelineModeValue != null && managedPipelineModeValue.Type != JTokenType.Null)
                        {
                            ManagedPipelineMode managedPipelineModeInstance = ((ManagedPipelineMode)Enum.Parse(typeof(ManagedPipelineMode), ((string)managedPipelineModeValue), true));
                            siteConfigInstance.ManagedPipelineMode = managedPipelineModeInstance;
                        }
                        
                        JToken metadataSequenceElement = ((JToken)siteConfigValue["metadata"]);
                        if (metadataSequenceElement != null && metadataSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property2 in metadataSequenceElement)
                            {
                                string metadataKey = ((string)property2.Name);
                                string metadataValue = ((string)property2.Value);
                                siteConfigInstance.Metadata.Add(metadataKey, metadataValue);
                            }
                        }
                        
                        JToken netFrameworkVersionValue = siteConfigValue["netFrameworkVersion"];
                        if (netFrameworkVersionValue != null && netFrameworkVersionValue.Type != JTokenType.Null)
                        {
                            string netFrameworkVersionInstance = ((string)netFrameworkVersionValue);
                            siteConfigInstance.NetFrameworkVersion = netFrameworkVersionInstance;
                        }
                        
                        JToken numberOfWorkersValue = siteConfigValue["numberOfWorkers"];
                        if (numberOfWorkersValue != null && numberOfWorkersValue.Type != JTokenType.Null)
                        {
                            int numberOfWorkersInstance = ((int)numberOfWorkersValue);
                            siteConfigInstance.NumberOfWorkers = numberOfWorkersInstance;
                        }
                        
                        JToken phpVersionValue = siteConfigValue["phpVersion"];
                        if (phpVersionValue != null && phpVersionValue.Type != JTokenType.Null)
                        {
                            string phpVersionInstance = ((string)phpVersionValue);
                            siteConfigInstance.PhpVersion = phpVersionInstance;
                        }
                        
                        JToken publishingPasswordValue = siteConfigValue["publishingPassword"];
                        if (publishingPasswordValue != null && publishingPasswordValue.Type != JTokenType.Null)
                        {
                            string publishingPasswordInstance = ((string)publishingPasswordValue);
                            siteConfigInstance.PublishingPassword = publishingPasswordInstance;
                        }
                        
                        JToken publishingUsernameValue = siteConfigValue["publishingUsername"];
                        if (publishingUsernameValue != null && publishingUsernameValue.Type != JTokenType.Null)
                        {
                            string publishingUsernameInstance = ((string)publishingUsernameValue);
                            siteConfigInstance.PublishingUserName = publishingUsernameInstance;
                        }
                        
                        JToken remoteDebuggingEnabledValue = siteConfigValue["RemoteDebuggingEnabled"];
                        if (remoteDebuggingEnabledValue != null && remoteDebuggingEnabledValue.Type != JTokenType.Null)
                        {
                            bool remoteDebuggingEnabledInstance = ((bool)remoteDebuggingEnabledValue);
                            siteConfigInstance.RemoteDebuggingEnabled = remoteDebuggingEnabledInstance;
                        }
                        
                        JToken remoteDebuggingVersionValue = siteConfigValue["remoteDebuggingVersion"];
                        if (remoteDebuggingVersionValue != null && remoteDebuggingVersionValue.Type != JTokenType.Null)
                        {
                            RemoteDebuggingVersion remoteDebuggingVersionInstance = ((RemoteDebuggingVersion)Enum.Parse(typeof(RemoteDebuggingVersion), ((string)remoteDebuggingVersionValue), true));
                            siteConfigInstance.RemoteDebuggingVersion = remoteDebuggingVersionInstance;
                        }
                        
                        JToken requestTracingEnabledValue = siteConfigValue["requestTracingEnabled"];
                        if (requestTracingEnabledValue != null && requestTracingEnabledValue.Type != JTokenType.Null)
                        {
                            bool requestTracingEnabledInstance = ((bool)requestTracingEnabledValue);
                            siteConfigInstance.RequestTracingEnabled = requestTracingEnabledInstance;
                        }
                        
                        JToken requestTracingExpirationTimeValue = siteConfigValue["requestTracingExpirationTime"];
                        if (requestTracingExpirationTimeValue != null && requestTracingExpirationTimeValue.Type != JTokenType.Null)
                        {
                            DateTime requestTracingExpirationTimeInstance = ((DateTime)requestTracingExpirationTimeValue);
                            siteConfigInstance.RequestTracingExpirationTime = requestTracingExpirationTimeInstance;
                        }
                        
                        JToken scmTypeValue = siteConfigValue["scmType"];
                        if (scmTypeValue != null && scmTypeValue.Type != JTokenType.Null)
                        {
                            string scmTypeInstance = ((string)scmTypeValue);
                            siteConfigInstance.ScmType = scmTypeInstance;
                        }
                        
                        JToken use32BitWorkerProcessValue = siteConfigValue["use32BitWorkerProcess"];
                        if (use32BitWorkerProcessValue != null && use32BitWorkerProcessValue.Type != JTokenType.Null)
                        {
                            bool use32BitWorkerProcessInstance = ((bool)use32BitWorkerProcessValue);
                            siteConfigInstance.Use32BitWorkerProcess = use32BitWorkerProcessInstance;
                        }
                        
                        JToken webSocketsEnabledValue = siteConfigValue["webSocketsEnabled"];
                        if (webSocketsEnabledValue != null && webSocketsEnabledValue.Type != JTokenType.Null)
                        {
                            bool webSocketsEnabledInstance = ((bool)webSocketsEnabledValue);
                            siteConfigInstance.WebSocketsEnabled = webSocketsEnabledInstance;
                        }

                        // suwatch
                        result = siteConfigInstance;
                    }

                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        public async Task<WebSiteConnectionStringsResult> GetConnectionStringsAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "GetConnectionStringsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/config/connectionstrings/list?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteConnectionStringsResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteConnectionStringsResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        WebSiteConnectionStringsEnvelope resourceInstance = new WebSiteConnectionStringsEnvelope();
                        result.Resource = resourceInstance;
                        
                        JToken propertiesArray = responseDoc["properties"];
                        if (propertiesArray != null && propertiesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken propertiesValue in ((JArray)propertiesArray))
                            {
                                ConnectionStringInfo connStringInfoInstance = new ConnectionStringInfo();
                                resourceInstance.Properties.Add(connStringInfoInstance);
                                
                                JToken connectionStringValue = propertiesValue["connectionString"];
                                if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance = ((string)connectionStringValue);
                                    connStringInfoInstance.ConnectionString = connectionStringInstance;
                                }
                                
                                JToken nameValue = propertiesValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    connStringInfoInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = propertiesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    DatabaseServerType typeInstance = ((DatabaseServerType)Enum.Parse(typeof(DatabaseServerType), ((string)typeValue), true));
                                    connStringInfoInstance.Type = typeInstance;
                                }
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            resourceInstance.Id = idInstance;
                        }
                        
                        JToken nameValue2 = responseDoc["name"];
                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                        {
                            string nameInstance2 = ((string)nameValue2);
                            resourceInstance.Name = nameInstance2;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            resourceInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                resourceInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken typeValue2 = responseDoc["type"];
                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                        {
                            string typeInstance2 = ((string)typeValue2);
                            resourceInstance.Type = typeInstance2;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public async Task<WebSiteGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteGetHistoricalUsageMetricsParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "GetHistoricalUsageMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/metrics?";
            url = url + "api-version=2014-06-01";
            if (parameters.MetricNames != null && parameters.MetricNames.Count > 0)
            {
                url = url + "&names=" + Uri.EscapeDataString(string.Join(",", parameters.MetricNames));
            }
            if (parameters.StartTime != null)
            {
                url = url + "&StartTime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.StartTime.Value.ToUniversalTime()));
            }
            if (parameters.EndTime != null)
            {
                url = url + "&EndTime=" + Uri.EscapeDataString(string.Format(CultureInfo.InvariantCulture, "{0:O}", parameters.EndTime.Value.ToUniversalTime()));
            }
            if (parameters.TimeGrain != null)
            {
                url = url + "&timeGrain=" + Uri.EscapeDataString(parameters.TimeGrain != null ? parameters.TimeGrain.Trim() : "");
            }
            url = url + "&details=" + Uri.EscapeDataString(parameters.IncludeInstanceBreakdown.ToString().ToLower());
            url = url + "&slotView=" + Uri.EscapeDataString(parameters.SlotView.ToString().ToLower());
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetHistoricalUsageMetricsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetHistoricalUsageMetricsResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken propertiesArray = responseDoc["properties"];
                        if (propertiesArray != null && propertiesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken propertiesValue in ((JArray)propertiesArray))
                            {
                                HistoricalUsageMetric historicalUsageMetricInstance = new HistoricalUsageMetric();
                                result.UsageMetrics.Add(historicalUsageMetricInstance);
                                
                                JToken codeValue = propertiesValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    historicalUsageMetricInstance.Code = codeInstance;
                                }
                                
                                JToken dataValue = propertiesValue["data"];
                                if (dataValue != null && dataValue.Type != JTokenType.Null)
                                {
                                    HistoricalUsageMetricData dataInstance = new HistoricalUsageMetricData();
                                    historicalUsageMetricInstance.Data = dataInstance;
                                    
                                    JToken displayNameValue = dataValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        dataInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken endTimeValue = dataValue["EndTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime endTimeInstance = ((DateTime)endTimeValue);
                                        dataInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken nameValue = dataValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        dataInstance.Name = nameInstance;
                                    }
                                    
                                    JToken primaryAggregationTypeValue = dataValue["primaryAggregationType"];
                                    if (primaryAggregationTypeValue != null && primaryAggregationTypeValue.Type != JTokenType.Null)
                                    {
                                        string primaryAggregationTypeInstance = ((string)primaryAggregationTypeValue);
                                        dataInstance.PrimaryAggregationType = primaryAggregationTypeInstance;
                                    }
                                    
                                    JToken startTimeValue = dataValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                        dataInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken timeGrainValue = dataValue["timeGrain"];
                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                    {
                                        string timeGrainInstance = ((string)timeGrainValue);
                                        dataInstance.TimeGrain = timeGrainInstance;
                                    }
                                    
                                    JToken unitValue = dataValue["unit"];
                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                    {
                                        string unitInstance = ((string)unitValue);
                                        dataInstance.Unit = unitInstance;
                                    }
                                    
                                    JToken valuesArray = dataValue["values"];
                                    if (valuesArray != null && valuesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken valuesValue in ((JArray)valuesArray))
                                        {
                                            HistoricalUsageMetricSample metricSampleInstance = new HistoricalUsageMetricSample();
                                            dataInstance.Values.Add(metricSampleInstance);
                                            
                                            JToken countValue = valuesValue["count"];
                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                            {
                                                int countInstance = ((int)countValue);
                                                metricSampleInstance.Count = countInstance;
                                            }
                                            
                                            JToken maximumValue = valuesValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                string maximumInstance = ((string)maximumValue);
                                                metricSampleInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken minimumValue = valuesValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                string minimumInstance = ((string)minimumValue);
                                                metricSampleInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken timeCreatedValue = valuesValue["timeCreated"];
                                            if (timeCreatedValue != null && timeCreatedValue.Type != JTokenType.Null)
                                            {
                                                DateTime timeCreatedInstance = ((DateTime)timeCreatedValue);
                                                metricSampleInstance.TimeCreated = timeCreatedInstance;
                                            }
                                            
                                            JToken totalValue = valuesValue["total"];
                                            if (totalValue != null && totalValue.Type != JTokenType.Null)
                                            {
                                                string totalInstance = ((string)totalValue);
                                                metricSampleInstance.Total = totalInstance;
                                            }
                                            
                                            JToken instanceNameValue = valuesValue["instanceName"];
                                            if (instanceNameValue != null && instanceNameValue.Type != JTokenType.Null)
                                            {
                                                string instanceNameInstance = ((string)instanceNameValue);
                                                metricSampleInstance.InstanceName = instanceNameInstance;
                                            }
                                        }
                                    }
                                }
                                
                                JToken messageValue = propertiesValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    historicalUsageMetricInstance.Message = messageInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        public async Task<WebSiteMetadataResult> GetMetadataAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "GetMetadataAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/config/metadata/list?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteMetadataResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteMetadataResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        WebSiteMetadataEnvelope resourceInstance = new WebSiteMetadataEnvelope();
                        result.Resource = resourceInstance;
                        
                        JToken propertiesArray = responseDoc["properties"];
                        if (propertiesArray != null && propertiesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken propertiesValue in ((JArray)propertiesArray))
                            {
                                NameValuePair nameValuePairInstance = new NameValuePair();
                                resourceInstance.Properties.Add(nameValuePairInstance);
                                
                                JToken nameValue = propertiesValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    nameValuePairInstance.Name = nameInstance;
                                }
                                
                                JToken valueValue = propertiesValue["value"];
                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                {
                                    string valueInstance = ((string)valueValue);
                                    nameValuePairInstance.Value = valueInstance;
                                }
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            resourceInstance.Id = idInstance;
                        }
                        
                        JToken nameValue2 = responseDoc["name"];
                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                        {
                            string nameInstance2 = ((string)nameValue2);
                            resourceInstance.Name = nameInstance2;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            resourceInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                resourceInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            resourceInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get publishing credentials for the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Publishing credentials for the website.
        /// </returns>
        public async Task<WebSitePublishingCredentialsResult> GetPublishingCredentialsAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "GetPublishingCredentialsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/config/publishingcredentials/list?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSitePublishingCredentialsResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSitePublishingCredentialsResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        WebSitePublishingCredentialsEnvelope resourceInstance = new WebSitePublishingCredentialsEnvelope();
                        result.Resource = resourceInstance;
                        
                        JToken propertiesValue = responseDoc["properties"];
                        if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                        {
                            PublishingCredentials propertiesInstance = new PublishingCredentials();
                            resourceInstance.Properties = propertiesInstance;
                            
                            JToken publishingPasswordValue = propertiesValue["publishingPassword"];
                            if (publishingPasswordValue != null && publishingPasswordValue.Type != JTokenType.Null)
                            {
                                string publishingPasswordInstance = ((string)publishingPasswordValue);
                                propertiesInstance.PublishingPassword = publishingPasswordInstance;
                            }
                            
                            JToken publishingUserNameValue = propertiesValue["publishingUserName"];
                            if (publishingUserNameValue != null && publishingUserNameValue.Type != JTokenType.Null)
                            {
                                string publishingUserNameInstance = ((string)publishingUserNameValue);
                                propertiesInstance.PublishingUserName = publishingUserNameInstance;
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            resourceInstance.Id = idInstance;
                        }
                        
                        JToken nameValue = responseDoc["name"];
                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                        {
                            string nameInstance = ((string)nameValue);
                            resourceInstance.Name = nameInstance;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            resourceInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                resourceInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            resourceInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the publish settings information for a web site.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public async Task<WebSiteGetPublishProfileResponse> GetPublishProfileAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "GetPublishProfileAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/publishxml?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetPublishProfileResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetPublishProfileResponse();
                    XDocument responseDoc = XDocument.Parse(responseContent);
                    
                    XElement publishDataSequenceElement = responseDoc.Element(XName.Get("publishData", ""));
                    if (publishDataSequenceElement != null)
                    {
                        foreach (XElement publishDataElement in publishDataSequenceElement.Elements(XName.Get("publishProfile", "")))
                        {
                            WebSiteGetPublishProfileResponse.PublishProfile publishProfileInstance = new WebSiteGetPublishProfileResponse.PublishProfile();
                            result.PublishProfiles.Add(publishProfileInstance);
                            
                            XAttribute profileNameAttribute = publishDataElement.Attribute(XName.Get("profileName", ""));
                            if (profileNameAttribute != null)
                            {
                                publishProfileInstance.ProfileName = profileNameAttribute.Value;
                            }
                            
                            XAttribute publishMethodAttribute = publishDataElement.Attribute(XName.Get("publishMethod", ""));
                            if (publishMethodAttribute != null)
                            {
                                publishProfileInstance.PublishMethod = publishMethodAttribute.Value;
                            }
                            
                            XAttribute publishUrlAttribute = publishDataElement.Attribute(XName.Get("publishUrl", ""));
                            if (publishUrlAttribute != null)
                            {
                                publishProfileInstance.PublishUrl = publishUrlAttribute.Value;
                            }
                            
                            XAttribute msdeploySiteAttribute = publishDataElement.Attribute(XName.Get("msdeploySite", ""));
                            if (msdeploySiteAttribute != null)
                            {
                                publishProfileInstance.MSDeploySite = msdeploySiteAttribute.Value;
                            }
                            
                            XAttribute ftpPassiveModeAttribute = publishDataElement.Attribute(XName.Get("ftpPassiveMode", ""));
                            if (ftpPassiveModeAttribute != null)
                            {
                                publishProfileInstance.FtpPassiveMode = bool.Parse(ftpPassiveModeAttribute.Value);
                            }
                            
                            XAttribute userNameAttribute = publishDataElement.Attribute(XName.Get("userName", ""));
                            if (userNameAttribute != null)
                            {
                                publishProfileInstance.UserName = userNameAttribute.Value;
                            }
                            
                            XAttribute userPWDAttribute = publishDataElement.Attribute(XName.Get("userPWD", ""));
                            if (userPWDAttribute != null)
                            {
                                publishProfileInstance.UserPassword = userPWDAttribute.Value;
                            }
                            
                            XAttribute destinationAppUrlAttribute = publishDataElement.Attribute(XName.Get("destinationAppUrl", ""));
                            if (destinationAppUrlAttribute != null)
                            {
                                publishProfileInstance.DestinationAppUri = TypeConversion.TryParseUri(destinationAppUrlAttribute.Value);
                            }
                            
                            XAttribute sQLServerDBConnectionStringAttribute = publishDataElement.Attribute(XName.Get("SQLServerDBConnectionString", ""));
                            if (sQLServerDBConnectionStringAttribute != null)
                            {
                                publishProfileInstance.SqlServerConnectionString = sQLServerDBConnectionStringAttribute.Value;
                            }
                            
                            XAttribute mySQLDBConnectionStringAttribute = publishDataElement.Attribute(XName.Get("mySQLDBConnectionString", ""));
                            if (mySQLDBConnectionStringAttribute != null)
                            {
                                publishProfileInstance.MySqlConnectionString = mySQLDBConnectionStringAttribute.Value;
                            }
                            
                            XAttribute hostingProviderForumLinkAttribute = publishDataElement.Attribute(XName.Get("hostingProviderForumLink", ""));
                            if (hostingProviderForumLinkAttribute != null)
                            {
                                publishProfileInstance.HostingProviderForumUri = TypeConversion.TryParseUri(hostingProviderForumLinkAttribute.Value);
                            }
                            
                            XAttribute controlPanelLinkAttribute = publishDataElement.Attribute(XName.Get("controlPanelLink", ""));
                            if (controlPanelLinkAttribute != null)
                            {
                                publishProfileInstance.ControlPanelUri = TypeConversion.TryParseUri(controlPanelLinkAttribute.Value);
                            }
                            
                            XElement databasesSequenceElement = publishDataElement.Element(XName.Get("databases", ""));
                            if (databasesSequenceElement != null)
                            {
                                foreach (XElement databasesElement in databasesSequenceElement.Elements(XName.Get("add", "")))
                                {
                                    WebSiteGetPublishProfileResponse.Database addInstance = new WebSiteGetPublishProfileResponse.Database();
                                    publishProfileInstance.Databases.Add(addInstance);
                                    
                                    XAttribute nameAttribute = databasesElement.Attribute(XName.Get("name", ""));
                                    if (nameAttribute != null)
                                    {
                                        addInstance.Name = nameAttribute.Value;
                                    }
                                    
                                    XAttribute connectionStringAttribute = databasesElement.Attribute(XName.Get("connectionString", ""));
                                    if (connectionStringAttribute != null)
                                    {
                                        addInstance.ConnectionString = connectionStringAttribute.Value;
                                    }
                                    
                                    XAttribute providerNameAttribute = databasesElement.Attribute(XName.Get("providerName", ""));
                                    if (providerNameAttribute != null)
                                    {
                                        addInstance.ProviderName = providerNameAttribute.Value;
                                    }
                                    
                                    XAttribute typeAttribute = databasesElement.Attribute(XName.Get("type", ""));
                                    if (typeAttribute != null)
                                    {
                                        addInstance.Type = typeAttribute.Value;
                                    }
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public async Task<WebSiteGetRepositoryResponse> GetRepositoryAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "GetRepositoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/repository?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetRepositoryResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetRepositoryResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken uriValue = responseDoc["uri"];
                        if (uriValue != null && uriValue.Type != JTokenType.Null)
                        {
                            Uri uriInstance = TypeConversion.TryParseUri(((string)uriValue));
                            result.Uri = uriInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get a web site's current usage metrics. The metrics returned
        /// include CPU Time, Data In, Data Out, Local bytes read, Local bytes
        /// written, Network bytes read, Network bytes written, WP stop
        /// requests, Memory Usage, CPU Time - Minute Limit, and File System
        /// Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public async Task<WebSiteGetUsageMetricsResponse> GetUsageMetricsAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "GetUsageMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/usages?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetUsageMetricsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetUsageMetricsResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    JToken usagesValue = responseDoc["usages"];
                    if (usagesValue != null && usagesValue.Type != JTokenType.Null)
                    {
                        WebSiteGetUsageMetricsResponse usagesInstance = new WebSiteGetUsageMetricsResponse();
                        
                        JToken usageMetricsArray = usagesValue;
                        if (usageMetricsArray != null && usageMetricsArray.Type != JTokenType.Null)
                        {
                            foreach (JToken usageMetricsValue in ((JArray)usageMetricsArray))
                            {
                                WebSiteGetUsageMetricsResponse.UsageMetric usageInstance = new WebSiteGetUsageMetricsResponse.UsageMetric();
                                usagesInstance.UsageMetrics.Add(usageInstance);
                                
                                JToken currentValueValue = usageMetricsValue["currentValue"];
                                if (currentValueValue != null && currentValueValue.Type != JTokenType.Null)
                                {
                                    string currentValueInstance = ((string)currentValueValue);
                                    usageInstance.CurrentValue = currentValueInstance;
                                }
                                
                                JToken displayNameValue = usageMetricsValue["displayName"];
                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                {
                                    string displayNameInstance = ((string)displayNameValue);
                                    usageInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken limitValue = usageMetricsValue["limit"];
                                if (limitValue != null && limitValue.Type != JTokenType.Null)
                                {
                                    string limitInstance = ((string)limitValue);
                                    usageInstance.Limit = limitInstance;
                                }
                                
                                JToken nameValue = usageMetricsValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    usageInstance.Name = nameInstance;
                                }
                                
                                JToken nextResetTimeValue = usageMetricsValue["nextResetTime"];
                                if (nextResetTimeValue != null && nextResetTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime nextResetTimeInstance = ((DateTime)nextResetTimeValue);
                                    usageInstance.NextResetTime = nextResetTimeInstance;
                                }
                                
                                JToken resourceNameValue = usageMetricsValue["resourceName"];
                                if (resourceNameValue != null && resourceNameValue.Type != JTokenType.Null)
                                {
                                    string resourceNameInstance = ((string)resourceNameValue);
                                    usageInstance.ResourceName = resourceNameInstance;
                                }
                                
                                JToken unitValue = usageMetricsValue["unit"];
                                if (unitValue != null && unitValue.Type != JTokenType.Null)
                                {
                                    string unitInstance = ((string)unitValue);
                                    usageInstance.Unit = unitInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the Web Sites in a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Optional. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public async Task<WebSiteListResponse> ListAsync(string resourceGroupName, string webSiteName, WebSiteListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites";
            if (webSiteName != null)
            {
                url = url + "/" + Uri.EscapeDataString(webSiteName != null ? webSiteName.Trim() : "") + "/slots/";
            }
            url = url + "?";
            url = url + "api-version=2014-06-01";
            if (parameters != null && parameters.PropertiesToInclude != null && parameters.PropertiesToInclude.Count > 0)
            {
                url = url + "&propertiesToInclude=" + Uri.EscapeDataString(string.Join(",", parameters.PropertiesToInclude));
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteListResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteListResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        JToken valueArray = responseDoc["value"];
                        if (valueArray != null && valueArray.Type != JTokenType.Null)
                        {
                            foreach (JToken valueValue in ((JArray)valueArray))
                            {
                                WebSite webSiteInstance = new WebSite();
                                result.WebSites.Add(webSiteInstance);
                                
                                JToken propertiesValue = valueValue["properties"];
                                if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                {
                                    WebSiteProperties propertiesInstance = new WebSiteProperties();
                                    webSiteInstance.Properties = propertiesInstance;
                                    
                                    JToken adminEnabledValue = propertiesValue["adminEnabled"];
                                    if (adminEnabledValue != null && adminEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool adminEnabledInstance = ((bool)adminEnabledValue);
                                        propertiesInstance.AdminEnabled = adminEnabledInstance;
                                    }
                                    
                                    JToken availabilityStateValue = propertiesValue["availabilityState"];
                                    if (availabilityStateValue != null && availabilityStateValue.Type != JTokenType.Null)
                                    {
                                        WebSpaceAvailabilityState availabilityStateInstance = ((WebSpaceAvailabilityState)Enum.Parse(typeof(WebSpaceAvailabilityState), ((string)availabilityStateValue), true));
                                        propertiesInstance.AvailabilityState = availabilityStateInstance;
                                    }
                                    
                                    JToken enabledValue = propertiesValue["enabled"];
                                    if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                    {
                                        bool enabledInstance = ((bool)enabledValue);
                                        propertiesInstance.Enabled = enabledInstance;
                                    }
                                    
                                    JToken enabledHostNamesArray = propertiesValue["enabledHostNames"];
                                    if (enabledHostNamesArray != null && enabledHostNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken enabledHostNamesValue in ((JArray)enabledHostNamesArray))
                                        {
                                            propertiesInstance.EnabledHostNames.Add(((string)enabledHostNamesValue));
                                        }
                                    }
                                    
                                    JToken hostNameSslStatesArray = propertiesValue["hostNameSslStates"];
                                    if (hostNameSslStatesArray != null && hostNameSslStatesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken hostNameSslStatesValue in ((JArray)hostNameSslStatesArray))
                                        {
                                            WebSiteProperties.WebSiteHostNameSslState webSiteHostNameSslStateInstance = new WebSiteProperties.WebSiteHostNameSslState();
                                            propertiesInstance.HostNameSslStates.Add(webSiteHostNameSslStateInstance);
                                            
                                            JToken nameValue = hostNameSslStatesValue["name"];
                                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                                            {
                                                string nameInstance = ((string)nameValue);
                                                webSiteHostNameSslStateInstance.Name = nameInstance;
                                            }
                                            
                                            JToken sslStateValue = hostNameSslStatesValue["sslState"];
                                            if (sslStateValue != null && sslStateValue.Type != JTokenType.Null)
                                            {
                                                WebSiteSslState sslStateInstance = ((WebSiteSslState)Enum.Parse(typeof(WebSiteSslState), ((string)sslStateValue), true));
                                                webSiteHostNameSslStateInstance.SslState = sslStateInstance;
                                            }
                                            
                                            JToken thumbprintValue = hostNameSslStatesValue["thumbprint"];
                                            if (thumbprintValue != null && thumbprintValue.Type != JTokenType.Null)
                                            {
                                                string thumbprintInstance = ((string)thumbprintValue);
                                                webSiteHostNameSslStateInstance.Thumbprint = thumbprintInstance;
                                            }
                                            
                                            JToken virtualIPValue = hostNameSslStatesValue["virtualIP"];
                                            if (virtualIPValue != null && virtualIPValue.Type != JTokenType.Null)
                                            {
                                                string virtualIPInstance = ((string)virtualIPValue);
                                                webSiteHostNameSslStateInstance.VirtualIP = virtualIPInstance;
                                            }
                                            
                                            JToken ipBasedSslResultValue = hostNameSslStatesValue["ipBasedSslResult"];
                                            if (ipBasedSslResultValue != null && ipBasedSslResultValue.Type != JTokenType.Null)
                                            {
                                                string ipBasedSslResultInstance = ((string)ipBasedSslResultValue);
                                                webSiteHostNameSslStateInstance.IpBasedSslResult = ipBasedSslResultInstance;
                                            }
                                            
                                            JToken toUpdateValue = hostNameSslStatesValue["toUpdate"];
                                            if (toUpdateValue != null && toUpdateValue.Type != JTokenType.Null)
                                            {
                                                bool toUpdateInstance = ((bool)toUpdateValue);
                                                webSiteHostNameSslStateInstance.ToUpdate = toUpdateInstance;
                                            }
                                            
                                            JToken toUpdateIpBasedSslValue = hostNameSslStatesValue["toUpdateIpBasedSsl"];
                                            if (toUpdateIpBasedSslValue != null && toUpdateIpBasedSslValue.Type != JTokenType.Null)
                                            {
                                                bool toUpdateIpBasedSslInstance = ((bool)toUpdateIpBasedSslValue);
                                                webSiteHostNameSslStateInstance.ToUpdateIpBasedSsl = toUpdateIpBasedSslInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken hostNamesArray = propertiesValue["hostNames"];
                                    if (hostNamesArray != null && hostNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken hostNamesValue in ((JArray)hostNamesArray))
                                        {
                                            propertiesInstance.HostNames.Add(((string)hostNamesValue));
                                        }
                                    }
                                    
                                    JToken lastModifiedTimeUtcValue = propertiesValue["lastModifiedTimeUtc"];
                                    if (lastModifiedTimeUtcValue != null && lastModifiedTimeUtcValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastModifiedTimeUtcInstance = ((DateTime)lastModifiedTimeUtcValue);
                                        propertiesInstance.LastModifiedTimeUtc = lastModifiedTimeUtcInstance;
                                    }
                                    
                                    JToken repositorySiteNameValue = propertiesValue["repositorySiteName"];
                                    if (repositorySiteNameValue != null && repositorySiteNameValue.Type != JTokenType.Null)
                                    {
                                        string repositorySiteNameInstance = ((string)repositorySiteNameValue);
                                        propertiesInstance.RepositorySiteName = repositorySiteNameInstance;
                                    }
                                    
                                    JToken runtimeAvailabilityStateValue = propertiesValue["runtimeAvailabilityState"];
                                    if (runtimeAvailabilityStateValue != null && runtimeAvailabilityStateValue.Type != JTokenType.Null)
                                    {
                                        WebSiteRuntimeAvailabilityState runtimeAvailabilityStateInstance = ((WebSiteRuntimeAvailabilityState)Enum.Parse(typeof(WebSiteRuntimeAvailabilityState), ((string)runtimeAvailabilityStateValue), true));
                                        propertiesInstance.RuntimeAvailabilityState = runtimeAvailabilityStateInstance;
                                    }
                                    
                                    JToken trafficManagerHostNamesArray = propertiesValue["trafficManagerHostNames"];
                                    if (trafficManagerHostNamesArray != null && trafficManagerHostNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken trafficManagerHostNamesValue in ((JArray)trafficManagerHostNamesArray))
                                        {
                                            propertiesInstance.TrafficManagerHostNames.Add(((string)trafficManagerHostNamesValue));
                                        }
                                    }
                                    
                                    JToken selfLinkValue = propertiesValue["selfLink"];
                                    if (selfLinkValue != null && selfLinkValue.Type != JTokenType.Null)
                                    {
                                        Uri selfLinkInstance = TypeConversion.TryParseUri(((string)selfLinkValue));
                                        propertiesInstance.Uri = selfLinkInstance;
                                    }
                                    
                                    JToken serverFarmValue = propertiesValue["serverFarm"];
                                    if (serverFarmValue != null && serverFarmValue.Type != JTokenType.Null)
                                    {
                                        string serverFarmInstance = ((string)serverFarmValue);
                                        propertiesInstance.ServerFarm = serverFarmInstance;
                                    }
                                    
                                    JToken skuValue = propertiesValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        SkuOptions skuInstance = ((SkuOptions)Enum.Parse(typeof(SkuOptions), ((string)skuValue), true));
                                        propertiesInstance.Sku = skuInstance;
                                    }
                                    
                                    JToken sitePropertiesValue = propertiesValue["siteProperties"];
                                    if (sitePropertiesValue != null && sitePropertiesValue.Type != JTokenType.Null)
                                    {
                                        WebSiteProperties.SiteProperties sitePropertiesInstance = new WebSiteProperties.SiteProperties();
                                        propertiesInstance.Properties = sitePropertiesInstance;
                                        
                                        JToken appSettingsSequenceElement = ((JToken)sitePropertiesValue["appSettings"]);
                                        if (appSettingsSequenceElement != null && appSettingsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in appSettingsSequenceElement)
                                            {
                                                string appSettingsKey = ((string)property.Name);
                                                string appSettingsValue = ((string)property.Value);
                                                sitePropertiesInstance.AppSettings.Add(appSettingsKey, appSettingsValue);
                                            }
                                        }
                                        
                                        JToken metadataSequenceElement = ((JToken)sitePropertiesValue["metadata"]);
                                        if (metadataSequenceElement != null && metadataSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in metadataSequenceElement)
                                            {
                                                string metadataKey = ((string)property2.Name);
                                                string metadataValue = ((string)property2.Value);
                                                sitePropertiesInstance.Metadata.Add(metadataKey, metadataValue);
                                            }
                                        }
                                        
                                        JToken propertiesSequenceElement = ((JToken)sitePropertiesValue["properties"]);
                                        if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property3 in propertiesSequenceElement)
                                            {
                                                string propertiesKey = ((string)property3.Name);
                                                string propertiesValue2 = ((string)property3.Value);
                                                sitePropertiesInstance.Properties.Add(propertiesKey, propertiesValue2);
                                            }
                                        }
                                    }
                                    
                                    JToken stateValue = propertiesValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        WebSiteState stateInstance = ((WebSiteState)Enum.Parse(typeof(WebSiteState), ((string)stateValue), true));
                                        propertiesInstance.State = stateInstance;
                                    }
                                    
                                    JToken usageStateValue = propertiesValue["usageState"];
                                    if (usageStateValue != null && usageStateValue.Type != JTokenType.Null)
                                    {
                                        WebSiteUsageState usageStateInstance = ((WebSiteUsageState)Enum.Parse(typeof(WebSiteUsageState), ((string)usageStateValue), true));
                                        propertiesInstance.UsageState = usageStateInstance;
                                    }
                                    
                                    JToken webSpaceValue = propertiesValue["webSpace"];
                                    if (webSpaceValue != null && webSpaceValue.Type != JTokenType.Null)
                                    {
                                        string webSpaceInstance = ((string)webSpaceValue);
                                        propertiesInstance.WebSpace = webSpaceInstance;
                                    }
                                    
                                    JToken provisioningStateValue = propertiesValue["provisioningState"];
                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                        propertiesInstance.ProvisioningState = provisioningStateInstance;
                                    }
                                }
                                
                                JToken idValue = valueValue["id"];
                                if (idValue != null && idValue.Type != JTokenType.Null)
                                {
                                    string idInstance = ((string)idValue);
                                    webSiteInstance.Id = idInstance;
                                }
                                
                                JToken nameValue2 = valueValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    webSiteInstance.Name = nameInstance2;
                                }
                                
                                JToken locationValue = valueValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string locationInstance = ((string)locationValue);
                                    webSiteInstance.Location = locationInstance;
                                }
                                
                                JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property4 in tagsSequenceElement)
                                    {
                                        string tagsKey = ((string)property4.Name);
                                        string tagsValue = ((string)property4.Value);
                                        webSiteInstance.Tags.Add(tagsKey, tagsValue);
                                    }
                                }
                                
                                JToken typeValue = valueValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    string typeInstance = ((string)typeValue);
                                    webSiteInstance.Type = typeInstance;
                                }
                            }
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns list of all backups which are tracked by the system.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of backups for the website.
        /// </returns>
        public async Task<WebSiteGetBackupsResponse> ListBackupsAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "ListBackupsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/restore?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteGetBackupsResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteGetBackupsResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        BackupItemsEnvelope backupListInstance = new BackupItemsEnvelope();
                        result.BackupList = backupListInstance;
                        
                        JToken propertiesArray = responseDoc["properties"];
                        if (propertiesArray != null && propertiesArray.Type != JTokenType.Null)
                        {
                            foreach (JToken propertiesValue in ((JArray)propertiesArray))
                            {
                                BackupItem backupItemInstance = new BackupItem();
                                backupListInstance.Properties.Add(backupItemInstance);
                                
                                JToken storageAccountUrlValue = propertiesValue["storageAccountUrl"];
                                if (storageAccountUrlValue != null && storageAccountUrlValue.Type != JTokenType.Null)
                                {
                                    string storageAccountUrlInstance = ((string)storageAccountUrlValue);
                                    backupItemInstance.StorageAccountUrl = storageAccountUrlInstance;
                                }
                                
                                JToken blobNameValue = propertiesValue["blobName"];
                                if (blobNameValue != null && blobNameValue.Type != JTokenType.Null)
                                {
                                    string blobNameInstance = ((string)blobNameValue);
                                    backupItemInstance.BlobName = blobNameInstance;
                                }
                                
                                JToken nameValue = propertiesValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    backupItemInstance.Name = nameInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    BackupItemStatus statusInstance = ((BackupItemStatus)Enum.Parse(typeof(BackupItemStatus), ((string)statusValue), true));
                                    backupItemInstance.Status = statusInstance;
                                }
                                
                                JToken sizeInBytesValue = propertiesValue["sizeInBytes"];
                                if (sizeInBytesValue != null && sizeInBytesValue.Type != JTokenType.Null)
                                {
                                    long sizeInBytesInstance = ((long)sizeInBytesValue);
                                    backupItemInstance.SizeInBytes = sizeInBytesInstance;
                                }
                                
                                JToken createdValue = propertiesValue["created"];
                                if (createdValue != null && createdValue.Type != JTokenType.Null)
                                {
                                    DateTime createdInstance = ((DateTime)createdValue);
                                    backupItemInstance.Created = createdInstance;
                                }
                                
                                JToken logValue = propertiesValue["log"];
                                if (logValue != null && logValue.Type != JTokenType.Null)
                                {
                                    string logInstance = ((string)logValue);
                                    backupItemInstance.Log = logInstance;
                                }
                                
                                JToken databasesArray = propertiesValue["databases"];
                                if (databasesArray != null && databasesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken databasesValue in ((JArray)databasesArray))
                                    {
                                        DatabaseBackupSetting databaseBackupSettingInstance = new DatabaseBackupSetting();
                                        backupItemInstance.Databases.Add(databaseBackupSettingInstance);
                                        
                                        JToken connectionStringValue = databasesValue["connectionString"];
                                        if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                        {
                                            string connectionStringInstance = ((string)connectionStringValue);
                                            databaseBackupSettingInstance.ConnectionString = connectionStringInstance;
                                        }
                                        
                                        JToken connectionStringNameValue = databasesValue["connectionStringName"];
                                        if (connectionStringNameValue != null && connectionStringNameValue.Type != JTokenType.Null)
                                        {
                                            string connectionStringNameInstance = ((string)connectionStringNameValue);
                                            databaseBackupSettingInstance.ConnectionStringName = connectionStringNameInstance;
                                        }
                                        
                                        JToken databaseTypeValue = databasesValue["databaseType"];
                                        if (databaseTypeValue != null && databaseTypeValue.Type != JTokenType.Null)
                                        {
                                            string databaseTypeInstance = ((string)databaseTypeValue);
                                            databaseBackupSettingInstance.DatabaseType = databaseTypeInstance;
                                        }
                                        
                                        JToken nameValue2 = databasesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            databaseBackupSettingInstance.Name = nameInstance2;
                                        }
                                    }
                                }
                                
                                JToken scheduledValue = propertiesValue["scheduled"];
                                if (scheduledValue != null && scheduledValue.Type != JTokenType.Null)
                                {
                                    bool scheduledInstance = ((bool)scheduledValue);
                                    backupItemInstance.Scheduled = scheduledInstance;
                                }
                                
                                JToken lastRestoreTimeStampValue = propertiesValue["lastRestoreTimeStamp"];
                                if (lastRestoreTimeStampValue != null && lastRestoreTimeStampValue.Type != JTokenType.Null)
                                {
                                    DateTime lastRestoreTimeStampInstance = ((DateTime)lastRestoreTimeStampValue);
                                    backupItemInstance.LastRestoreTimeStamp = lastRestoreTimeStampInstance;
                                }
                                
                                JToken finishedTimeStampValue = propertiesValue["finishedTimeStamp"];
                                if (finishedTimeStampValue != null && finishedTimeStampValue.Type != JTokenType.Null)
                                {
                                    DateTime finishedTimeStampInstance = ((DateTime)finishedTimeStampValue);
                                    backupItemInstance.FinishedTimeStamp = finishedTimeStampInstance;
                                }
                                
                                JToken correlationIdValue = propertiesValue["correlationId"];
                                if (correlationIdValue != null && correlationIdValue.Type != JTokenType.Null)
                                {
                                    string correlationIdInstance = ((string)correlationIdValue);
                                    backupItemInstance.CorrelationId = correlationIdInstance;
                                }
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            backupListInstance.Id = idInstance;
                        }
                        
                        JToken nameValue3 = responseDoc["name"];
                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                        {
                            string nameInstance3 = ((string)nameValue3);
                            backupListInstance.Name = nameInstance3;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            backupListInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey = ((string)property.Name);
                                string tagsValue = ((string)property.Value);
                                backupListInstance.Tags.Add(tagsKey, tagsValue);
                            }
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            backupListInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> RestartAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "RestartAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/restart?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Restores a site to either a new site or existing site (Overwrite
        /// flag has to be set to true for that).
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// Required. A restore request.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Restore operation information.
        /// </returns>
        public async Task<WebSiteRestoreResponse> RestoreAsync(string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (restoreRequestEnvelope == null)
            {
                throw new ArgumentNullException("restoreRequestEnvelope");
            }
            if (restoreRequestEnvelope.Location == null)
            {
                throw new ArgumentNullException("restoreRequestEnvelope.Location");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("restoreRequestEnvelope", restoreRequestEnvelope);
                Tracing.Enter(invocationId, this, "RestoreAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim() + "?";
            url = url + "api-version=2014-06-01";
            url = url + "&operation=restore";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject restoreRequestEnvelopeValue = new JObject();
                requestDoc = restoreRequestEnvelopeValue;
                
                if (restoreRequestEnvelope.Request != null)
                {
                    JObject propertiesValue = new JObject();
                    restoreRequestEnvelopeValue["properties"] = propertiesValue;
                    
                    propertiesValue["AdjustConnectionStrings"] = restoreRequestEnvelope.Request.AdjustConnectionStrings;
                    
                    if (restoreRequestEnvelope.Request.BlobName != null)
                    {
                        propertiesValue["BlobName"] = restoreRequestEnvelope.Request.BlobName;
                    }
                    
                    if (restoreRequestEnvelope.Request.Databases != null)
                    {
                        JArray databasesArray = new JArray();
                        foreach (DatabaseBackupSetting databasesItem in restoreRequestEnvelope.Request.Databases)
                        {
                            JObject databaseBackupSettingValue = new JObject();
                            databasesArray.Add(databaseBackupSettingValue);
                            
                            if (databasesItem.ConnectionString != null)
                            {
                                databaseBackupSettingValue["connectionString"] = databasesItem.ConnectionString;
                            }
                            
                            if (databasesItem.ConnectionStringName != null)
                            {
                                databaseBackupSettingValue["connectionStringName"] = databasesItem.ConnectionStringName;
                            }
                            
                            if (databasesItem.DatabaseType != null)
                            {
                                databaseBackupSettingValue["databaseType"] = databasesItem.DatabaseType;
                            }
                            
                            if (databasesItem.Name != null)
                            {
                                databaseBackupSettingValue["name"] = databasesItem.Name;
                            }
                        }
                        propertiesValue["Databases"] = databasesArray;
                    }
                    
                    propertiesValue["IgnoreConflictingHostNames"] = restoreRequestEnvelope.Request.IgnoreConflictingHostNames;
                    
                    propertiesValue["Overwrite"] = restoreRequestEnvelope.Request.Overwrite;
                    
                    if (restoreRequestEnvelope.Request.StorageAccountUrl != null)
                    {
                        propertiesValue["StorageAccountUrl"] = restoreRequestEnvelope.Request.StorageAccountUrl;
                    }
                }
                
                if (restoreRequestEnvelope.Id != null)
                {
                    restoreRequestEnvelopeValue["id"] = restoreRequestEnvelope.Id;
                }
                
                if (restoreRequestEnvelope.Name != null)
                {
                    restoreRequestEnvelopeValue["name"] = restoreRequestEnvelope.Name;
                }
                
                restoreRequestEnvelopeValue["location"] = restoreRequestEnvelope.Location;
                
                JObject tagsDictionary = new JObject();
                if (restoreRequestEnvelope.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in restoreRequestEnvelope.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                restoreRequestEnvelopeValue["tags"] = tagsDictionary;
                
                if (restoreRequestEnvelope.Type != null)
                {
                    restoreRequestEnvelopeValue["type"] = restoreRequestEnvelope.Type;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteRestoreResponse result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteRestoreResponse();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    JToken restoreResponseValue = responseDoc["RestoreResponse"];
                    if (restoreResponseValue != null && restoreResponseValue.Type != JTokenType.Null)
                    {
                        WebSiteRestoreResponse restoreResponseInstance = new WebSiteRestoreResponse();
                        
                        JToken operationIdValue = restoreResponseValue["operationId"];
                        if (operationIdValue != null && operationIdValue.Type != JTokenType.Null)
                        {
                            string operationIdInstance = ((string)operationIdValue);
                            restoreResponseInstance.OperationId = operationIdInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> StartAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "StartAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/start?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> StopAsync(string resourceGroupName, string webSiteName, string slotName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                Tracing.Enter(invocationId, this, "StopAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/stop?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the application settings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site app settings parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        public async Task<WebSiteAppSettingsResult> UpdateAppSettingsAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateAppSettingsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/config/appsettings?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject webSiteNameValueParametersValue = new JObject();
                requestDoc = webSiteNameValueParametersValue;
                
                if (parameters.Properties != null)
                {
                    JArray propertiesArray = new JArray();
                    foreach (NameValuePair propertiesItem in parameters.Properties)
                    {
                        JObject nameValuePairValue = new JObject();
                        propertiesArray.Add(nameValuePairValue);
                        
                        if (propertiesItem.Name != null)
                        {
                            nameValuePairValue["name"] = propertiesItem.Name;
                        }
                        
                        if (propertiesItem.Value != null)
                        {
                            nameValuePairValue["value"] = propertiesItem.Value;
                        }
                    }
                    webSiteNameValueParametersValue["properties"] = propertiesArray;
                }
                
                if (parameters.Id != null)
                {
                    webSiteNameValueParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    webSiteNameValueParametersValue["name"] = parameters.Name;
                }
                
                webSiteNameValueParametersValue["location"] = parameters.Location;
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                webSiteNameValueParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Type != null)
                {
                    webSiteNameValueParametersValue["type"] = parameters.Type;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteAppSettingsResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteAppSettingsResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        WebSiteAppSettingsEnvelope resourceInstance = new WebSiteAppSettingsEnvelope();
                        result.Resource = resourceInstance;
                        
                        JToken propertiesArray2 = responseDoc["properties"];
                        if (propertiesArray2 != null && propertiesArray2.Type != JTokenType.Null)
                        {
                            foreach (JToken propertiesValue in ((JArray)propertiesArray2))
                            {
                                NameValuePair nameValuePairInstance = new NameValuePair();
                                resourceInstance.Properties.Add(nameValuePairInstance);
                                
                                JToken nameValue = propertiesValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    nameValuePairInstance.Name = nameInstance;
                                }
                                
                                JToken valueValue = propertiesValue["value"];
                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                {
                                    string valueInstance = ((string)valueValue);
                                    nameValuePairInstance.Value = valueInstance;
                                }
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            resourceInstance.Id = idInstance;
                        }
                        
                        JToken nameValue2 = responseDoc["name"];
                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                        {
                            string nameInstance2 = ((string)nameValue2);
                            resourceInstance.Name = nameInstance2;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            resourceInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                resourceInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            resourceInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates a backup schedule for a site.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// Required. A backup schedule specification.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateBackupConfigurationAsync(string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (backupRequestEnvelope == null)
            {
                throw new ArgumentNullException("backupRequestEnvelope");
            }
            if (backupRequestEnvelope.Location == null)
            {
                throw new ArgumentNullException("backupRequestEnvelope.Location");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("backupRequestEnvelope", backupRequestEnvelope);
                Tracing.Enter(invocationId, this, "UpdateBackupConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/backup/config?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject backupRequestEnvelopeValue = new JObject();
                requestDoc = backupRequestEnvelopeValue;
                
                if (backupRequestEnvelope.Request != null)
                {
                    JObject propertiesValue = new JObject();
                    backupRequestEnvelopeValue["properties"] = propertiesValue;
                    
                    if (backupRequestEnvelope.Request.BackupSchedule != null)
                    {
                        JObject backupScheduleValue = new JObject();
                        propertiesValue["backupSchedule"] = backupScheduleValue;
                        
                        backupScheduleValue["frequencyInterval"] = backupRequestEnvelope.Request.BackupSchedule.FrequencyInterval;
                        
                        backupScheduleValue["frequencyUnit"] = backupRequestEnvelope.Request.BackupSchedule.FrequencyUnit.ToString();
                        
                        backupScheduleValue["keepAtLeastOneBackup"] = backupRequestEnvelope.Request.BackupSchedule.KeepAtLeastOneBackup;
                        
                        if (backupRequestEnvelope.Request.BackupSchedule.LastExecutionTime != null)
                        {
                            backupScheduleValue["lastExecutionTime"] = backupRequestEnvelope.Request.BackupSchedule.LastExecutionTime.Value;
                        }
                        
                        backupScheduleValue["retentionPeriodInDays"] = backupRequestEnvelope.Request.BackupSchedule.RetentionPeriodInDays;
                        
                        if (backupRequestEnvelope.Request.BackupSchedule.StartTime != null)
                        {
                            backupScheduleValue["startTime"] = backupRequestEnvelope.Request.BackupSchedule.StartTime.Value;
                        }
                    }
                    
                    if (backupRequestEnvelope.Request.Databases != null)
                    {
                        JArray databasesArray = new JArray();
                        foreach (DatabaseBackupSetting databasesItem in backupRequestEnvelope.Request.Databases)
                        {
                            JObject databaseBackupSettingValue = new JObject();
                            databasesArray.Add(databaseBackupSettingValue);
                            
                            if (databasesItem.ConnectionString != null)
                            {
                                databaseBackupSettingValue["connectionString"] = databasesItem.ConnectionString;
                            }
                            
                            if (databasesItem.ConnectionStringName != null)
                            {
                                databaseBackupSettingValue["connectionStringName"] = databasesItem.ConnectionStringName;
                            }
                            
                            if (databasesItem.DatabaseType != null)
                            {
                                databaseBackupSettingValue["databaseType"] = databasesItem.DatabaseType;
                            }
                            
                            if (databasesItem.Name != null)
                            {
                                databaseBackupSettingValue["name"] = databasesItem.Name;
                            }
                        }
                        propertiesValue["databases"] = databasesArray;
                    }
                    
                    if (backupRequestEnvelope.Request.Enabled != null)
                    {
                        propertiesValue["enabled"] = backupRequestEnvelope.Request.Enabled.Value;
                    }
                    
                    if (backupRequestEnvelope.Request.Name != null)
                    {
                        propertiesValue["name"] = backupRequestEnvelope.Request.Name;
                    }
                    
                    if (backupRequestEnvelope.Request.StorageAccountUrl != null)
                    {
                        propertiesValue["storageAccountUrl"] = backupRequestEnvelope.Request.StorageAccountUrl;
                    }
                }
                
                if (backupRequestEnvelope.Id != null)
                {
                    backupRequestEnvelopeValue["id"] = backupRequestEnvelope.Id;
                }
                
                if (backupRequestEnvelope.Name != null)
                {
                    backupRequestEnvelopeValue["name"] = backupRequestEnvelope.Name;
                }
                
                backupRequestEnvelopeValue["location"] = backupRequestEnvelope.Location;
                
                JObject tagsDictionary = new JObject();
                if (backupRequestEnvelope.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in backupRequestEnvelope.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                backupRequestEnvelopeValue["tags"] = tagsDictionary;
                
                if (backupRequestEnvelope.Type != null)
                {
                    backupRequestEnvelopeValue["type"] = backupRequestEnvelope.Type;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site Configuration parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<OperationResponse> UpdateConfigurationAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConfigurationParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateConfigurationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/config/web?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject siteConfigValue = new JObject();
                requestDoc = new JObject();
                requestDoc["Properties"] = siteConfigValue;
                
                // suwatch
                if (parameters.AppSettings != null)
                {
                    JObject appSettingsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.AppSettings)
                    {
                        string appSettingsKey = pair.Key;
                        string appSettingsValue = pair.Value;
                        appSettingsDictionary[appSettingsKey] = appSettingsValue;
                    }
                    siteConfigValue["appSettings"] = appSettingsDictionary;
                }
                
                if (parameters.ConnectionStrings != null)
                {
                    JArray connectionStringsArray = new JArray();
                    foreach (ConnectionStringInfo connectionStringsItem in parameters.ConnectionStrings)
                    {
                        JObject connStringInfoValue = new JObject();
                        connectionStringsArray.Add(connStringInfoValue);
                        
                        if (connectionStringsItem.ConnectionString != null)
                        {
                            connStringInfoValue["connectionString"] = connectionStringsItem.ConnectionString;
                        }
                        
                        if (connectionStringsItem.Name != null)
                        {
                            connStringInfoValue["name"] = connectionStringsItem.Name;
                        }
                        
                        connStringInfoValue["type"] = connectionStringsItem.Type.ToString();
                    }
                    siteConfigValue["connectionStrings"] = connectionStringsArray;
                }
                
                if (parameters.DefaultDocuments != null)
                {
                    JArray defaultDocumentsArray = new JArray();
                    foreach (string defaultDocumentsItem in parameters.DefaultDocuments)
                    {
                        defaultDocumentsArray.Add(defaultDocumentsItem);
                    }
                    siteConfigValue["defaultDocuments"] = defaultDocumentsArray;
                }
                
                if (parameters.DetailedErrorLoggingEnabled != null)
                {
                    siteConfigValue["detailedErrorLoggingEnabled"] = parameters.DetailedErrorLoggingEnabled.Value;
                }
                
                if (parameters.DocumentRoot != null)
                {
                    siteConfigValue["documentRoot"] = parameters.DocumentRoot;
                }
                
                if (parameters.HandlerMappings != null)
                {
                    JArray handlerMappingsArray = new JArray();
                    foreach (WebSiteUpdateConfigurationParameters.HandlerMapping handlerMappingsItem in parameters.HandlerMappings)
                    {
                        JObject handlerMappingValue = new JObject();
                        handlerMappingsArray.Add(handlerMappingValue);
                        
                        if (handlerMappingsItem.Arguments != null)
                        {
                            handlerMappingValue["arguments"] = handlerMappingsItem.Arguments;
                        }
                        
                        if (handlerMappingsItem.Extension != null)
                        {
                            handlerMappingValue["extension"] = handlerMappingsItem.Extension;
                        }
                        
                        if (handlerMappingsItem.ScriptProcessor != null)
                        {
                            handlerMappingValue["scriptProcessor"] = handlerMappingsItem.ScriptProcessor;
                        }
                    }
                    siteConfigValue["handlerMappings"] = handlerMappingsArray;
                }
                
                if (parameters.HttpLoggingEnabled != null)
                {
                    siteConfigValue["httpLoggingEnabled"] = parameters.HttpLoggingEnabled.Value;
                }
                
                if (parameters.LogsDirectorySizeLimit != null)
                {
                    siteConfigValue["logsDirectorySizeLimit"] = parameters.LogsDirectorySizeLimit.Value;
                }
                
                if (parameters.ManagedPipelineMode != null)
                {
                    siteConfigValue["managedPipelineMode"] = parameters.ManagedPipelineMode.Value.ToString();
                }

                // suwatch
                if (parameters.Metadata != null)
                {
                    JObject metadataDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair2 in parameters.Metadata)
                    {
                        string metadataKey = pair2.Key;
                        string metadataValue = pair2.Value;
                        metadataDictionary[metadataKey] = metadataValue;
                    }
                    siteConfigValue["metadata"] = metadataDictionary;
                }
                
                if (parameters.NetFrameworkVersion != null)
                {
                    siteConfigValue["netFrameworkVersion"] = parameters.NetFrameworkVersion;
                }
                
                if (parameters.NumberOfWorkers != null)
                {
                    siteConfigValue["numberOfWorkers"] = parameters.NumberOfWorkers.Value;
                }
                
                if (parameters.PhpVersion != null)
                {
                    siteConfigValue["phpVersion"] = parameters.PhpVersion;
                }
                
                if (parameters.RemoteDebuggingEnabled != null)
                {
                    siteConfigValue["remoteDebuggingEnabled"] = parameters.RemoteDebuggingEnabled.Value;
                }
                
                siteConfigValue["remoteDebuggingVersion"] = parameters.RemoteDebuggingVersion.ToString();
                
                if (parameters.RequestTracingEnabled != null)
                {
                    siteConfigValue["requestTracingEnabled"] = parameters.RequestTracingEnabled.Value;
                }
                
                if (parameters.RequestTracingExpirationTime != null)
                {
                    siteConfigValue["requestTracingExpirationTime"] = parameters.RequestTracingExpirationTime.Value;
                }
                
                if (parameters.ScmType != null)
                {
                    siteConfigValue["scmType"] = parameters.ScmType;
                }
                
                if (parameters.Use32BitWorkerProcess != null)
                {
                    siteConfigValue["use32BitWorkerProcess"] = parameters.Use32BitWorkerProcess.Value;
                }
                
                if (parameters.WebSocketsEnabled != null)
                {
                    siteConfigValue["webSocketsEnabled"] = parameters.WebSocketsEnabled.Value;
                }
                
                if (parameters.AlwaysOn != null)
                {
                    siteConfigValue["alwaysOn"] = parameters.AlwaysOn.Value;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    OperationResponse result = null;
                    result = new OperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the connection strings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site connection strings parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        public async Task<WebSiteConnectionStringsResult> UpdateConnectionStringsAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConnectionStringsParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateConnectionStringsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/config/connectionstrings?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject webSiteUpdateConnectionStringsParametersValue = new JObject();
                requestDoc = webSiteUpdateConnectionStringsParametersValue;
                
                if (parameters.Properties != null)
                {
                    JArray propertiesArray = new JArray();
                    foreach (ConnectionStringInfo propertiesItem in parameters.Properties)
                    {
                        JObject connStringInfoValue = new JObject();
                        propertiesArray.Add(connStringInfoValue);
                        
                        if (propertiesItem.ConnectionString != null)
                        {
                            connStringInfoValue["connectionString"] = propertiesItem.ConnectionString;
                        }
                        
                        if (propertiesItem.Name != null)
                        {
                            connStringInfoValue["name"] = propertiesItem.Name;
                        }
                        
                        connStringInfoValue["type"] = propertiesItem.Type.ToString();
                    }
                    webSiteUpdateConnectionStringsParametersValue["properties"] = propertiesArray;
                }
                
                if (parameters.Id != null)
                {
                    webSiteUpdateConnectionStringsParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    webSiteUpdateConnectionStringsParametersValue["name"] = parameters.Name;
                }
                
                webSiteUpdateConnectionStringsParametersValue["location"] = parameters.Location;
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                webSiteUpdateConnectionStringsParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Type != null)
                {
                    webSiteUpdateConnectionStringsParametersValue["type"] = parameters.Type;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteConnectionStringsResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteConnectionStringsResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        WebSiteConnectionStringsEnvelope resourceInstance = new WebSiteConnectionStringsEnvelope();
                        result.Resource = resourceInstance;
                        
                        JToken propertiesArray2 = responseDoc["properties"];
                        if (propertiesArray2 != null && propertiesArray2.Type != JTokenType.Null)
                        {
                            foreach (JToken propertiesValue in ((JArray)propertiesArray2))
                            {
                                ConnectionStringInfo connStringInfoInstance = new ConnectionStringInfo();
                                resourceInstance.Properties.Add(connStringInfoInstance);
                                
                                JToken connectionStringValue = propertiesValue["connectionString"];
                                if (connectionStringValue != null && connectionStringValue.Type != JTokenType.Null)
                                {
                                    string connectionStringInstance = ((string)connectionStringValue);
                                    connStringInfoInstance.ConnectionString = connectionStringInstance;
                                }
                                
                                JToken nameValue = propertiesValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    connStringInfoInstance.Name = nameInstance;
                                }
                                
                                JToken typeValue = propertiesValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    DatabaseServerType typeInstance = ((DatabaseServerType)Enum.Parse(typeof(DatabaseServerType), ((string)typeValue), true));
                                    connStringInfoInstance.Type = typeInstance;
                                }
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            resourceInstance.Id = idInstance;
                        }
                        
                        JToken nameValue2 = responseDoc["name"];
                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                        {
                            string nameInstance2 = ((string)nameValue2);
                            resourceInstance.Name = nameInstance2;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            resourceInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                resourceInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                        
                        JToken typeValue2 = responseDoc["type"];
                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                        {
                            string typeInstance2 = ((string)typeValue2);
                            resourceInstance.Type = typeInstance2;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// You can retrieve the metadata for a web site by issuing an HTTP GET
        /// request, or update them by using HTTP PUT with a request body that
        /// contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site metadata parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        public async Task<WebSiteMetadataResult> UpdateMetadataAsync(string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (webSiteName == null)
            {
                throw new ArgumentNullException("webSiteName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = CloudContext.Configuration.Tracing.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = Tracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("webSiteName", webSiteName);
                tracingParameters.Add("slotName", slotName);
                tracingParameters.Add("parameters", parameters);
                Tracing.Enter(invocationId, this, "UpdateMetadataAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "/subscriptions/" + (this.Client.Credentials.SubscriptionId != null ? this.Client.Credentials.SubscriptionId.Trim() : "") + "/resourceGroups/" + resourceGroupName.Trim() + "/providers/Microsoft.Web/sites/" + webSiteName.Trim();
            if (slotName != null)
            {
                url = url + "/slots/" + Uri.EscapeDataString(slotName != null ? slotName.Trim() : "");
            }
            url = url + "/config/metadata?";
            url = url + "api-version=2014-06-01";
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject webSiteNameValueParametersValue = new JObject();
                requestDoc = webSiteNameValueParametersValue;
                
                if (parameters.Properties != null)
                {
                    JArray propertiesArray = new JArray();
                    foreach (NameValuePair propertiesItem in parameters.Properties)
                    {
                        JObject nameValuePairValue = new JObject();
                        propertiesArray.Add(nameValuePairValue);
                        
                        if (propertiesItem.Name != null)
                        {
                            nameValuePairValue["name"] = propertiesItem.Name;
                        }
                        
                        if (propertiesItem.Value != null)
                        {
                            nameValuePairValue["value"] = propertiesItem.Value;
                        }
                    }
                    webSiteNameValueParametersValue["properties"] = propertiesArray;
                }
                
                if (parameters.Id != null)
                {
                    webSiteNameValueParametersValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    webSiteNameValueParametersValue["name"] = parameters.Name;
                }
                
                webSiteNameValueParametersValue["location"] = parameters.Location;
                
                JObject tagsDictionary = new JObject();
                if (parameters.Tags != null)
                {
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                }
                webSiteNameValueParametersValue["tags"] = tagsDictionary;
                
                if (parameters.Type != null)
                {
                    webSiteNameValueParametersValue["type"] = parameters.Type;
                }
                
                requestContent = requestDoc.ToString(Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        Tracing.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        Tracing.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            Tracing.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    WebSiteMetadataResult result = null;
                    // Deserialize Response
                    cancellationToken.ThrowIfCancellationRequested();
                    string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    result = new WebSiteMetadataResult();
                    JToken responseDoc = null;
                    if (string.IsNullOrEmpty(responseContent) == false)
                    {
                        responseDoc = JToken.Parse(responseContent);
                    }
                    
                    if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                    {
                        WebSiteMetadataEnvelope resourceInstance = new WebSiteMetadataEnvelope();
                        result.Resource = resourceInstance;
                        
                        JToken propertiesArray2 = responseDoc["properties"];
                        if (propertiesArray2 != null && propertiesArray2.Type != JTokenType.Null)
                        {
                            foreach (JToken propertiesValue in ((JArray)propertiesArray2))
                            {
                                NameValuePair nameValuePairInstance = new NameValuePair();
                                resourceInstance.Properties.Add(nameValuePairInstance);
                                
                                JToken nameValue = propertiesValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    nameValuePairInstance.Name = nameInstance;
                                }
                                
                                JToken valueValue = propertiesValue["value"];
                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                {
                                    string valueInstance = ((string)valueValue);
                                    nameValuePairInstance.Value = valueInstance;
                                }
                            }
                        }
                        
                        JToken idValue = responseDoc["id"];
                        if (idValue != null && idValue.Type != JTokenType.Null)
                        {
                            string idInstance = ((string)idValue);
                            resourceInstance.Id = idInstance;
                        }
                        
                        JToken nameValue2 = responseDoc["name"];
                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                        {
                            string nameInstance2 = ((string)nameValue2);
                            resourceInstance.Name = nameInstance2;
                        }
                        
                        JToken locationValue = responseDoc["location"];
                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                        {
                            string locationInstance = ((string)locationValue);
                            resourceInstance.Location = locationInstance;
                        }
                        
                        JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                        {
                            foreach (JProperty property in tagsSequenceElement)
                            {
                                string tagsKey2 = ((string)property.Name);
                                string tagsValue2 = ((string)property.Value);
                                resourceInstance.Tags.Add(tagsKey2, tagsValue2);
                            }
                        }
                        
                        JToken typeValue = responseDoc["type"];
                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                        {
                            string typeInstance = ((string)typeValue);
                            resourceInstance.Type = typeInstance;
                        }
                    }
                    
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        Tracing.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
